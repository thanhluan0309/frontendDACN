{"ast":null,"code":"'use strict';\n\nconst SMTPConnection = require('../smtp-connection');\n\nconst assign = require('../shared').assign;\n\nconst XOAuth2 = require('../xoauth2');\n\nconst EventEmitter = require('events');\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\n\n\nclass PoolResource extends EventEmitter {\n  constructor(pool) {\n    super();\n    this.pool = pool;\n    this.options = pool.options;\n    this.logger = this.pool.logger;\n\n    if (this.options.auth) {\n      switch ((this.options.auth.type || '').toString().toUpperCase()) {\n        case 'OAUTH2':\n          {\n            let oauth2 = new XOAuth2(this.options.auth, this.logger);\n            oauth2.provisionCallback = this.pool.mailer && this.pool.mailer.get('oauth2_provision_cb') || oauth2.provisionCallback;\n            this.auth = {\n              type: 'OAUTH2',\n              user: this.options.auth.user,\n              oauth2,\n              method: 'XOAUTH2'\n            };\n            oauth2.on('token', token => this.pool.mailer.emit('token', token));\n            oauth2.on('error', err => this.emit('error', err));\n            break;\n          }\n\n        default:\n          if (!this.options.auth.user && !this.options.auth.pass) {\n            break;\n          }\n\n          this.auth = {\n            type: (this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n            user: this.options.auth.user,\n            credentials: {\n              user: this.options.auth.user || '',\n              pass: this.options.auth.pass,\n              options: this.options.auth.options\n            },\n            method: (this.options.auth.method || '').trim().toUpperCase() || this.options.authMethod || false\n          };\n      }\n    }\n\n    this._connection = false;\n    this._connected = false;\n    this.messages = 0;\n    this.available = true;\n  }\n  /**\n   * Initiates a connection to the SMTP server\n   *\n   * @param {Function} callback Callback function to run once the connection is established or failed\n   */\n\n\n  connect(callback) {\n    this.pool.getSocket(this.options, (err, socketOptions) => {\n      if (err) {\n        return callback(err);\n      }\n\n      let returned = false;\n      let options = this.options;\n\n      if (socketOptions && socketOptions.connection) {\n        this.logger.info({\n          tnx: 'proxy',\n          remoteAddress: socketOptions.connection.remoteAddress,\n          remotePort: socketOptions.connection.remotePort,\n          destHost: options.host || '',\n          destPort: options.port || '',\n          action: 'connected'\n        }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n        options = assign(false, options);\n        Object.keys(socketOptions).forEach(key => {\n          options[key] = socketOptions[key];\n        });\n      }\n\n      this.connection = new SMTPConnection(options);\n      this.connection.once('error', err => {\n        this.emit('error', err);\n\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n        return callback(err);\n      });\n      this.connection.once('end', () => {\n        this.close();\n\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n        let timer = setTimeout(() => {\n          if (returned) {\n            return;\n          } // still have not returned, this means we have an unexpected connection close\n\n\n          let err = new Error('Unexpected socket close');\n\n          if (this.connection && this.connection._socket && this.connection._socket.upgrading) {\n            // starttls connection errors\n            err.code = 'ETLS';\n          }\n\n          callback(err);\n        }, 1000);\n\n        try {\n          timer.unref();\n        } catch (E) {// Ignore. Happens on envs with non-node timer implementation\n        }\n      });\n      this.connection.connect(() => {\n        if (returned) {\n          return;\n        }\n\n        if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {\n          this.connection.login(this.auth, err => {\n            if (returned) {\n              return;\n            }\n\n            returned = true;\n\n            if (err) {\n              this.connection.close();\n              this.emit('error', err);\n              return callback(err);\n            }\n\n            this._connected = true;\n            callback(null, true);\n          });\n        } else {\n          returned = true;\n          this._connected = true;\n          return callback(null, true);\n        }\n      });\n    });\n  }\n  /**\n   * Sends an e-mail to be sent using the selected settings\n   *\n   * @param {Object} mail Mail object\n   * @param {Function} callback Callback function\n   */\n\n\n  send(mail, callback) {\n    if (!this._connected) {\n      return this.connect(err => {\n        if (err) {\n          return callback(err);\n        }\n\n        return this.send(mail, callback);\n      });\n    }\n\n    let envelope = mail.message.getEnvelope();\n    let messageId = mail.message.messageId();\n    let recipients = [].concat(envelope.to || []);\n\n    if (recipients.length > 3) {\n      recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n\n    this.logger.info({\n      tnx: 'send',\n      messageId,\n      cid: this.id\n    }, 'Sending message %s using #%s to <%s>', messageId, this.id, recipients.join(', '));\n\n    if (mail.data.dsn) {\n      envelope.dsn = mail.data.dsn;\n    }\n\n    this.connection.send(envelope, mail.message.createReadStream(), (err, info) => {\n      this.messages++;\n\n      if (err) {\n        this.connection.close();\n        this.emit('error', err);\n        return callback(err);\n      }\n\n      info.envelope = {\n        from: envelope.from,\n        to: envelope.to\n      };\n      info.messageId = messageId;\n      setImmediate(() => {\n        let err;\n\n        if (this.messages >= this.options.maxMessages) {\n          err = new Error('Resource exhausted');\n          err.code = 'EMAXLIMIT';\n          this.connection.close();\n          this.emit('error', err);\n        } else {\n          this.pool._checkRateLimit(() => {\n            this.available = true;\n            this.emit('available');\n          });\n        }\n      });\n      callback(null, info);\n    });\n  }\n  /**\n   * Closes the connection\n   */\n\n\n  close() {\n    this._connected = false;\n\n    if (this.auth && this.auth.oauth2) {\n      this.auth.oauth2.removeAllListeners();\n    }\n\n    if (this.connection) {\n      this.connection.close();\n    }\n\n    this.emit('close');\n  }\n\n}\n\nmodule.exports = PoolResource;","map":{"version":3,"names":["SMTPConnection","require","assign","XOAuth2","EventEmitter","PoolResource","constructor","pool","options","logger","auth","type","toString","toUpperCase","oauth2","provisionCallback","mailer","get","user","method","on","token","emit","err","pass","credentials","trim","authMethod","_connection","_connected","messages","available","connect","callback","getSocket","socketOptions","returned","connection","info","tnx","remoteAddress","remotePort","destHost","host","destPort","port","action","Object","keys","forEach","key","once","close","timer","setTimeout","Error","_socket","upgrading","code","unref","E","allowsAuth","forceAuth","login","send","mail","envelope","message","getEnvelope","messageId","recipients","concat","to","length","push","splice","cid","id","join","data","dsn","createReadStream","from","setImmediate","maxMessages","_checkRateLimit","removeAllListeners","module","exports"],"sources":["D:/ReactJS/DoAn_CN/my-app/node_modules/nodemailer/lib/smtp-pool/pool-resource.js"],"sourcesContent":["'use strict';\n\nconst SMTPConnection = require('../smtp-connection');\nconst assign = require('../shared').assign;\nconst XOAuth2 = require('../xoauth2');\nconst EventEmitter = require('events');\n\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\nclass PoolResource extends EventEmitter {\n    constructor(pool) {\n        super();\n\n        this.pool = pool;\n        this.options = pool.options;\n        this.logger = this.pool.logger;\n\n        if (this.options.auth) {\n            switch ((this.options.auth.type || '').toString().toUpperCase()) {\n                case 'OAUTH2': {\n                    let oauth2 = new XOAuth2(this.options.auth, this.logger);\n                    oauth2.provisionCallback = (this.pool.mailer && this.pool.mailer.get('oauth2_provision_cb')) || oauth2.provisionCallback;\n                    this.auth = {\n                        type: 'OAUTH2',\n                        user: this.options.auth.user,\n                        oauth2,\n                        method: 'XOAUTH2'\n                    };\n                    oauth2.on('token', token => this.pool.mailer.emit('token', token));\n                    oauth2.on('error', err => this.emit('error', err));\n                    break;\n                }\n                default:\n                    if (!this.options.auth.user && !this.options.auth.pass) {\n                        break;\n                    }\n                    this.auth = {\n                        type: (this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n                        user: this.options.auth.user,\n                        credentials: {\n                            user: this.options.auth.user || '',\n                            pass: this.options.auth.pass,\n                            options: this.options.auth.options\n                        },\n                        method: (this.options.auth.method || '').trim().toUpperCase() || this.options.authMethod || false\n                    };\n            }\n        }\n\n        this._connection = false;\n        this._connected = false;\n\n        this.messages = 0;\n        this.available = true;\n    }\n\n    /**\n     * Initiates a connection to the SMTP server\n     *\n     * @param {Function} callback Callback function to run once the connection is established or failed\n     */\n    connect(callback) {\n        this.pool.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n\n                options = assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            this.connection = new SMTPConnection(options);\n\n            this.connection.once('error', err => {\n                this.emit('error', err);\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(err);\n            });\n\n            this.connection.once('end', () => {\n                this.close();\n                if (returned) {\n                    return;\n                }\n                returned = true;\n\n                let timer = setTimeout(() => {\n                    if (returned) {\n                        return;\n                    }\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error('Unexpected socket close');\n                    if (this.connection && this.connection._socket && this.connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = 'ETLS';\n                    }\n                    callback(err);\n                }, 1000);\n\n                try {\n                    timer.unref();\n                } catch (E) {\n                    // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n\n            this.connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {\n                    this.connection.login(this.auth, err => {\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n\n                        if (err) {\n                            this.connection.close();\n                            this.emit('error', err);\n                            return callback(err);\n                        }\n\n                        this._connected = true;\n                        callback(null, true);\n                    });\n                } else {\n                    returned = true;\n                    this._connected = true;\n                    return callback(null, true);\n                }\n            });\n        });\n    }\n\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n    send(mail, callback) {\n        if (!this._connected) {\n            return this.connect(err => {\n                if (err) {\n                    return callback(err);\n                }\n                return this.send(mail, callback);\n            });\n        }\n\n        let envelope = mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId,\n                cid: this.id\n            },\n            'Sending message %s using #%s to <%s>',\n            messageId,\n            this.id,\n            recipients.join(', ')\n        );\n\n        if (mail.data.dsn) {\n            envelope.dsn = mail.data.dsn;\n        }\n\n        this.connection.send(envelope, mail.message.createReadStream(), (err, info) => {\n            this.messages++;\n\n            if (err) {\n                this.connection.close();\n                this.emit('error', err);\n                return callback(err);\n            }\n\n            info.envelope = {\n                from: envelope.from,\n                to: envelope.to\n            };\n            info.messageId = messageId;\n\n            setImmediate(() => {\n                let err;\n                if (this.messages >= this.options.maxMessages) {\n                    err = new Error('Resource exhausted');\n                    err.code = 'EMAXLIMIT';\n                    this.connection.close();\n                    this.emit('error', err);\n                } else {\n                    this.pool._checkRateLimit(() => {\n                        this.available = true;\n                        this.emit('available');\n                    });\n                }\n            });\n\n            callback(null, info);\n        });\n    }\n\n    /**\n     * Closes the connection\n     */\n    close() {\n        this._connected = false;\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        if (this.connection) {\n            this.connection.close();\n        }\n        this.emit('close');\n    }\n}\n\nmodule.exports = PoolResource;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}