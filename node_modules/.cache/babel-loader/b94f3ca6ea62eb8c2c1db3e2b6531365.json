{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactJS\\\\DoAn_CN\\\\my-app\\\\src\\\\components\\\\Layout\\\\LayoutDND.js\",\n    _s = $RefreshSig$();\n\nimport initData from \"./Data\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport Column from \"./Column\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LayoutDND = () => {\n  _s();\n\n  const [state, setstate] = useState(initData);\n  let results = {\n    draggableId: \"task-1\",\n    type: \"TYPE\",\n    reason: \"DROP\",\n    source: {\n      droppableId: \"colum-1\",\n      index: 0\n    },\n    destination: null\n  };\n\n  const onDragEnd = results => {\n    const {\n      destination,\n      draggableId,\n      source\n    } = results;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const column = state.colums[source.droppableId];\n    const newTaskID = Array.from(column.taskIds);\n    newTaskID.splice(source.index, 1);\n    newTaskID.splice(destination.index, 0, draggableId);\n    const newcolumn = { ...column,\n      taskIds: newTaskID\n    };\n    const newstate = { ...state,\n      colums: { ...state.colums,\n        [newcolumn.id]: newcolumn\n      }\n    };\n    setstate(newstate);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: state.columOrder.map(columID => {\n        const colum = state.colums[columID];\n        const tasks = colum.taskIds.map(taskIds => state.tasks[taskIds]);\n        console.log(colum);\n        return /*#__PURE__*/_jsxDEV(Column, {\n          column: colum,\n          tasks: tasks\n        }, colum.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(LayoutDND, \"SSb1bDK8tUM0uUtv27BzW0fetL4=\");\n\n_c = LayoutDND;\nexport default LayoutDND;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutDND\");","map":{"version":3,"names":["initData","DragDropContext","Column","useState","LayoutDND","state","setstate","results","draggableId","type","reason","source","droppableId","index","destination","onDragEnd","column","colums","newTaskID","Array","from","taskIds","splice","newcolumn","newstate","id","columOrder","map","columID","colum","tasks","console","log"],"sources":["D:/ReactJS/DoAn_CN/my-app/src/components/Layout/LayoutDND.js"],"sourcesContent":["import initData from \"./Data\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport Column from \"./Column\";\r\nimport { useState } from \"react\";\r\nconst LayoutDND = () => {\r\n  const [state, setstate] = useState(initData);\r\n  let results = {\r\n    draggableId: \"task-1\",\r\n    type: \"TYPE\",\r\n    reason: \"DROP\",\r\n    source: {\r\n      droppableId: \"colum-1\",\r\n      index: 0,\r\n    },\r\n    destination: null,\r\n  };\r\n\r\n  const onDragEnd = results => {\r\n    const { destination, draggableId, source } = results;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n    const column = state.colums[source.droppableId];\r\n    const newTaskID = Array.from(column.taskIds);\r\n    newTaskID.splice(source.index, 1);\r\n    newTaskID.splice(destination.index, 0, draggableId);\r\n    const newcolumn = {\r\n      ...column,\r\n      taskIds: newTaskID,\r\n    };\r\n    const newstate = {\r\n      ...state,\r\n      colums: {\r\n        ...state.colums,\r\n        [newcolumn.id]: newcolumn,\r\n      },\r\n    };\r\n    setstate(newstate);\r\n  };\r\n  return (\r\n    <>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        {state.columOrder.map((columID) => {\r\n          const colum = state.colums[columID];\r\n          const tasks = colum.taskIds.map((taskIds) => state.tasks[taskIds]);\r\n          console.log(colum);\r\n          return <Column key={colum.id} column={colum} tasks={tasks}></Column>;\r\n        })}\r\n      </DragDropContext>\r\n    </>\r\n  );\r\n};\r\nexport default LayoutDND;\r\n"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,QAArB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;;AACA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACtB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAACH,QAAD,CAAlC;EACA,IAAIO,OAAO,GAAG;IACZC,WAAW,EAAE,QADD;IAEZC,IAAI,EAAE,MAFM;IAGZC,MAAM,EAAE,MAHI;IAIZC,MAAM,EAAE;MACNC,WAAW,EAAE,SADP;MAENC,KAAK,EAAE;IAFD,CAJI;IAQZC,WAAW,EAAE;EARD,CAAd;;EAWA,MAAMC,SAAS,GAAGR,OAAO,IAAI;IAC3B,MAAM;MAAEO,WAAF;MAAeN,WAAf;MAA4BG;IAA5B,IAAuCJ,OAA7C;;IACA,IAAI,CAACO,WAAL,EAAkB;MAChB;IACD;;IACD,IACEA,WAAW,CAACF,WAAZ,KAA4BD,MAAM,CAACC,WAAnC,IACAE,WAAW,CAACD,KAAZ,KAAsBF,MAAM,CAACE,KAF/B,EAGE;MACA;IACD;;IACD,MAAMG,MAAM,GAAGX,KAAK,CAACY,MAAN,CAAaN,MAAM,CAACC,WAApB,CAAf;IACA,MAAMM,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAWJ,MAAM,CAACK,OAAlB,CAAlB;IACAH,SAAS,CAACI,MAAV,CAAiBX,MAAM,CAACE,KAAxB,EAA+B,CAA/B;IACAK,SAAS,CAACI,MAAV,CAAiBR,WAAW,CAACD,KAA7B,EAAoC,CAApC,EAAuCL,WAAvC;IACA,MAAMe,SAAS,GAAG,EAChB,GAAGP,MADa;MAEhBK,OAAO,EAAEH;IAFO,CAAlB;IAIA,MAAMM,QAAQ,GAAG,EACf,GAAGnB,KADY;MAEfY,MAAM,EAAE,EACN,GAAGZ,KAAK,CAACY,MADH;QAEN,CAACM,SAAS,CAACE,EAAX,GAAgBF;MAFV;IAFO,CAAjB;IAOAjB,QAAQ,CAACkB,QAAD,CAAR;EACD,CA3BD;;EA4BA,oBACE;IAAA,uBACE,QAAC,eAAD;MAAiB,SAAS,EAAET,SAA5B;MAAA,UACGV,KAAK,CAACqB,UAAN,CAAiBC,GAAjB,CAAsBC,OAAD,IAAa;QACjC,MAAMC,KAAK,GAAGxB,KAAK,CAACY,MAAN,CAAaW,OAAb,CAAd;QACA,MAAME,KAAK,GAAGD,KAAK,CAACR,OAAN,CAAcM,GAAd,CAAmBN,OAAD,IAAahB,KAAK,CAACyB,KAAN,CAAYT,OAAZ,CAA/B,CAAd;QACAU,OAAO,CAACC,GAAR,CAAYH,KAAZ;QACA,oBAAO,QAAC,MAAD;UAAuB,MAAM,EAAEA,KAA/B;UAAsC,KAAK,EAAEC;QAA7C,GAAaD,KAAK,CAACJ,EAAnB;UAAA;UAAA;UAAA;QAAA,QAAP;MACD,CALA;IADH;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAYD,CArDD;;GAAMrB,S;;KAAAA,S;AAsDN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}