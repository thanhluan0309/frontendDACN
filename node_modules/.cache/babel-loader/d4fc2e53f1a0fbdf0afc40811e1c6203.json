{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst packageData = require('../../package.json');\n\nconst shared = require('../shared');\n\nconst LeWindows = require('../mime-node/le-windows');\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\n\n\nclass SESTransport extends EventEmitter {\n  constructor(options) {\n    super();\n    options = options || {};\n    this.options = options || {};\n    this.ses = this.options.SES;\n    this.name = 'SESTransport';\n    this.version = packageData.version;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'ses-transport'\n    }); // parallel sending connections\n\n    this.maxConnections = Number(this.options.maxConnections) || Infinity;\n    this.connections = 0; // max messages per second\n\n    this.sendingRate = Number(this.options.sendingRate) || Infinity;\n    this.sendingRateTTL = null;\n    this.rateInterval = 1000; // milliseconds\n\n    this.rateMessages = [];\n    this.pending = [];\n    this.idling = true;\n    setImmediate(() => {\n      if (this.idling) {\n        this.emit('idle');\n      }\n    });\n  }\n  /**\n   * Schedules a sending of a message\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n\n\n  send(mail, callback) {\n    var _this = this;\n\n    if (this.connections >= this.maxConnections) {\n      this.idling = false;\n      return this.pending.push({\n        mail,\n        callback\n      });\n    }\n\n    if (!this._checkSendingRate()) {\n      this.idling = false;\n      return this.pending.push({\n        mail,\n        callback\n      });\n    }\n\n    this._send(mail, function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      setImmediate(() => callback(...args));\n\n      _this._sent();\n    });\n  }\n\n  _checkRatedQueue() {\n    var _this2 = this;\n\n    if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n      return;\n    }\n\n    if (!this.pending.length) {\n      if (!this.idling) {\n        this.idling = true;\n        this.emit('idle');\n      }\n\n      return;\n    }\n\n    let next = this.pending.shift();\n\n    this._send(next.mail, function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      setImmediate(() => next.callback(...args));\n\n      _this2._sent();\n    });\n  }\n\n  _checkSendingRate() {\n    clearTimeout(this.sendingRateTTL);\n    let now = Date.now();\n    let oldest = false; // delete older messages\n\n    for (let i = this.rateMessages.length - 1; i >= 0; i--) {\n      if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n        oldest = this.rateMessages[i].ts;\n      }\n\n      if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n        this.rateMessages.splice(i, 1);\n      }\n    }\n\n    if (this.rateMessages.length < this.sendingRate) {\n      return true;\n    }\n\n    let delay = Math.max(oldest + 1001, now + 20);\n    this.sendingRateTTL = setTimeout(() => this._checkRatedQueue(), now - delay);\n\n    try {\n      this.sendingRateTTL.unref();\n    } catch (E) {// Ignore. Happens on envs with non-node timer implementation\n    }\n\n    return false;\n  }\n\n  _sent() {\n    this.connections--;\n\n    this._checkRatedQueue();\n  }\n  /**\n   * Returns true if there are free slots in the queue\n   */\n\n\n  isIdle() {\n    return this.idling;\n  }\n  /**\n   * Compiles a mailcomposer message and forwards it to SES\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n\n\n  _send(mail, callback) {\n    let statObject = {\n      ts: Date.now(),\n      pending: true\n    };\n    this.connections++;\n    this.rateMessages.push(statObject);\n    let envelope = mail.data.envelope || mail.message.getEnvelope();\n    let messageId = mail.message.messageId();\n    let recipients = [].concat(envelope.to || []);\n\n    if (recipients.length > 3) {\n      recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n\n    this.logger.info({\n      tnx: 'send',\n      messageId\n    }, 'Sending message %s to <%s>', messageId, recipients.join(', '));\n\n    let getRawMessage = next => {\n      // do not use Message-ID and Date in DKIM signature\n      if (!mail.data._dkim) {\n        mail.data._dkim = {};\n      }\n\n      if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n        mail.data._dkim.skipFields += ':date:message-id';\n      } else {\n        mail.data._dkim.skipFields = 'date:message-id';\n      }\n\n      let sourceStream = mail.message.createReadStream();\n      let stream = sourceStream.pipe(new LeWindows());\n      let chunks = [];\n      let chunklen = 0;\n      stream.on('readable', () => {\n        let chunk;\n\n        while ((chunk = stream.read()) !== null) {\n          chunks.push(chunk);\n          chunklen += chunk.length;\n        }\n      });\n      sourceStream.once('error', err => stream.emit('error', err));\n      stream.once('error', err => {\n        next(err);\n      });\n      stream.once('end', () => next(null, Buffer.concat(chunks, chunklen)));\n    };\n\n    setImmediate(() => getRawMessage((err, raw) => {\n      if (err) {\n        this.logger.error({\n          err,\n          tnx: 'send',\n          messageId\n        }, 'Failed creating message for %s. %s', messageId, err.message);\n        statObject.pending = false;\n        return callback(err);\n      }\n\n      let sesMessage = {\n        RawMessage: {\n          // required\n          Data: raw // required\n\n        },\n        Source: envelope.from,\n        Destinations: envelope.to\n      };\n      Object.keys(mail.data.ses || {}).forEach(key => {\n        sesMessage[key] = mail.data.ses[key];\n      });\n      let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n      let aws = this.ses.aws || {};\n\n      let getRegion = cb => {\n        if (ses.config && typeof ses.config.region === 'function') {\n          // promise\n          return ses.config.region().then(region => cb(null, region)).catch(err => cb(err));\n        }\n\n        return cb(null, ses.config && ses.config.region || 'us-east-1');\n      };\n\n      getRegion((err, region) => {\n        if (err || !region) {\n          region = 'us-east-1';\n        }\n\n        let sendPromise;\n\n        if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n          // v3 API\n          sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));\n        } else {\n          // v2 API\n          sendPromise = ses.sendRawEmail(sesMessage).promise();\n        }\n\n        sendPromise.then(data => {\n          if (region === 'us-east-1') {\n            region = 'email';\n          }\n\n          statObject.pending = false;\n          callback(null, {\n            envelope: {\n              from: envelope.from,\n              to: envelope.to\n            },\n            messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n            response: data.MessageId,\n            raw\n          });\n        }).catch(err => {\n          this.logger.error({\n            err,\n            tnx: 'send'\n          }, 'Send error for %s: %s', messageId, err.message);\n          statObject.pending = false;\n          callback(err);\n        });\n      });\n    }));\n  }\n  /**\n   * Verifies SES configuration\n   *\n   * @param {Function} callback Callback function\n   */\n\n\n  verify(callback) {\n    let promise;\n    let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n    let aws = this.ses.aws || {};\n    const sesMessage = {\n      RawMessage: {\n        // required\n        Data: 'From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid'\n      },\n      Source: 'invalid@invalid',\n      Destinations: ['invalid@invalid']\n    };\n\n    if (!callback) {\n      promise = new Promise((resolve, reject) => {\n        callback = shared.callbackPromise(resolve, reject);\n      });\n    }\n\n    const cb = err => {\n      if (err && (err.code || err.Code) !== 'InvalidParameterValue') {\n        return callback(err);\n      }\n\n      return callback(null, true);\n    };\n\n    if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n      // v3 API\n      sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);\n      ses.send(new aws.SendRawEmailCommand(sesMessage), cb);\n    } else {\n      // v2 API\n      ses.sendRawEmail(sesMessage, cb);\n    }\n\n    return promise;\n  }\n\n}\n\nmodule.exports = SESTransport;","map":{"version":3,"names":["EventEmitter","require","packageData","shared","LeWindows","SESTransport","constructor","options","ses","SES","name","version","logger","getLogger","component","maxConnections","Number","Infinity","connections","sendingRate","sendingRateTTL","rateInterval","rateMessages","pending","idling","setImmediate","emit","send","mail","callback","push","_checkSendingRate","_send","args","_sent","_checkRatedQueue","length","next","shift","clearTimeout","now","Date","oldest","i","ts","splice","delay","Math","max","setTimeout","unref","E","isIdle","statObject","envelope","data","message","getEnvelope","messageId","recipients","concat","to","info","tnx","join","getRawMessage","_dkim","skipFields","sourceStream","createReadStream","stream","pipe","chunks","chunklen","on","chunk","read","once","err","Buffer","raw","error","sesMessage","RawMessage","Data","Source","from","Destinations","Object","keys","forEach","key","aws","getRegion","cb","config","region","then","catch","sendPromise","SendRawEmailCommand","sendRawEmail","promise","MessageId","test","response","verify","Promise","resolve","reject","callbackPromise","code","Code","module","exports"],"sources":["D:/ReactJS/DoAn_CN/my-app/node_modules/nodemailer/lib/ses-transport/index.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\nconst LeWindows = require('../mime-node/le-windows');\n\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass SESTransport extends EventEmitter {\n    constructor(options) {\n        super();\n        options = options || {};\n\n        this.options = options || {};\n        this.ses = this.options.SES;\n\n        this.name = 'SESTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'ses-transport'\n        });\n\n        // parallel sending connections\n        this.maxConnections = Number(this.options.maxConnections) || Infinity;\n        this.connections = 0;\n\n        // max messages per second\n        this.sendingRate = Number(this.options.sendingRate) || Infinity;\n        this.sendingRateTTL = null;\n        this.rateInterval = 1000; // milliseconds\n        this.rateMessages = [];\n\n        this.pending = [];\n\n        this.idling = true;\n\n        setImmediate(() => {\n            if (this.idling) {\n                this.emit('idle');\n            }\n        });\n    }\n\n    /**\n     * Schedules a sending of a message\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, callback) {\n        if (this.connections >= this.maxConnections) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n\n        if (!this._checkSendingRate()) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n\n        this._send(mail, (...args) => {\n            setImmediate(() => callback(...args));\n            this._sent();\n        });\n    }\n\n    _checkRatedQueue() {\n        if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n            return;\n        }\n\n        if (!this.pending.length) {\n            if (!this.idling) {\n                this.idling = true;\n                this.emit('idle');\n            }\n            return;\n        }\n\n        let next = this.pending.shift();\n        this._send(next.mail, (...args) => {\n            setImmediate(() => next.callback(...args));\n            this._sent();\n        });\n    }\n\n    _checkSendingRate() {\n        clearTimeout(this.sendingRateTTL);\n\n        let now = Date.now();\n        let oldest = false;\n        // delete older messages\n        for (let i = this.rateMessages.length - 1; i >= 0; i--) {\n            if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n                oldest = this.rateMessages[i].ts;\n            }\n\n            if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n                this.rateMessages.splice(i, 1);\n            }\n        }\n\n        if (this.rateMessages.length < this.sendingRate) {\n            return true;\n        }\n\n        let delay = Math.max(oldest + 1001, now + 20);\n        this.sendingRateTTL = setTimeout(() => this._checkRatedQueue(), now - delay);\n\n        try {\n            this.sendingRateTTL.unref();\n        } catch (E) {\n            // Ignore. Happens on envs with non-node timer implementation\n        }\n\n        return false;\n    }\n\n    _sent() {\n        this.connections--;\n        this._checkRatedQueue();\n    }\n\n    /**\n     * Returns true if there are free slots in the queue\n     */\n    isIdle() {\n        return this.idling;\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    _send(mail, callback) {\n        let statObject = {\n            ts: Date.now(),\n            pending: true\n        };\n        this.connections++;\n        this.rateMessages.push(statObject);\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Sending message %s to <%s>',\n            messageId,\n            recipients.join(', ')\n        );\n\n        let getRawMessage = next => {\n            // do not use Message-ID and Date in DKIM signature\n            if (!mail.data._dkim) {\n                mail.data._dkim = {};\n            }\n            if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n                mail.data._dkim.skipFields += ':date:message-id';\n            } else {\n                mail.data._dkim.skipFields = 'date:message-id';\n            }\n\n            let sourceStream = mail.message.createReadStream();\n            let stream = sourceStream.pipe(new LeWindows());\n            let chunks = [];\n            let chunklen = 0;\n\n            stream.on('readable', () => {\n                let chunk;\n                while ((chunk = stream.read()) !== null) {\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n\n            sourceStream.once('error', err => stream.emit('error', err));\n\n            stream.once('error', err => {\n                next(err);\n            });\n\n            stream.once('end', () => next(null, Buffer.concat(chunks, chunklen)));\n        };\n\n        setImmediate(() =>\n            getRawMessage((err, raw) => {\n                if (err) {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed creating message for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                    statObject.pending = false;\n                    return callback(err);\n                }\n\n                let sesMessage = {\n                    RawMessage: {\n                        // required\n                        Data: raw // required\n                    },\n                    Source: envelope.from,\n                    Destinations: envelope.to\n                };\n\n                Object.keys(mail.data.ses || {}).forEach(key => {\n                    sesMessage[key] = mail.data.ses[key];\n                });\n\n                let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n                let aws = this.ses.aws || {};\n\n                let getRegion = cb => {\n                    if (ses.config && typeof ses.config.region === 'function') {\n                        // promise\n                        return ses.config\n                            .region()\n                            .then(region => cb(null, region))\n                            .catch(err => cb(err));\n                    }\n                    return cb(null, (ses.config && ses.config.region) || 'us-east-1');\n                };\n\n                getRegion((err, region) => {\n                    if (err || !region) {\n                        region = 'us-east-1';\n                    }\n\n                    let sendPromise;\n                    if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n                        // v3 API\n                        sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));\n                    } else {\n                        // v2 API\n                        sendPromise = ses.sendRawEmail(sesMessage).promise();\n                    }\n\n                    sendPromise\n                        .then(data => {\n                            if (region === 'us-east-1') {\n                                region = 'email';\n                            }\n\n                            statObject.pending = false;\n                            callback(null, {\n                                envelope: {\n                                    from: envelope.from,\n                                    to: envelope.to\n                                },\n                                messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n                                response: data.MessageId,\n                                raw\n                            });\n                        })\n                        .catch(err => {\n                            this.logger.error(\n                                {\n                                    err,\n                                    tnx: 'send'\n                                },\n                                'Send error for %s: %s',\n                                messageId,\n                                err.message\n                            );\n                            statObject.pending = false;\n                            callback(err);\n                        });\n                });\n            })\n        );\n    }\n\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */\n    verify(callback) {\n        let promise;\n        let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n        let aws = this.ses.aws || {};\n\n        const sesMessage = {\n            RawMessage: {\n                // required\n                Data: 'From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid'\n            },\n            Source: 'invalid@invalid',\n            Destinations: ['invalid@invalid']\n        };\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        const cb = err => {\n            if (err && (err.code || err.Code) !== 'InvalidParameterValue') {\n                return callback(err);\n            }\n            return callback(null, true);\n        };\n\n        if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n            // v3 API\n            sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);\n            ses.send(new aws.SendRawEmailCommand(sesMessage), cb);\n        } else {\n            // v2 API\n            ses.sendRawEmail(sesMessage, cb);\n        }\n\n        return promise;\n    }\n}\n\nmodule.exports = SESTransport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}