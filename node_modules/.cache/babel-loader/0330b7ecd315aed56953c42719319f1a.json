{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactJS\\\\DoAn_CN\\\\my-app\\\\src\\\\components\\\\Layout\\\\LayoutDND.js\",\n    _s = $RefreshSig$();\n\nimport initData from \"./Data\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport Column from \"./Column\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LayoutDND = () => {\n  _s();\n\n  const [state, setstate] = useState(initData);\n\n  const onDragEnd = results => {\n    const {\n      destination,\n      draggableId,\n      source\n    } = results;\n\n    if (!destination) {\n      console.log(\"out\");\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = state.colums[source.droppableId];\n    const finish = state.colums[destination.droppableId];\n\n    if (start === finish) {\n      const newTaskID = Array.from(start.taskIds);\n      newTaskID.splice(source.index, 1);\n      newTaskID.splice(destination.index, 0, draggableId);\n      const newcolumn = { ...start,\n        taskIds: newTaskID\n      };\n      const newstate = { ...state,\n        colums: { ...state.colums,\n          [newcolumn.id]: newcolumn\n        }\n      };\n      console.log(\"Result start == finish\", results);\n      setstate(newstate);\n      return;\n    }\n\n    const starttaskID = Array.from(start.taskIds);\n    starttaskID.splice(source.index, 1);\n    const newstart = { ...start,\n      taskIds: starttaskID\n    };\n    const finishtaskID = Array.from(finish.taskIds);\n    finishtaskID.splice(destination.index, 0, draggableId);\n    const newfinish = { ...finish,\n      taskIds: finishtaskID\n    };\n    const newstate = { ...state,\n      colums: { ...state.colums,\n        [newstart.id]: newstart,\n        [newfinish.id]: newfinish\n      }\n    };\n    console.log(\"Result\", results);\n    setstate(newstate);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: state.columOrder.map(columID => {\n        const colum = state.colums[columID];\n        const tasks = colum.taskIds.map(taskIds => state.tasks[taskIds]);\n        console.log(colum);\n        return /*#__PURE__*/_jsxDEV(Column, {\n          column: colum,\n          tasks: tasks\n        }, colum.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(LayoutDND, \"SSb1bDK8tUM0uUtv27BzW0fetL4=\");\n\n_c = LayoutDND;\nexport default LayoutDND;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutDND\");","map":{"version":3,"names":["initData","DragDropContext","Column","useState","LayoutDND","state","setstate","onDragEnd","results","destination","draggableId","source","console","log","droppableId","index","start","colums","finish","newTaskID","Array","from","taskIds","splice","newcolumn","newstate","id","starttaskID","newstart","finishtaskID","newfinish","columOrder","map","columID","colum","tasks"],"sources":["D:/ReactJS/DoAn_CN/my-app/src/components/Layout/LayoutDND.js"],"sourcesContent":["import initData from \"./Data\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport Column from \"./Column\";\r\nimport { useState } from \"react\";\r\nconst LayoutDND = () => {\r\n  const [state, setstate] = useState(initData);\r\n\r\n  const onDragEnd = (results) => {\r\n    const { destination, draggableId, source } = results;\r\n    if (!destination) {\r\n      console.log(\"out\");\r\n      return;\r\n    }\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n    const start = state.colums[source.droppableId];\r\n    const finish = state.colums[destination.droppableId];\r\n    if (start === finish) {\r\n      const newTaskID = Array.from(start.taskIds);\r\n\r\n      newTaskID.splice(source.index, 1);\r\n      newTaskID.splice(destination.index, 0, draggableId);\r\n\r\n      const newcolumn = {\r\n        ...start,\r\n        taskIds: newTaskID,\r\n      };\r\n      const newstate = {\r\n        ...state,\r\n        colums: {\r\n          ...state.colums,\r\n          [newcolumn.id]: newcolumn,\r\n        },\r\n      };\r\n      console.log(\"Result start == finish\", results);\r\n      setstate(newstate);\r\n      return;\r\n    }\r\n\r\n    const starttaskID = Array.from(start.taskIds);\r\n    starttaskID.splice(source.index, 1);\r\n    const newstart = {\r\n      ...start,\r\n      taskIds: starttaskID,\r\n    };\r\n\r\n    const finishtaskID = Array.from(finish.taskIds);\r\n    finishtaskID.splice(destination.index, 0, draggableId);\r\n    const newfinish = {\r\n      ...finish,\r\n      taskIds: finishtaskID,\r\n    };\r\n\r\n    const newstate = {\r\n      ...state,\r\n      colums: {\r\n        ...state.colums,\r\n        [newstart.id]: newstart,\r\n        [newfinish.id]: newfinish,\r\n      },\r\n    };\r\n    console.log(\"Result\", results);\r\n    setstate(newstate);\r\n  };\r\n  return (\r\n    <>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        {state.columOrder.map((columID) => {\r\n          const colum = state.colums[columID];\r\n          const tasks = colum.taskIds.map((taskIds) => state.tasks[taskIds]);\r\n          console.log(colum);\r\n          return <Column key={colum.id} column={colum} tasks={tasks}></Column>;\r\n        })}\r\n      </DragDropContext>\r\n    </>\r\n  );\r\n};\r\nexport default LayoutDND;\r\n"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,QAArB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;;AACA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACtB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAACH,QAAD,CAAlC;;EAEA,MAAMO,SAAS,GAAIC,OAAD,IAAa;IAC7B,MAAM;MAAEC,WAAF;MAAeC,WAAf;MAA4BC;IAA5B,IAAuCH,OAA7C;;IACA,IAAI,CAACC,WAAL,EAAkB;MAChBG,OAAO,CAACC,GAAR,CAAY,KAAZ;MACA;IACD;;IACD,IACEJ,WAAW,CAACK,WAAZ,KAA4BH,MAAM,CAACG,WAAnC,IACAL,WAAW,CAACM,KAAZ,KAAsBJ,MAAM,CAACI,KAF/B,EAGE;MACA;IACD;;IACD,MAAMC,KAAK,GAAGX,KAAK,CAACY,MAAN,CAAaN,MAAM,CAACG,WAApB,CAAd;IACA,MAAMI,MAAM,GAAGb,KAAK,CAACY,MAAN,CAAaR,WAAW,CAACK,WAAzB,CAAf;;IACA,IAAIE,KAAK,KAAKE,MAAd,EAAsB;MACpB,MAAMC,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAWL,KAAK,CAACM,OAAjB,CAAlB;MAEAH,SAAS,CAACI,MAAV,CAAiBZ,MAAM,CAACI,KAAxB,EAA+B,CAA/B;MACAI,SAAS,CAACI,MAAV,CAAiBd,WAAW,CAACM,KAA7B,EAAoC,CAApC,EAAuCL,WAAvC;MAEA,MAAMc,SAAS,GAAG,EAChB,GAAGR,KADa;QAEhBM,OAAO,EAAEH;MAFO,CAAlB;MAIA,MAAMM,QAAQ,GAAG,EACf,GAAGpB,KADY;QAEfY,MAAM,EAAE,EACN,GAAGZ,KAAK,CAACY,MADH;UAEN,CAACO,SAAS,CAACE,EAAX,GAAgBF;QAFV;MAFO,CAAjB;MAOAZ,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCL,OAAtC;MACAF,QAAQ,CAACmB,QAAD,CAAR;MACA;IACD;;IAED,MAAME,WAAW,GAAGP,KAAK,CAACC,IAAN,CAAWL,KAAK,CAACM,OAAjB,CAApB;IACAK,WAAW,CAACJ,MAAZ,CAAmBZ,MAAM,CAACI,KAA1B,EAAiC,CAAjC;IACA,MAAMa,QAAQ,GAAG,EACf,GAAGZ,KADY;MAEfM,OAAO,EAAEK;IAFM,CAAjB;IAKA,MAAME,YAAY,GAAGT,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,OAAlB,CAArB;IACAO,YAAY,CAACN,MAAb,CAAoBd,WAAW,CAACM,KAAhC,EAAuC,CAAvC,EAA0CL,WAA1C;IACA,MAAMoB,SAAS,GAAG,EAChB,GAAGZ,MADa;MAEhBI,OAAO,EAAEO;IAFO,CAAlB;IAKA,MAAMJ,QAAQ,GAAG,EACf,GAAGpB,KADY;MAEfY,MAAM,EAAE,EACN,GAAGZ,KAAK,CAACY,MADH;QAEN,CAACW,QAAQ,CAACF,EAAV,GAAeE,QAFT;QAGN,CAACE,SAAS,CAACJ,EAAX,GAAgBI;MAHV;IAFO,CAAjB;IAQAlB,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,OAAtB;IACAF,QAAQ,CAACmB,QAAD,CAAR;EACD,CA5DD;;EA6DA,oBACE;IAAA,uBACE,QAAC,eAAD;MAAiB,SAAS,EAAElB,SAA5B;MAAA,UACGF,KAAK,CAAC0B,UAAN,CAAiBC,GAAjB,CAAsBC,OAAD,IAAa;QACjC,MAAMC,KAAK,GAAG7B,KAAK,CAACY,MAAN,CAAagB,OAAb,CAAd;QACA,MAAME,KAAK,GAAGD,KAAK,CAACZ,OAAN,CAAcU,GAAd,CAAmBV,OAAD,IAAajB,KAAK,CAAC8B,KAAN,CAAYb,OAAZ,CAA/B,CAAd;QACAV,OAAO,CAACC,GAAR,CAAYqB,KAAZ;QACA,oBAAO,QAAC,MAAD;UAAuB,MAAM,EAAEA,KAA/B;UAAsC,KAAK,EAAEC;QAA7C,GAAaD,KAAK,CAACR,EAAnB;UAAA;UAAA;UAAA;QAAA,QAAP;MACD,CALA;IADH;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAYD,CA5ED;;GAAMtB,S;;KAAAA,S;AA6EN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}