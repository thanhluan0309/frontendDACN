{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactJS\\\\DoAn_CN\\\\my-app\\\\src\\\\components\\\\LayoutConnectDB\\\\Layout.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Button from \"react-bootstrap/esm/Button\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { getOneColums } from \"../Dashboard/postBehavior\";\nimport { getPosts, initColumns, updateColumns, getAllColumns, DeletedColumns_ByID } from \"../Dashboard/postBehavior\";\nimport Column from \"./Column\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LayoutDNDConnectDB = () => {\n  _s();\n\n  const [state, setstate] = useState([]);\n  const [columns, setColumns] = useState([]);\n\n  const getallPost = async () => {\n    try {\n      const GetallPostzx = await getPosts(localStorage.getItem(\"token\"));\n\n      if (GetallPostzx.success) {\n        setstate(GetallPostzx.Post_of_User);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  let title = {\n    title: \"Process\"\n  };\n\n  const updatecolumnsinit = async () => {\n    let UpdateInit = {\n      _id: localStorage.getItem(\"IDinitColumns\"),\n      taskIds: []\n    };\n\n    for (let index = 0; index < state.length; index++) {\n      UpdateInit.taskIds.push(state[index]._id);\n    }\n\n    await updateColumns(UpdateInit);\n  };\n\n  const GetallCol = async () => {\n    const gAllCol = await (await getAllColumns()).data.getALlCol;\n    setColumns(gAllCol);\n  };\n\n  const getInitColumns = async () => {\n    console.log(\"Id init \", localStorage.getItem(\"IDinitColumns\"));\n\n    if (localStorage.getItem(\"IDinitColumns\") !== null) {\n      DeltedById(localStorage.getItem(\"IDinitColumns\"));\n      const getInit = await initColumns(title);\n      localStorage.setItem(\"IDinitColumns\", getInit.data.newcolumns._id);\n      updatecolumnsinit();\n      GetallCol();\n    } else {\n      const getInit = await initColumns(title);\n      localStorage.setItem(\"IDinitColumns\", getInit.data.newcolumns._id);\n      updatecolumnsinit();\n      GetallCol();\n    }\n  };\n\n  const DeltedById = async id => {\n    console.log(\"id delted\", id);\n    const ShowDelted = await DeletedColumns_ByID(id);\n  };\n\n  useEffect(() => {\n    GetallCol();\n    getallPost();\n  });\n\n  const getOneColumsByid = async id => {\n    const getColumns = await getOneColums(id);\n    console.log(\"getColumns\", getColumns.OneColumns);\n  };\n\n  const onDragEnd = results => {\n    const {\n      destination,\n      draggableId,\n      source\n    } = results;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    } // console.log(\"source\", source);\n    // console.log(\"destination\", destination);\n\n\n    const start = getOneColumsByid(source.droppableId);\n    const finish = getOneColumsByid(destination.droppableId);\n    console.log(\"Start\", start, columns, source.droppableId);\n    console.log(\"finish\", finish, columns, destination.droppableId);\n\n    if (start === finish) {\n      const newTaskID = Array.from(start.taskIds);\n      newTaskID.splice(source.index, 1);\n      newTaskID.splice(destination.index, 0, draggableId);\n      const newcolumn = { ...start,\n        taskIds: newTaskID\n      };\n      const newstate = { ...state,\n        colums: { ...state.colums,\n          [newcolumn.id]: newcolumn\n        }\n      }; // console.log(\"Result start == finish\", results);\n\n      setstate(newstate); // console.log(\"rs\", results);\n\n      return;\n    }\n\n    const starttaskID = Array.from(start.taskIds);\n    starttaskID.splice(source.index, 1);\n    const newstart = { ...start,\n      taskIds: starttaskID\n    };\n    const finishtaskID = Array.from(finish.taskIds);\n    finishtaskID.splice(destination.index, 0, draggableId);\n    const newfinish = { ...finish,\n      taskIds: finishtaskID\n    };\n    const newstate = { ...state,\n      colums: { ...state.colums,\n        [newstart.id]: newstart,\n        [newfinish.id]: newfinish\n      }\n    };\n    console.log(\"Result\", results);\n    setstate(newstate);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: getInitColumns,\n      children: \"init map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        children: columns && columns.map((columID, index) => {\n          const colum = columns[index];\n          const task = colum.taskIds.map((taskIds, index) => colum.taskIds[index]);\n\n          if (task[0] === undefined) {\n            const lay = [];\n            return /*#__PURE__*/_jsxDEV(Column, {\n              column: colum,\n              tasks: lay\n            }, colum.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 19\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(Column, {\n              column: colum,\n              tasks: task[0]\n            }, colum.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LayoutDNDConnectDB, \"f5oG0AfUiE1pekuqX+okZ0UTnEU=\");\n\n_c = LayoutDNDConnectDB;\nexport default LayoutDNDConnectDB;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutDNDConnectDB\");","map":{"version":3,"names":["useState","useEffect","Button","DragDropContext","getOneColums","getPosts","initColumns","updateColumns","getAllColumns","DeletedColumns_ByID","Column","LayoutDNDConnectDB","state","setstate","columns","setColumns","getallPost","GetallPostzx","localStorage","getItem","success","Post_of_User","error","console","log","title","updatecolumnsinit","UpdateInit","_id","taskIds","index","length","push","GetallCol","gAllCol","data","getALlCol","getInitColumns","DeltedById","getInit","setItem","newcolumns","id","ShowDelted","getOneColumsByid","getColumns","OneColumns","onDragEnd","results","destination","draggableId","source","droppableId","start","finish","newTaskID","Array","from","splice","newcolumn","newstate","colums","starttaskID","newstart","finishtaskID","newfinish","display","map","columID","colum","task","undefined","lay"],"sources":["D:/ReactJS/DoAn_CN/my-app/src/components/LayoutConnectDB/Layout.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { getOneColums } from \"../Dashboard/postBehavior\";\r\nimport {\r\n  getPosts,\r\n  initColumns,\r\n  updateColumns,\r\n  getAllColumns,\r\n  DeletedColumns_ByID,\r\n} from \"../Dashboard/postBehavior\";\r\nimport Column from \"./Column\";\r\nconst LayoutDNDConnectDB = () => {\r\n  const [state, setstate] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const getallPost = async () => {\r\n    try {\r\n      const GetallPostzx = await getPosts(localStorage.getItem(\"token\"));\r\n      if (GetallPostzx.success) {\r\n        setstate(GetallPostzx.Post_of_User);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  let title = {\r\n    title: \"Process\",\r\n  };\r\n  const updatecolumnsinit = async () => {\r\n    let UpdateInit = {\r\n      _id: localStorage.getItem(\"IDinitColumns\"),\r\n      taskIds: [],\r\n    };\r\n    for (let index = 0; index < state.length; index++) {\r\n      UpdateInit.taskIds.push(state[index]._id);\r\n    }\r\n    await updateColumns(UpdateInit);\r\n  };\r\n\r\n  const GetallCol = async () => {\r\n    const gAllCol = await (await getAllColumns()).data.getALlCol;\r\n    setColumns(gAllCol);\r\n  };\r\n\r\n  const getInitColumns = async () => {\r\n    console.log(\"Id init \", localStorage.getItem(\"IDinitColumns\"));\r\n    if (localStorage.getItem(\"IDinitColumns\") !== null) {\r\n      DeltedById(localStorage.getItem(\"IDinitColumns\"));\r\n      const getInit = await initColumns(title);\r\n      localStorage.setItem(\"IDinitColumns\", getInit.data.newcolumns._id);\r\n      updatecolumnsinit();\r\n      GetallCol();\r\n    } else {\r\n      const getInit = await initColumns(title);\r\n      localStorage.setItem(\"IDinitColumns\", getInit.data.newcolumns._id);\r\n      updatecolumnsinit();\r\n      GetallCol();\r\n    }\r\n  };\r\n  const DeltedById = async (id) => {\r\n    console.log(\"id delted\", id);\r\n    const ShowDelted = await DeletedColumns_ByID(id);\r\n  };\r\n  useEffect(() => {\r\n    GetallCol();\r\n    getallPost();\r\n  });\r\n  const getOneColumsByid = async (id) => {\r\n    const getColumns = await getOneColums(id);\r\n    console.log(\"getColumns\", getColumns.OneColumns);\r\n  };\r\n\r\n  const onDragEnd = (results) => {\r\n    const { destination, draggableId, source } = results;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n    // console.log(\"source\", source);\r\n    // console.log(\"destination\", destination);\r\n\r\n    const start = getOneColumsByid(source.droppableId);\r\n    const finish = getOneColumsByid(destination.droppableId);\r\n\r\n    console.log(\"Start\", start, columns, source.droppableId);\r\n    console.log(\"finish\", finish, columns, destination.droppableId);\r\n\r\n    if (start === finish) {\r\n      const newTaskID = Array.from(start.taskIds);\r\n\r\n      newTaskID.splice(source.index, 1);\r\n      newTaskID.splice(destination.index, 0, draggableId);\r\n\r\n      const newcolumn = {\r\n        ...start,\r\n        taskIds: newTaskID,\r\n      };\r\n      const newstate = {\r\n        ...state,\r\n        colums: {\r\n          ...state.colums,\r\n          [newcolumn.id]: newcolumn,\r\n        },\r\n      };\r\n      // console.log(\"Result start == finish\", results);\r\n      setstate(newstate);\r\n      // console.log(\"rs\", results);\r\n      return;\r\n    }\r\n\r\n    const starttaskID = Array.from(start.taskIds);\r\n    starttaskID.splice(source.index, 1);\r\n    const newstart = {\r\n      ...start,\r\n      taskIds: starttaskID,\r\n    };\r\n\r\n    const finishtaskID = Array.from(finish.taskIds);\r\n    finishtaskID.splice(destination.index, 0, draggableId);\r\n    const newfinish = {\r\n      ...finish,\r\n      taskIds: finishtaskID,\r\n    };\r\n\r\n    const newstate = {\r\n      ...state,\r\n      colums: {\r\n        ...state.colums,\r\n        [newstart.id]: newstart,\r\n        [newfinish.id]: newfinish,\r\n      },\r\n    };\r\n    console.log(\"Result\", results);\r\n    setstate(newstate);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={getInitColumns}>init map</Button>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <div style={{ display: \"flex\" }}>\r\n          {columns &&\r\n            columns.map((columID, index) => {\r\n              const colum = columns[index];\r\n              const task = colum.taskIds.map(\r\n                (taskIds, index) => colum.taskIds[index]\r\n              );\r\n              if (task[0] === undefined) {\r\n                const lay = [];\r\n                return (\r\n                  <Column key={colum.id} column={colum} tasks={lay}></Column>\r\n                );\r\n              } else {\r\n                return (\r\n                  <Column\r\n                    key={colum.id}\r\n                    column={colum}\r\n                    tasks={task[0]}\r\n                  ></Column>\r\n                );\r\n              }\r\n            })}\r\n        </div>\r\n      </DragDropContext>\r\n    </>\r\n  );\r\n};\r\nexport default LayoutDNDConnectDB;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}