{"ast":null,"code":"import axios from \"axios\";\nexport const getPosts = async (req, res) => {\n  const response = await axios.get(\"http://localhost:8080/Post/getAllpost\", {\n    headers: {\n      Authorization: `Bearer ${req}`\n    }\n  });\n\n  if (response.data.success) {}\n\n  return response.data;\n}; //http://localhost:8080/Post/GetPostsOfUserByMapid/63671af9e94509aaf1e6cb4e\n\nexport const getPostsByMapId = async (req, res) => {\n  const response = await axios.get(\"http://localhost:8080/Post/getAllpost\", {\n    headers: {\n      Authorization: `Bearer ${req}`\n    }\n  });\n\n  if (response.data.success) {}\n\n  return response.data;\n};\nexport const createnewPost = async (req, res) => {\n  const response = await axios.post(\"http://localhost:8080/Post/\", req, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return response;\n};\nexport const DeletedPost = async (req, res) => {\n  const response = await axios.delete(`http://localhost:8080/Post/${req}`, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return response.data;\n};\n_c = DeletedPost;\nexport const getOnePost = async (req, res) => {\n  const response = await axios.post(`http://localhost:8080/Post/getOnePost/${req}`, {\n    params: {\n      _id: `${req}`\n    }\n  }, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return response.data;\n}; //http://localhost:8080/Post/GetPostsOfUserByMapid/63671af9e94509aaf1e6cb4e\n// http://localhost:8080/Post/63079e6c14c1c2760d865ed3\n\nexport const EditPost = async (req, res) => {\n  const response = await axios.put(`http://localhost:8080/Post/${req._id}`, req, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return response;\n}; //init columns\n\n_c2 = EditPost;\nexport const initColumns = async (req, res) => {\n  const response = await axios.post(`http://localhost:8080/columns`, req, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return response;\n}; //update columns\n\nexport const updateColumns = async (req, res) => {\n  const response = await axios.put(`http://localhost:8080/columns/${req._id}`, req, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return response;\n}; //getAll Columns\n\nexport const getAllColumns = async (req, res) => {\n  const response = await axios.get(`http://localhost:8080/columns`, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return response;\n}; //Deleted Columns\n\nexport const DeletedColumns_ByID = async (req, res) => {\n  const response = await axios.delete(`http://localhost:8080/columns/${req}`, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return response;\n}; //get one column by id body\n\n_c3 = DeletedColumns_ByID;\nexport const getOneColumsByidBody = async (req, res) => {\n  const response = await axios.post(\"http://localhost:8080/columns/getIdinit\", req, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return response.data;\n}; //init columnOrder\n\nexport const initColumnOrder = async (req, res) => {\n  const response = await axios.post(`http://localhost:8080/columnorder`, req, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return response;\n};\nexport const getAllColumnOrder = async (req, res) => {\n  const response = await axios.get(`http://localhost:8080/columnorder`, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return response;\n}; //Update ColumnOrder http://localhost:8080/columnorder/\n\nexport const updateColumnOrder = async (req, res) => {\n  const response = await axios.put(`http://localhost:8080/columnorder/${req._id}`, req, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return response;\n};\nexport const getOneColums = async (req, res) => {\n  const response = await axios.post(`http://localhost:8080/columns/${req}`, {\n    params: {\n      _id: `${req}`\n    }\n  }, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return response.data;\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DeletedPost\");\n$RefreshReg$(_c2, \"EditPost\");\n$RefreshReg$(_c3, \"DeletedColumns_ByID\");","map":{"version":3,"names":["axios","getPosts","req","res","response","get","headers","Authorization","data","success","getPostsByMapId","createnewPost","post","localStorage","getItem","DeletedPost","delete","getOnePost","params","_id","EditPost","put","initColumns","updateColumns","getAllColumns","DeletedColumns_ByID","getOneColumsByidBody","initColumnOrder","getAllColumnOrder","updateColumnOrder","getOneColums"],"sources":["D:/DOANCN/DoAn_CN/my-app/src/components/Dashboard/postBehavior.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const getPosts = async (req, res) => {\r\n  const response = await axios.get(\"http://localhost:8080/Post/getAllpost\", {\r\n    headers: { Authorization: `Bearer ${req}` },\r\n  });\r\n  if (response.data.success) {\r\n  }\r\n  return response.data;\r\n};\r\n//http://localhost:8080/Post/GetPostsOfUserByMapid/63671af9e94509aaf1e6cb4e\r\n\r\nexport const getPostsByMapId = async (req, res) => {\r\n  const response = await axios.get(\"http://localhost:8080/Post/getAllpost\", {\r\n    headers: { Authorization: `Bearer ${req}` },\r\n  });\r\n  if (response.data.success) {\r\n  }\r\n  return response.data;\r\n};\r\nexport const createnewPost = async (req, res) => {\r\n  const response = await axios.post(\"http://localhost:8080/Post/\", req, {\r\n    headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n  });\r\n\r\n  return response;\r\n};\r\n\r\nexport const DeletedPost = async (req, res) => {\r\n  const response = await axios.delete(`http://localhost:8080/Post/${req}`, {\r\n    headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const getOnePost = async (req, res) => {\r\n  const response = await axios.post(\r\n    `http://localhost:8080/Post/getOnePost/${req}`,\r\n    {\r\n      params: {\r\n        _id: `${req}`,\r\n      },\r\n    },\r\n    {\r\n      headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n//http://localhost:8080/Post/GetPostsOfUserByMapid/63671af9e94509aaf1e6cb4e\r\n// http://localhost:8080/Post/63079e6c14c1c2760d865ed3\r\nexport const EditPost = async (req, res) => {\r\n  const response = await axios.put(\r\n    `http://localhost:8080/Post/${req._id}`,\r\n    req,\r\n    {\r\n      headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n    }\r\n  );\r\n  return response;\r\n};\r\n\r\n//init columns\r\n\r\nexport const initColumns = async (req, res) => {\r\n  const response = await axios.post(`http://localhost:8080/columns`, req, {\r\n    headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n  });\r\n  return response;\r\n};\r\n\r\n//update columns\r\nexport const updateColumns = async (req, res) => {\r\n  const response = await axios.put(\r\n    `http://localhost:8080/columns/${req._id}`,\r\n    req,\r\n    {\r\n      headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n    }\r\n  );\r\n  return response;\r\n};\r\n//getAll Columns\r\nexport const getAllColumns = async (req, res) => {\r\n  const response = await axios.get(`http://localhost:8080/columns`, {\r\n    headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n  });\r\n  return response;\r\n};\r\n//Deleted Columns\r\nexport const DeletedColumns_ByID = async (req, res) => {\r\n  const response = await axios.delete(`http://localhost:8080/columns/${req}`, {\r\n    headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n  });\r\n  return response;\r\n};\r\n//get one column by id body\r\nexport const getOneColumsByidBody = async (req, res) => {\r\n  const response = await axios.post(\r\n    \"http://localhost:8080/columns/getIdinit\",\r\n    req,\r\n    {\r\n      headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n//init columnOrder\r\n\r\nexport const initColumnOrder = async (req, res) => {\r\n  const response = await axios.post(`http://localhost:8080/columnorder`, req, {\r\n    headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n  });\r\n  return response;\r\n};\r\n\r\nexport const getAllColumnOrder = async (req, res) => {\r\n  const response = await axios.get(`http://localhost:8080/columnorder`, {\r\n    headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n  });\r\n  return response;\r\n};\r\n//Update ColumnOrder http://localhost:8080/columnorder/\r\nexport const updateColumnOrder = async (req, res) => {\r\n  const response = await axios.put(\r\n    `http://localhost:8080/columnorder/${req._id}`,\r\n    req,\r\n    {\r\n      headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n    }\r\n  );\r\n  return response;\r\n};\r\n\r\nexport const getOneColums = async (req, res) => {\r\n  const response = await axios.post(\r\n    `http://localhost:8080/columns/${req}`,\r\n    {\r\n      params: {\r\n        _id: `${req}`,\r\n      },\r\n    },\r\n    {\r\n      headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}