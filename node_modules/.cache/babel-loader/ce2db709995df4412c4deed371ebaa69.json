{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nfunction decodeToken(token) {\n  try {\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    }\n\n    var payload = token.split(\".\")[1];\n    var padding = \"=\".repeat((4 - payload.length % 4) % 4);\n    var base64 = payload.replace(\"-\", \"+\").replace(\"_\", \"/\") + padding;\n    var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n    var decoded = JSON.parse(jsonPayload);\n    return decoded;\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction isTokenExpired(token) {\n  var decodedToken = decodeToken(token);\n  var result = true;\n\n  if (decodedToken && decodedToken.exp) {\n    var expirationDate = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp);\n    result = expirationDate.valueOf() < new Date().valueOf();\n  }\n\n  return result;\n}\n\nfunction useJwt(userJwt) {\n  var _useState = useState(false),\n      isExpired = _useState[0],\n      setIsExpired = _useState[1];\n\n  var _useState2 = useState(null),\n      decodedToken = _useState2[0],\n      setDecodedToken = _useState2[1];\n\n  useEffect(function () {\n    evaluateToken(userJwt);\n  }, [userJwt]);\n\n  var evaluateToken = function evaluateToken(token) {\n    setDecodedToken(decodeToken(token));\n    setIsExpired(isTokenExpired(token));\n  };\n\n  return {\n    isExpired: isExpired,\n    decodedToken: decodedToken,\n    reEvaluateToken: evaluateToken\n  };\n}\n\nexport { decodeToken, isTokenExpired as isExpired, useJwt };","map":{"version":3,"mappings":";;SAOgBA,YAAwBC;EACtC,IAAI;IAGF,IAAIA,KAAK,CAACC,KAAND,CAAY,GAAZA,EAAiBE,MAAjBF,KAA4B,CAA5BA,IAAiC,OAAOA,KAAP,KAAiB,QAAtD,EAAgE;MAC9D,OAAO,IAAP;;;IAKF,IAAMG,OAAO,GAAWH,KAAK,CAACC,KAAND,CAAY,GAAZA,EAAiB,CAAjBA,CAAxB;IAEA,IAAMI,OAAO,GAAW,IAAIC,MAAJ,CAAW,CAAC,IAAKF,OAAO,CAACD,MAARC,GAAiB,CAAvB,IAA6B,CAAxC,CAAxB;IAEA,IAAMG,MAAM,GACVH,OAAO,CAACI,OAARJ,CAAgB,GAAhBA,EAAqB,GAArBA,EAA0BI,OAA1BJ,CAAkC,GAAlCA,EAAuC,GAAvCA,IAA8CC,OADhD;IAGA,IAAMI,WAAW,GAAGC,kBAAkB,CACpCC,MAAM,CAACC,IAAPD,CAAYJ,MAAZI,EACKT,KADLS,CACW,EADXA,EAEKE,GAFLF,CAES,aAAC;MAAA,OAAI,MAAM,CAAC,OAAOG,CAAC,CAACC,UAAFD,CAAa,CAAbA,EAAgBE,QAAhBF,CAAyB,EAAzBA,CAAR,EAAsCG,KAAtC,CAA4C,CAAC,CAA7C,CAAV;IAFV,GAGKC,IAHLP,CAGU,EAHVA,CADoC,CAAtC;IAOA,IAAMQ,OAAO,GAAGC,IAAI,CAACC,KAALD,CAAWX,WAAXW,CAAhB;IAEA,OAAOD,OAAP;EAzBF,EA0BE,OAAOG,KAAP,EAAc;IAEd,OAAO,IAAP;;AAEH;;SAOeC,eAAetB;EAC7B,IAAMuB,YAAY,GAAQxB,WAAW,CAACC,KAAD,CAArC;EACA,IAAIwB,MAAM,GAAY,IAAtB;;EAEA,IAAID,YAAY,IAAIA,YAAY,CAACE,GAAjC,EAAsC;IACpC,IAAMC,cAAc,GAAS,IAAIC,IAAJ,CAAS,CAAT,CAA7B;IACAD,cAAc,CAACE,aAAfF,CAA6BH,YAAY,CAACE,GAA1CC;IAEAF,MAAM,GAAGE,cAAc,CAACG,OAAfH,KAA2B,IAAIC,IAAJ,GAAWE,OAAX,EAApCL;;;EAGF,OAAOA,MAAP;AACD;;SC/CeM,OAAUC;EACxB,gBAAkCC,QAAQ,CAAU,KAAV,CAA1C;EAAA,IAAOC,SAAP;EAAA,IAAkBC,YAAlB;;EACA,iBAAwCF,QAAQ,CAAW,IAAX,CAAhD;EAAA,IAAOT,YAAP;EAAA,IAAqBY,eAArB;;EAEAC,SAAS,CAAC;IACRC,aAAa,CAACN,OAAD,CAAbM;EADO,GAEN,CAACN,OAAD,CAFM,CAATK;;EAIA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACrC,KAAD;IACpBmC,eAAe,CAACpC,WAAW,CAAIC,KAAJ,CAAZ,CAAfmC;IACAD,YAAY,CAACZ,cAAc,CAACtB,KAAD,CAAf,CAAZkC;EAFF;;EAKA,OAAO;IAAED,SAAS,EAATA,SAAF;IAAaV,YAAY,EAAZA,YAAb;IAA2Be,eAAe,EAAED;EAA5C,CAAP;AACD","names":["decodeToken","token","split","length","payload","padding","repeat","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","decoded","JSON","parse","error","isTokenExpired","decodedToken","result","exp","expirationDate","Date","setUTCSeconds","valueOf","useJwt","userJwt","useState","isExpired","setIsExpired","setDecodedToken","useEffect","evaluateToken","reEvaluateToken"],"sources":["D:\\Deploy\\frontendDACN\\node_modules\\react-jwt\\src\\jwt\\index.ts","D:\\Deploy\\frontendDACN\\node_modules\\react-jwt\\src\\hooks\\index.tsx"],"sourcesContent":["/**\n * Try to decode a JWT. If the token is valid you'll get an object otherwise you'll get null\n * @param token - The JWT that you want to decode\n * @returns Decoded token\n */\nexport function decodeToken<T>(token: string): T | null;\nexport function decodeToken(token: string): Object | null;\nexport function decodeToken<T = Object>(token: string): T | null {\n  try {\n    // if the token has more or less than 3 parts or is not a string\n    // then is not a valid token\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    }\n\n    // payload ( index 1 ) has the data stored and\n    // data about the expiration time\n    const payload: string = token.split(\".\")[1];\n    // determine the padding characters required for the base64 string\n    const padding: string = \"=\".repeat((4 - (payload.length % 4)) % 4);\n    // convert the base64url string to a base64 string\n    const base64: string =\n      payload.replace(\"-\", \"+\").replace(\"_\", \"/\") + padding;\n    // parse base64 into json\n    const jsonPayload = decodeURIComponent(\n      window.atob(base64)\n          .split('')\n          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n    );\n    // decode json\n    const decoded = JSON.parse(jsonPayload);\n\n    return decoded;\n  } catch (error) {\n    // Return null if something goes wrong\n    return null;\n  }\n}\n\n/**\n * Verify if the token is expired or not\n * @param token - Your JWT\n * @returns boolean\n */\nexport function isTokenExpired(token: string): boolean {\n  const decodedToken: any = decodeToken(token);\n  let result: boolean = true;\n\n  if (decodedToken && decodedToken.exp) {\n    const expirationDate: Date = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp); // sets the expiration seconds\n    // compare the expiration time and the current time\n    result = expirationDate.valueOf() < new Date().valueOf();\n  }\n\n  return result;\n}\n","import { useState, useEffect } from \"react\";\nimport { decodeToken, isTokenExpired } from \"../jwt\";\n\n/**\n * This function will help you to decode a JWT and know if it's expired or not\n * @param userJwt - Your JWT\n * @returns An object containing the properties isExpired, decodedToken and reEvaluateToken\n */\nexport function useJwt<T>(userJwt: string): IUseJwt<T>;\nexport function useJwt(userJwt: string): IUseJwt;\nexport function useJwt<T>(userJwt: string): IUseJwt<T> {\n  const [isExpired, setIsExpired] = useState<boolean>(false);\n  const [decodedToken, setDecodedToken] = useState<T | null>(null);\n\n  useEffect(() => {\n    evaluateToken(userJwt);\n  }, [userJwt]);\n\n  const evaluateToken = (token: string) => {\n    setDecodedToken(decodeToken<T>(token));\n    setIsExpired(isTokenExpired(token));\n  };\n\n  return { isExpired, decodedToken, reEvaluateToken: evaluateToken };\n}\n\ninterface IUseJwt<T = Object> {\n  isExpired: boolean;\n  decodedToken: T | null;\n  reEvaluateToken: (token: string) => void;\n}\n\n"]},"metadata":{},"sourceType":"module"}