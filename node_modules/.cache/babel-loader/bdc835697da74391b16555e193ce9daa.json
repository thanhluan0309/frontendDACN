{"ast":null,"code":"'use strict';\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {Array} tokens Tokens object\n * @return {Object} Address object\n */\n\nfunction _handleAddress(tokens) {\n  let token;\n  let isGroup = false;\n  let state = 'text';\n  let address;\n  let addresses = [];\n  let data = {\n    address: [],\n    comment: [],\n    group: [],\n    text: []\n  };\n  let i;\n  let len; // Filter out <addresses>, (comments) and regular text\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    token = tokens[i];\n\n    if (token.type === 'operator') {\n      switch (token.value) {\n        case '<':\n          state = 'address';\n          break;\n\n        case '(':\n          state = 'comment';\n          break;\n\n        case ':':\n          state = 'group';\n          isGroup = true;\n          break;\n\n        default:\n          state = 'text';\n      }\n    } else if (token.value) {\n      if (state === 'address') {\n        // handle use case where unquoted name includes a \"<\"\n        // Apple Mail truncates everything between an unexpected < and an address\n        // and so will we\n        token.value = token.value.replace(/^[^<]*<\\s*/, '');\n      }\n\n      data[state].push(token.value);\n    }\n  } // If there is no text but a comment, replace the two\n\n\n  if (!data.text.length && data.comment.length) {\n    data.text = data.comment;\n    data.comment = [];\n  }\n\n  if (isGroup) {\n    // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n    data.text = data.text.join(' ');\n    addresses.push({\n      name: data.text || address && address.name,\n      group: data.group.length ? addressparser(data.group.join(',')) : []\n    });\n  } else {\n    // If no address was found, try to detect one from regular text\n    if (!data.address.length && data.text.length) {\n      for (i = data.text.length - 1; i >= 0; i--) {\n        if (data.text[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n          data.address = data.text.splice(i, 1);\n          break;\n        }\n      }\n\n      let _regexHandler = function (address) {\n        if (!data.address.length) {\n          data.address = [address.trim()];\n          return ' ';\n        } else {\n          return address;\n        }\n      }; // still no address\n\n\n      if (!data.address.length) {\n        for (i = data.text.length - 1; i >= 0; i--) {\n          // fixed the regex to parse email address correctly when email address has more than one @\n          data.text[i] = data.text[i].replace(/\\s*\\b[^@\\s]+@[^\\s]+\\b\\s*/, _regexHandler).trim();\n\n          if (data.address.length) {\n            break;\n          }\n        }\n      }\n    } // If there's still is no text but a comment exixts, replace the two\n\n\n    if (!data.text.length && data.comment.length) {\n      data.text = data.comment;\n      data.comment = [];\n    } // Keep only the first address occurence, push others to regular text\n\n\n    if (data.address.length > 1) {\n      data.text = data.text.concat(data.address.splice(1));\n    } // Join values with spaces\n\n\n    data.text = data.text.join(' ');\n    data.address = data.address.join(' ');\n\n    if (!data.address && isGroup) {\n      return [];\n    } else {\n      address = {\n        address: data.address || data.text || '',\n        name: data.text || data.address || ''\n      };\n\n      if (address.address === address.name) {\n        if ((address.address || '').match(/@/)) {\n          address.name = '';\n        } else {\n          address.address = '';\n        }\n      }\n\n      addresses.push(address);\n    }\n  }\n\n  return addresses;\n}\n/**\n * Creates a Tokenizer object for tokenizing address field strings\n *\n * @constructor\n * @param {String} str Address field string\n */\n\n\nclass Tokenizer {\n  constructor(str) {\n    this.str = (str || '').toString();\n    this.operatorCurrent = '';\n    this.operatorExpecting = '';\n    this.node = null;\n    this.escaped = false;\n    this.list = [];\n    /**\n     * Operator tokens and which tokens are expected to end the sequence\n     */\n\n    this.operators = {\n      '\"': '\"',\n      '(': ')',\n      '<': '>',\n      ',': '',\n      ':': ';',\n      // Semicolons are not a legal delimiter per the RFC2822 grammar other\n      // than for terminating a group, but they are also not valid for any\n      // other use in this context.  Given that some mail clients have\n      // historically allowed the semicolon as a delimiter equivalent to the\n      // comma in their UI, it makes sense to treat them the same as a comma\n      // when used outside of a group.\n      ';': ''\n    };\n  }\n  /**\n   * Tokenizes the original input string\n   *\n   * @return {Array} An array of operator|text tokens\n   */\n\n\n  tokenize() {\n    let chr,\n        list = [];\n\n    for (let i = 0, len = this.str.length; i < len; i++) {\n      chr = this.str.charAt(i);\n      this.checkChar(chr);\n    }\n\n    this.list.forEach(node => {\n      node.value = (node.value || '').toString().trim();\n\n      if (node.value) {\n        list.push(node);\n      }\n    });\n    return list;\n  }\n  /**\n   * Checks if a character is an operator or text and acts accordingly\n   *\n   * @param {String} chr Character from the address field\n   */\n\n\n  checkChar(chr) {\n    if (this.escaped) {// ignore next condition blocks\n    } else if (chr === this.operatorExpecting) {\n      this.node = {\n        type: 'operator',\n        value: chr\n      };\n      this.list.push(this.node);\n      this.node = null;\n      this.operatorExpecting = '';\n      this.escaped = false;\n      return;\n    } else if (!this.operatorExpecting && chr in this.operators) {\n      this.node = {\n        type: 'operator',\n        value: chr\n      };\n      this.list.push(this.node);\n      this.node = null;\n      this.operatorExpecting = this.operators[chr];\n      this.escaped = false;\n      return;\n    } else if (['\"', \"'\"].includes(this.operatorExpecting) && chr === '\\\\') {\n      this.escaped = true;\n      return;\n    }\n\n    if (!this.node) {\n      this.node = {\n        type: 'text',\n        value: ''\n      };\n      this.list.push(this.node);\n    }\n\n    if (chr === '\\n') {\n      // Convert newlines to spaces. Carriage return is ignored as \\r and \\n usually\n      // go together anyway and there already is a WS for \\n. Lone \\r means something is fishy.\n      chr = ' ';\n    }\n\n    if (chr.charCodeAt(0) >= 0x21 || [' ', '\\t'].includes(chr)) {\n      // skip command bytes\n      this.node.value += chr;\n    }\n\n    this.escaped = false;\n  }\n\n}\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    'Name <address@domain>'\n *\n * will be converted to\n *\n *     [{name: 'Name', address: 'address@domain'}]\n *\n * @param {String} str Address field\n * @return {Array} An array of address objects\n */\n\n\nfunction addressparser(str, options) {\n  options = options || {};\n  let tokenizer = new Tokenizer(str);\n  let tokens = tokenizer.tokenize();\n  let addresses = [];\n  let address = [];\n  let parsedAddresses = [];\n  tokens.forEach(token => {\n    if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {\n      if (address.length) {\n        addresses.push(address);\n      }\n\n      address = [];\n    } else {\n      address.push(token);\n    }\n  });\n\n  if (address.length) {\n    addresses.push(address);\n  }\n\n  addresses.forEach(address => {\n    address = _handleAddress(address);\n\n    if (address.length) {\n      parsedAddresses = parsedAddresses.concat(address);\n    }\n  });\n\n  if (options.flatten) {\n    let addresses = [];\n\n    let walkAddressList = list => {\n      list.forEach(address => {\n        if (address.group) {\n          return walkAddressList(address.group);\n        } else {\n          addresses.push(address);\n        }\n      });\n    };\n\n    walkAddressList(parsedAddresses);\n    return addresses;\n  }\n\n  return parsedAddresses;\n} // expose to the world\n\n\nmodule.exports = addressparser;","map":{"version":3,"names":["_handleAddress","tokens","token","isGroup","state","address","addresses","data","comment","group","text","i","len","length","type","value","replace","push","join","name","addressparser","match","splice","_regexHandler","trim","concat","Tokenizer","constructor","str","toString","operatorCurrent","operatorExpecting","node","escaped","list","operators","tokenize","chr","charAt","checkChar","forEach","includes","charCodeAt","options","tokenizer","parsedAddresses","flatten","walkAddressList","module","exports"],"sources":["D:/ReactJS/DoAn_CN/my-app/node_modules/nodemailer/lib/addressparser/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {Array} tokens Tokens object\n * @return {Object} Address object\n */\nfunction _handleAddress(tokens) {\n    let token;\n    let isGroup = false;\n    let state = 'text';\n    let address;\n    let addresses = [];\n    let data = {\n        address: [],\n        comment: [],\n        group: [],\n        text: []\n    };\n    let i;\n    let len;\n\n    // Filter out <addresses>, (comments) and regular text\n    for (i = 0, len = tokens.length; i < len; i++) {\n        token = tokens[i];\n        if (token.type === 'operator') {\n            switch (token.value) {\n                case '<':\n                    state = 'address';\n                    break;\n                case '(':\n                    state = 'comment';\n                    break;\n                case ':':\n                    state = 'group';\n                    isGroup = true;\n                    break;\n                default:\n                    state = 'text';\n            }\n        } else if (token.value) {\n            if (state === 'address') {\n                // handle use case where unquoted name includes a \"<\"\n                // Apple Mail truncates everything between an unexpected < and an address\n                // and so will we\n                token.value = token.value.replace(/^[^<]*<\\s*/, '');\n            }\n            data[state].push(token.value);\n        }\n    }\n\n    // If there is no text but a comment, replace the two\n    if (!data.text.length && data.comment.length) {\n        data.text = data.comment;\n        data.comment = [];\n    }\n\n    if (isGroup) {\n        // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n        data.text = data.text.join(' ');\n        addresses.push({\n            name: data.text || (address && address.name),\n            group: data.group.length ? addressparser(data.group.join(',')) : []\n        });\n    } else {\n        // If no address was found, try to detect one from regular text\n        if (!data.address.length && data.text.length) {\n            for (i = data.text.length - 1; i >= 0; i--) {\n                if (data.text[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n                    data.address = data.text.splice(i, 1);\n                    break;\n                }\n            }\n\n            let _regexHandler = function (address) {\n                if (!data.address.length) {\n                    data.address = [address.trim()];\n                    return ' ';\n                } else {\n                    return address;\n                }\n            };\n\n            // still no address\n            if (!data.address.length) {\n                for (i = data.text.length - 1; i >= 0; i--) {\n                    // fixed the regex to parse email address correctly when email address has more than one @\n                    data.text[i] = data.text[i].replace(/\\s*\\b[^@\\s]+@[^\\s]+\\b\\s*/, _regexHandler).trim();\n                    if (data.address.length) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        // If there's still is no text but a comment exixts, replace the two\n        if (!data.text.length && data.comment.length) {\n            data.text = data.comment;\n            data.comment = [];\n        }\n\n        // Keep only the first address occurence, push others to regular text\n        if (data.address.length > 1) {\n            data.text = data.text.concat(data.address.splice(1));\n        }\n\n        // Join values with spaces\n        data.text = data.text.join(' ');\n        data.address = data.address.join(' ');\n\n        if (!data.address && isGroup) {\n            return [];\n        } else {\n            address = {\n                address: data.address || data.text || '',\n                name: data.text || data.address || ''\n            };\n\n            if (address.address === address.name) {\n                if ((address.address || '').match(/@/)) {\n                    address.name = '';\n                } else {\n                    address.address = '';\n                }\n            }\n\n            addresses.push(address);\n        }\n    }\n\n    return addresses;\n}\n\n/**\n * Creates a Tokenizer object for tokenizing address field strings\n *\n * @constructor\n * @param {String} str Address field string\n */\nclass Tokenizer {\n    constructor(str) {\n        this.str = (str || '').toString();\n        this.operatorCurrent = '';\n        this.operatorExpecting = '';\n        this.node = null;\n        this.escaped = false;\n\n        this.list = [];\n        /**\n         * Operator tokens and which tokens are expected to end the sequence\n         */\n        this.operators = {\n            '\"': '\"',\n            '(': ')',\n            '<': '>',\n            ',': '',\n            ':': ';',\n            // Semicolons are not a legal delimiter per the RFC2822 grammar other\n            // than for terminating a group, but they are also not valid for any\n            // other use in this context.  Given that some mail clients have\n            // historically allowed the semicolon as a delimiter equivalent to the\n            // comma in their UI, it makes sense to treat them the same as a comma\n            // when used outside of a group.\n            ';': ''\n        };\n    }\n\n    /**\n     * Tokenizes the original input string\n     *\n     * @return {Array} An array of operator|text tokens\n     */\n    tokenize() {\n        let chr,\n            list = [];\n        for (let i = 0, len = this.str.length; i < len; i++) {\n            chr = this.str.charAt(i);\n            this.checkChar(chr);\n        }\n\n        this.list.forEach(node => {\n            node.value = (node.value || '').toString().trim();\n            if (node.value) {\n                list.push(node);\n            }\n        });\n\n        return list;\n    }\n\n    /**\n     * Checks if a character is an operator or text and acts accordingly\n     *\n     * @param {String} chr Character from the address field\n     */\n    checkChar(chr) {\n        if (this.escaped) {\n            // ignore next condition blocks\n        } else if (chr === this.operatorExpecting) {\n            this.node = {\n                type: 'operator',\n                value: chr\n            };\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = '';\n            this.escaped = false;\n            return;\n        } else if (!this.operatorExpecting && chr in this.operators) {\n            this.node = {\n                type: 'operator',\n                value: chr\n            };\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = this.operators[chr];\n            this.escaped = false;\n            return;\n        } else if (['\"', \"'\"].includes(this.operatorExpecting) && chr === '\\\\') {\n            this.escaped = true;\n            return;\n        }\n\n        if (!this.node) {\n            this.node = {\n                type: 'text',\n                value: ''\n            };\n            this.list.push(this.node);\n        }\n\n        if (chr === '\\n') {\n            // Convert newlines to spaces. Carriage return is ignored as \\r and \\n usually\n            // go together anyway and there already is a WS for \\n. Lone \\r means something is fishy.\n            chr = ' ';\n        }\n\n        if (chr.charCodeAt(0) >= 0x21 || [' ', '\\t'].includes(chr)) {\n            // skip command bytes\n            this.node.value += chr;\n        }\n\n        this.escaped = false;\n    }\n}\n\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    'Name <address@domain>'\n *\n * will be converted to\n *\n *     [{name: 'Name', address: 'address@domain'}]\n *\n * @param {String} str Address field\n * @return {Array} An array of address objects\n */\nfunction addressparser(str, options) {\n    options = options || {};\n\n    let tokenizer = new Tokenizer(str);\n    let tokens = tokenizer.tokenize();\n\n    let addresses = [];\n    let address = [];\n    let parsedAddresses = [];\n\n    tokens.forEach(token => {\n        if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {\n            if (address.length) {\n                addresses.push(address);\n            }\n            address = [];\n        } else {\n            address.push(token);\n        }\n    });\n\n    if (address.length) {\n        addresses.push(address);\n    }\n\n    addresses.forEach(address => {\n        address = _handleAddress(address);\n        if (address.length) {\n            parsedAddresses = parsedAddresses.concat(address);\n        }\n    });\n\n    if (options.flatten) {\n        let addresses = [];\n        let walkAddressList = list => {\n            list.forEach(address => {\n                if (address.group) {\n                    return walkAddressList(address.group);\n                } else {\n                    addresses.push(address);\n                }\n            });\n        };\n        walkAddressList(parsedAddresses);\n        return addresses;\n    }\n\n    return parsedAddresses;\n}\n\n// expose to the world\nmodule.exports = addressparser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}