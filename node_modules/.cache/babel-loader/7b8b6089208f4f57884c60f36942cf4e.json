{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactJS\\\\DoAn_CN\\\\my-app\\\\src\\\\components\\\\LayoutConnectDB\\\\Layout.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Button from \"react-bootstrap/esm/Button\";\nimport { getPosts, initColumns, updateColumns, getAllColumns } from \"../Dashboard/postBehavior\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LayoutDNDConnectDB = () => {\n  _s();\n\n  const [state, setstate] = useState();\n  const [columns, setColumns] = useState();\n\n  const getallPost = async () => {\n    try {\n      const GetallPostzx = await getPosts(localStorage.getItem(\"token\"));\n\n      if (GetallPostzx.success) {\n        setstate(GetallPostzx.Post_of_User);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  let title = {\n    title: \"Process\"\n  };\n\n  const updatecolumnsinit = async () => {\n    let UpdateInit = {\n      _id: localStorage.getItem(\"IDinitColumns\"),\n      taskIds: []\n    };\n\n    for (let index = 0; index < state.length; index++) {\n      UpdateInit.taskIds.push(state[index]._id);\n    }\n\n    console.log(\"Post\", state);\n    const getUpdate = await updateColumns(UpdateInit);\n    console.log(\"getUpdate\", getUpdate.data.newOrder);\n  };\n\n  const GetallCol = async () => {};\n\n  const getInitColumns = async () => {\n    const getInit = await initColumns(title);\n    localStorage.setItem(\"IDinitColumns\", getInit.data.newcolumns._id);\n    updatecolumnsinit();\n  };\n\n  useEffect(() => {\n    getallPost();\n  });\n\n  const onDragEnd = results => {};\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getInitColumns,\n      children: \"init map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LayoutDNDConnectDB, \"pltKymYNzG0daDDcOI9bfbzC4g4=\");\n\n_c = LayoutDNDConnectDB;\nexport default LayoutDNDConnectDB;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutDNDConnectDB\");","map":{"version":3,"names":["useState","useEffect","Button","getPosts","initColumns","updateColumns","getAllColumns","LayoutDNDConnectDB","state","setstate","columns","setColumns","getallPost","GetallPostzx","localStorage","getItem","success","Post_of_User","error","console","log","title","updatecolumnsinit","UpdateInit","_id","taskIds","index","length","push","getUpdate","data","newOrder","GetallCol","getInitColumns","getInit","setItem","newcolumns","onDragEnd","results"],"sources":["D:/ReactJS/DoAn_CN/my-app/src/components/LayoutConnectDB/Layout.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport {\r\n  getPosts,\r\n  initColumns,\r\n  updateColumns,\r\n  getAllColumns,\r\n} from \"../Dashboard/postBehavior\";\r\nconst LayoutDNDConnectDB = () => {\r\n  const [state, setstate] = useState();\r\n  const [columns, setColumns] = useState();\r\n\r\n  const getallPost = async () => {\r\n    try {\r\n      const GetallPostzx = await getPosts(localStorage.getItem(\"token\"));\r\n      if (GetallPostzx.success) {\r\n        setstate(GetallPostzx.Post_of_User);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  let title = {\r\n    title: \"Process\",\r\n  };\r\n\r\n  const updatecolumnsinit = async () => {\r\n    let UpdateInit = {\r\n      _id: localStorage.getItem(\"IDinitColumns\"),\r\n\r\n      taskIds: [],\r\n    };\r\n    for (let index = 0; index < state.length; index++) {\r\n      UpdateInit.taskIds.push(state[index]._id);\r\n    }\r\n    console.log(\"Post\", state);\r\n    const getUpdate = await updateColumns(UpdateInit);\r\n    console.log(\"getUpdate\", getUpdate.data.newOrder);\r\n  };\r\n\r\n  const GetallCol = async () => {\r\n    \r\n  }\r\n\r\n  const getInitColumns = async () => {\r\n    const getInit = await initColumns(title);\r\n    localStorage.setItem(\"IDinitColumns\", getInit.data.newcolumns._id);\r\n    updatecolumnsinit();\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    getallPost();\r\n  });\r\n  const onDragEnd = (results) => {};\r\n  return (\r\n    <>\r\n      <button onClick={getInitColumns}>init map</button>\r\n      <form>\r\n        <div>title</div>\r\n        <div>content</div>\r\n      </form>\r\n      {/* <DragDropContext onDragEnd={onDragEnd}>\r\n        <div style={{ display: \"flex\" }}>\r\n          {state.columOrder.map((columID) => {\r\n            const colum = state.colums[columID];\r\n            const tasks = colum.taskIds.map((taskIds) => state.tasks[taskIds]);\r\n            return (\r\n              <Column key={colum.id} column={colum} tasks={tasks}></Column>\r\n            );\r\n          })}\r\n        </div>\r\n      </DragDropContext> */}\r\n    </>\r\n  );\r\n};\r\nexport default LayoutDNDConnectDB;\r\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SACEC,QADF,EAEEC,WAFF,EAGEC,aAHF,EAIEC,aAJF,QAKO,2BALP;;;;AAMA,MAAMC,kBAAkB,GAAG,MAAM;EAAA;;EAC/B,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,EAAlC;EACA,MAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,EAAtC;;EAEA,MAAMY,UAAU,GAAG,YAAY;IAC7B,IAAI;MACF,MAAMC,YAAY,GAAG,MAAMV,QAAQ,CAACW,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAnC;;MACA,IAAIF,YAAY,CAACG,OAAjB,EAA0B;QACxBP,QAAQ,CAACI,YAAY,CAACI,YAAd,CAAR;MACD;IACF,CALD,CAKE,OAAOC,KAAP,EAAc;MACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD;EACF,CATD;;EAUA,IAAIG,KAAK,GAAG;IACVA,KAAK,EAAE;EADG,CAAZ;;EAIA,MAAMC,iBAAiB,GAAG,YAAY;IACpC,IAAIC,UAAU,GAAG;MACfC,GAAG,EAAEV,YAAY,CAACC,OAAb,CAAqB,eAArB,CADU;MAGfU,OAAO,EAAE;IAHM,CAAjB;;IAKA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGlB,KAAK,CAACmB,MAAlC,EAA0CD,KAAK,EAA/C,EAAmD;MACjDH,UAAU,CAACE,OAAX,CAAmBG,IAAnB,CAAwBpB,KAAK,CAACkB,KAAD,CAAL,CAAaF,GAArC;IACD;;IACDL,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBZ,KAApB;IACA,MAAMqB,SAAS,GAAG,MAAMxB,aAAa,CAACkB,UAAD,CAArC;IACAJ,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBS,SAAS,CAACC,IAAV,CAAeC,QAAxC;EACD,CAZD;;EAcA,MAAMC,SAAS,GAAG,YAAY,CAE7B,CAFD;;EAIA,MAAMC,cAAc,GAAG,YAAY;IACjC,MAAMC,OAAO,GAAG,MAAM9B,WAAW,CAACiB,KAAD,CAAjC;IACAP,YAAY,CAACqB,OAAb,CAAqB,eAArB,EAAsCD,OAAO,CAACJ,IAAR,CAAaM,UAAb,CAAwBZ,GAA9D;IACAF,iBAAiB;EAClB,CAJD;;EAQArB,SAAS,CAAC,MAAM;IACdW,UAAU;EACX,CAFQ,CAAT;;EAGA,MAAMyB,SAAS,GAAIC,OAAD,IAAa,CAAE,CAAjC;;EACA,oBACE;IAAA,wBACE;MAAQ,OAAO,EAAEL,cAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA,gBADF;AAoBD,CApED;;GAAM1B,kB;;KAAAA,kB;AAqEN,eAAeA,kBAAf"},"metadata":{},"sourceType":"module"}