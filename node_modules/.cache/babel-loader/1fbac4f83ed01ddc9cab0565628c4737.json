{"ast":null,"code":"'use strict';\n\nconst Transform = require('stream').Transform;\n/**\n * Encodes a Buffer into a Quoted-Printable encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} Quoted-Printable encoded string\n */\n\n\nfunction encode(buffer) {\n  if (typeof buffer === 'string') {\n    buffer = Buffer.from(buffer, 'utf-8');\n  } // usable characters that do not need encoding\n\n\n  let ranges = [// https://tools.ietf.org/html/rfc2045#section-6.7\n  [0x09], // <TAB>\n  [0x0a], // <LF>\n  [0x0d], // <CR>\n  [0x20, 0x3c], // <SP>!\"#$%&'()*+,-./0123456789:;\n  [0x3e, 0x7e] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n  ];\n  let result = '';\n  let ord;\n\n  for (let i = 0, len = buffer.length; i < len; i++) {\n    ord = buffer[i]; // if the char is in allowed range, then keep as is, unless it is a WS in the end of a line\n\n    if (checkRanges(ord, ranges) && !((ord === 0x20 || ord === 0x09) && (i === len - 1 || buffer[i + 1] === 0x0a || buffer[i + 1] === 0x0d))) {\n      result += String.fromCharCode(ord);\n      continue;\n    }\n\n    result += '=' + (ord < 0x10 ? '0' : '') + ord.toString(16).toUpperCase();\n  }\n\n  return result;\n}\n/**\n * Adds soft line breaks to a Quoted-Printable string\n *\n * @param {String} str Quoted-Printable encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped Quoted-Printable encoded string\n */\n\n\nfunction wrap(str, lineLength) {\n  str = (str || '').toString();\n  lineLength = lineLength || 76;\n\n  if (str.length <= lineLength) {\n    return str;\n  }\n\n  let pos = 0;\n  let len = str.length;\n  let match, code, line;\n  let lineMargin = Math.floor(lineLength / 3);\n  let result = ''; // insert soft linebreaks where needed\n\n  while (pos < len) {\n    line = str.substr(pos, lineLength);\n\n    if (match = line.match(/\\r\\n/)) {\n      line = line.substr(0, match.index + match[0].length);\n      result += line;\n      pos += line.length;\n      continue;\n    }\n\n    if (line.substr(-1) === '\\n') {\n      // nothing to change here\n      result += line;\n      pos += line.length;\n      continue;\n    } else if (match = line.substr(-lineMargin).match(/\\n.*?$/)) {\n      // truncate to nearest line break\n      line = line.substr(0, line.length - (match[0].length - 1));\n      result += line;\n      pos += line.length;\n      continue;\n    } else if (line.length > lineLength - lineMargin && (match = line.substr(-lineMargin).match(/[ \\t.,!?][^ \\t.,!?]*$/))) {\n      // truncate to nearest space\n      line = line.substr(0, line.length - (match[0].length - 1));\n    } else if (line.match(/[=][\\da-f]{0,2}$/i)) {\n      // push incomplete encoding sequences to the next line\n      if (match = line.match(/[=][\\da-f]{0,1}$/i)) {\n        line = line.substr(0, line.length - match[0].length);\n      } // ensure that utf-8 sequences are not split\n\n\n      while (line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\\da-f]{2}){1,4}$/i) && (match = line.match(/[=][\\da-f]{2}$/gi))) {\n        code = parseInt(match[0].substr(1, 2), 16);\n\n        if (code < 128) {\n          break;\n        }\n\n        line = line.substr(0, line.length - 3);\n\n        if (code >= 0xc0) {\n          break;\n        }\n      }\n    }\n\n    if (pos + line.length < len && line.substr(-1) !== '\\n') {\n      if (line.length === lineLength && line.match(/[=][\\da-f]{2}$/i)) {\n        line = line.substr(0, line.length - 3);\n      } else if (line.length === lineLength) {\n        line = line.substr(0, line.length - 1);\n      }\n\n      pos += line.length;\n      line += '=\\r\\n';\n    } else {\n      pos += line.length;\n    }\n\n    result += line;\n  }\n\n  return result;\n}\n/**\n * Helper function to check if a number is inside provided ranges\n *\n * @param {Number} nr Number to check for\n * @param {Array} ranges An Array of allowed values\n * @returns {Boolean} True if the value was found inside allowed ranges, false otherwise\n */\n\n\nfunction checkRanges(nr, ranges) {\n  for (let i = ranges.length - 1; i >= 0; i--) {\n    if (!ranges[i].length) {\n      continue;\n    }\n\n    if (ranges[i].length === 1 && nr === ranges[i][0]) {\n      return true;\n    }\n\n    if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Creates a transform stream for encoding data to Quoted-Printable encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */\n\n\nclass Encoder extends Transform {\n  constructor(options) {\n    super(); // init Transform\n\n    this.options = options || {};\n\n    if (this.options.lineLength !== false) {\n      this.options.lineLength = this.options.lineLength || 76;\n    }\n\n    this._curLine = '';\n    this.inputBytes = 0;\n    this.outputBytes = 0;\n  }\n\n  _transform(chunk, encoding, done) {\n    let qp;\n\n    if (encoding !== 'buffer') {\n      chunk = Buffer.from(chunk, encoding);\n    }\n\n    if (!chunk || !chunk.length) {\n      return done();\n    }\n\n    this.inputBytes += chunk.length;\n\n    if (this.options.lineLength) {\n      qp = this._curLine + encode(chunk);\n      qp = wrap(qp, this.options.lineLength);\n      qp = qp.replace(/(^|\\n)([^\\n]*)$/, (match, lineBreak, lastLine) => {\n        this._curLine = lastLine;\n        return lineBreak;\n      });\n\n      if (qp) {\n        this.outputBytes += qp.length;\n        this.push(qp);\n      }\n    } else {\n      qp = encode(chunk);\n      this.outputBytes += qp.length;\n      this.push(qp, 'ascii');\n    }\n\n    done();\n  }\n\n  _flush(done) {\n    if (this._curLine) {\n      this.outputBytes += this._curLine.length;\n      this.push(this._curLine, 'ascii');\n    }\n\n    done();\n  }\n\n} // expose to the world\n\n\nmodule.exports = {\n  encode,\n  wrap,\n  Encoder\n};","map":{"version":3,"names":["Transform","require","encode","buffer","Buffer","from","ranges","result","ord","i","len","length","checkRanges","String","fromCharCode","toString","toUpperCase","wrap","str","lineLength","pos","match","code","line","lineMargin","Math","floor","substr","index","parseInt","nr","Encoder","constructor","options","_curLine","inputBytes","outputBytes","_transform","chunk","encoding","done","qp","replace","lineBreak","lastLine","push","_flush","module","exports"],"sources":["D:/ReactJS/DoAn_CN/my-app/node_modules/nodemailer/lib/qp/index.js"],"sourcesContent":["'use strict';\n\nconst Transform = require('stream').Transform;\n\n/**\n * Encodes a Buffer into a Quoted-Printable encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} Quoted-Printable encoded string\n */\nfunction encode(buffer) {\n    if (typeof buffer === 'string') {\n        buffer = Buffer.from(buffer, 'utf-8');\n    }\n\n    // usable characters that do not need encoding\n    let ranges = [\n        // https://tools.ietf.org/html/rfc2045#section-6.7\n        [0x09], // <TAB>\n        [0x0a], // <LF>\n        [0x0d], // <CR>\n        [0x20, 0x3c], // <SP>!\"#$%&'()*+,-./0123456789:;\n        [0x3e, 0x7e] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n    ];\n    let result = '';\n    let ord;\n\n    for (let i = 0, len = buffer.length; i < len; i++) {\n        ord = buffer[i];\n        // if the char is in allowed range, then keep as is, unless it is a WS in the end of a line\n        if (checkRanges(ord, ranges) && !((ord === 0x20 || ord === 0x09) && (i === len - 1 || buffer[i + 1] === 0x0a || buffer[i + 1] === 0x0d))) {\n            result += String.fromCharCode(ord);\n            continue;\n        }\n        result += '=' + (ord < 0x10 ? '0' : '') + ord.toString(16).toUpperCase();\n    }\n\n    return result;\n}\n\n/**\n * Adds soft line breaks to a Quoted-Printable string\n *\n * @param {String} str Quoted-Printable encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped Quoted-Printable encoded string\n */\nfunction wrap(str, lineLength) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n\n    if (str.length <= lineLength) {\n        return str;\n    }\n\n    let pos = 0;\n    let len = str.length;\n    let match, code, line;\n    let lineMargin = Math.floor(lineLength / 3);\n    let result = '';\n\n    // insert soft linebreaks where needed\n    while (pos < len) {\n        line = str.substr(pos, lineLength);\n        if ((match = line.match(/\\r\\n/))) {\n            line = line.substr(0, match.index + match[0].length);\n            result += line;\n            pos += line.length;\n            continue;\n        }\n\n        if (line.substr(-1) === '\\n') {\n            // nothing to change here\n            result += line;\n            pos += line.length;\n            continue;\n        } else if ((match = line.substr(-lineMargin).match(/\\n.*?$/))) {\n            // truncate to nearest line break\n            line = line.substr(0, line.length - (match[0].length - 1));\n            result += line;\n            pos += line.length;\n            continue;\n        } else if (line.length > lineLength - lineMargin && (match = line.substr(-lineMargin).match(/[ \\t.,!?][^ \\t.,!?]*$/))) {\n            // truncate to nearest space\n            line = line.substr(0, line.length - (match[0].length - 1));\n        } else if (line.match(/[=][\\da-f]{0,2}$/i)) {\n            // push incomplete encoding sequences to the next line\n            if ((match = line.match(/[=][\\da-f]{0,1}$/i))) {\n                line = line.substr(0, line.length - match[0].length);\n            }\n\n            // ensure that utf-8 sequences are not split\n            while (line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\\da-f]{2}){1,4}$/i) && (match = line.match(/[=][\\da-f]{2}$/gi))) {\n                code = parseInt(match[0].substr(1, 2), 16);\n                if (code < 128) {\n                    break;\n                }\n\n                line = line.substr(0, line.length - 3);\n\n                if (code >= 0xc0) {\n                    break;\n                }\n            }\n        }\n\n        if (pos + line.length < len && line.substr(-1) !== '\\n') {\n            if (line.length === lineLength && line.match(/[=][\\da-f]{2}$/i)) {\n                line = line.substr(0, line.length - 3);\n            } else if (line.length === lineLength) {\n                line = line.substr(0, line.length - 1);\n            }\n            pos += line.length;\n            line += '=\\r\\n';\n        } else {\n            pos += line.length;\n        }\n\n        result += line;\n    }\n\n    return result;\n}\n\n/**\n * Helper function to check if a number is inside provided ranges\n *\n * @param {Number} nr Number to check for\n * @param {Array} ranges An Array of allowed values\n * @returns {Boolean} True if the value was found inside allowed ranges, false otherwise\n */\nfunction checkRanges(nr, ranges) {\n    for (let i = ranges.length - 1; i >= 0; i--) {\n        if (!ranges[i].length) {\n            continue;\n        }\n        if (ranges[i].length === 1 && nr === ranges[i][0]) {\n            return true;\n        }\n        if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Creates a transform stream for encoding data to Quoted-Printable encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */\nclass Encoder extends Transform {\n    constructor(options) {\n        super();\n\n        // init Transform\n        this.options = options || {};\n\n        if (this.options.lineLength !== false) {\n            this.options.lineLength = this.options.lineLength || 76;\n        }\n\n        this._curLine = '';\n\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n\n    _transform(chunk, encoding, done) {\n        let qp;\n\n        if (encoding !== 'buffer') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        if (!chunk || !chunk.length) {\n            return done();\n        }\n\n        this.inputBytes += chunk.length;\n\n        if (this.options.lineLength) {\n            qp = this._curLine + encode(chunk);\n            qp = wrap(qp, this.options.lineLength);\n            qp = qp.replace(/(^|\\n)([^\\n]*)$/, (match, lineBreak, lastLine) => {\n                this._curLine = lastLine;\n                return lineBreak;\n            });\n\n            if (qp) {\n                this.outputBytes += qp.length;\n                this.push(qp);\n            }\n        } else {\n            qp = encode(chunk);\n            this.outputBytes += qp.length;\n            this.push(qp, 'ascii');\n        }\n\n        done();\n    }\n\n    _flush(done) {\n        if (this._curLine) {\n            this.outputBytes += this._curLine.length;\n            this.push(this._curLine, 'ascii');\n        }\n        done();\n    }\n}\n\n// expose to the world\nmodule.exports = {\n    encode,\n    wrap,\n    Encoder\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}