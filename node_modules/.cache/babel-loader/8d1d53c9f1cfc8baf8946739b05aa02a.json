{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactJS\\\\DoAn_CN\\\\my-app\\\\src\\\\components\\\\Layout\\\\LayoutDND.js\",\n    _s = $RefreshSig$();\n\nimport initData from \"./Data\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport Column from \"./Column\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LayoutDND = () => {\n  _s();\n\n  const [state, setstate] = useState(initData);\n\n  const onDragEnd = results => {\n    const {\n      destination,\n      draggableId,\n      source\n    } = results;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = state.colums[source.droppableId];\n    const finish = state.colums[destination.droppableId];\n\n    if (start === finish) {\n      const newTaskID = Array.from(start.taskIds);\n      newTaskID.splice(source.index, 1);\n      newTaskID.splice(destination.index, 0, draggableId);\n      const newcolumn = { ...column,\n        taskIds: newTaskID\n      };\n      const newstate = { ...state,\n        colums: { ...state.colums,\n          [newcolumn.id]: newcolumn\n        }\n      };\n      console.log(\"Result\", results);\n      setstate(newstate);\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: state.columOrder.map(columID => {\n        const colum = state.colums[columID];\n        const tasks = colum.taskIds.map(taskIds => state.tasks[taskIds]);\n        console.log(colum);\n        return /*#__PURE__*/_jsxDEV(Column, {\n          column: colum,\n          tasks: tasks\n        }, colum.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(LayoutDND, \"SSb1bDK8tUM0uUtv27BzW0fetL4=\");\n\n_c = LayoutDND;\nexport default LayoutDND;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutDND\");","map":{"version":3,"names":["initData","DragDropContext","Column","useState","LayoutDND","state","setstate","onDragEnd","results","destination","draggableId","source","droppableId","index","start","colums","finish","newTaskID","Array","from","taskIds","splice","newcolumn","column","newstate","id","console","log","columOrder","map","columID","colum","tasks"],"sources":["D:/ReactJS/DoAn_CN/my-app/src/components/Layout/LayoutDND.js"],"sourcesContent":["import initData from \"./Data\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport Column from \"./Column\";\r\nimport { useState } from \"react\";\r\nconst LayoutDND = () => {\r\n  const [state, setstate] = useState(initData);\r\n\r\n  const onDragEnd = (results) => {\r\n    const { destination, draggableId, source } = results;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n    const start = state.colums[source.droppableId];\r\n    const finish = state.colums[destination.droppableId];\r\n    if (start === finish) {\r\n      const newTaskID = Array.from(start.taskIds);\r\n\r\n      newTaskID.splice(source.index, 1);\r\n      newTaskID.splice(destination.index, 0, draggableId);\r\n\r\n      const newcolumn = {\r\n        ...column,\r\n        taskIds: newTaskID,\r\n      };\r\n      const newstate = {\r\n        ...state,\r\n        colums: {\r\n          ...state.colums,\r\n          [newcolumn.id]: newcolumn,\r\n        },\r\n      };\r\n      console.log(\"Result\", results);\r\n      setstate(newstate);\r\n      return;\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        {state.columOrder.map((columID) => {\r\n          const colum = state.colums[columID];\r\n          const tasks = colum.taskIds.map((taskIds) => state.tasks[taskIds]);\r\n          console.log(colum);\r\n          return <Column key={colum.id} column={colum} tasks={tasks}></Column>;\r\n        })}\r\n      </DragDropContext>\r\n    </>\r\n  );\r\n};\r\nexport default LayoutDND;\r\n"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,QAArB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;;AACA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACtB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAACH,QAAD,CAAlC;;EAEA,MAAMO,SAAS,GAAIC,OAAD,IAAa;IAC7B,MAAM;MAAEC,WAAF;MAAeC,WAAf;MAA4BC;IAA5B,IAAuCH,OAA7C;;IACA,IAAI,CAACC,WAAL,EAAkB;MAChB;IACD;;IACD,IACEA,WAAW,CAACG,WAAZ,KAA4BD,MAAM,CAACC,WAAnC,IACAH,WAAW,CAACI,KAAZ,KAAsBF,MAAM,CAACE,KAF/B,EAGE;MACA;IACD;;IACD,MAAMC,KAAK,GAAGT,KAAK,CAACU,MAAN,CAAaJ,MAAM,CAACC,WAApB,CAAd;IACA,MAAMI,MAAM,GAAGX,KAAK,CAACU,MAAN,CAAaN,WAAW,CAACG,WAAzB,CAAf;;IACA,IAAIE,KAAK,KAAKE,MAAd,EAAsB;MACpB,MAAMC,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAWL,KAAK,CAACM,OAAjB,CAAlB;MAEAH,SAAS,CAACI,MAAV,CAAiBV,MAAM,CAACE,KAAxB,EAA+B,CAA/B;MACAI,SAAS,CAACI,MAAV,CAAiBZ,WAAW,CAACI,KAA7B,EAAoC,CAApC,EAAuCH,WAAvC;MAEA,MAAMY,SAAS,GAAG,EAChB,GAAGC,MADa;QAEhBH,OAAO,EAAEH;MAFO,CAAlB;MAIA,MAAMO,QAAQ,GAAG,EACf,GAAGnB,KADY;QAEfU,MAAM,EAAE,EACN,GAAGV,KAAK,CAACU,MADH;UAEN,CAACO,SAAS,CAACG,EAAX,GAAgBH;QAFV;MAFO,CAAjB;MAOAI,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBnB,OAAtB;MACAF,QAAQ,CAACkB,QAAD,CAAR;MACA;IACD;EACF,CAlCD;;EAmCA,oBACE;IAAA,uBACE,QAAC,eAAD;MAAiB,SAAS,EAAEjB,SAA5B;MAAA,UACGF,KAAK,CAACuB,UAAN,CAAiBC,GAAjB,CAAsBC,OAAD,IAAa;QACjC,MAAMC,KAAK,GAAG1B,KAAK,CAACU,MAAN,CAAae,OAAb,CAAd;QACA,MAAME,KAAK,GAAGD,KAAK,CAACX,OAAN,CAAcS,GAAd,CAAmBT,OAAD,IAAaf,KAAK,CAAC2B,KAAN,CAAYZ,OAAZ,CAA/B,CAAd;QACAM,OAAO,CAACC,GAAR,CAAYI,KAAZ;QACA,oBAAO,QAAC,MAAD;UAAuB,MAAM,EAAEA,KAA/B;UAAsC,KAAK,EAAEC;QAA7C,GAAaD,KAAK,CAACN,EAAnB;UAAA;UAAA;UAAA;QAAA,QAAP;MACD,CALA;IADH;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAYD,CAlDD;;GAAMrB,S;;KAAAA,S;AAmDN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}