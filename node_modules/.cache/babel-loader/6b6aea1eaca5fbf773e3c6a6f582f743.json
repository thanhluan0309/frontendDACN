{"ast":null,"code":"'use strict';\n\nconst Transform = require('stream').Transform;\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */\n\n\nfunction encode(buffer) {\n  if (typeof buffer === 'string') {\n    buffer = Buffer.from(buffer, 'utf-8');\n  }\n\n  return buffer.toString('base64');\n}\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */\n\n\nfunction wrap(str, lineLength) {\n  str = (str || '').toString();\n  lineLength = lineLength || 76;\n\n  if (str.length <= lineLength) {\n    return str;\n  }\n\n  let result = [];\n  let pos = 0;\n  let chunkLength = lineLength * 1024;\n\n  while (pos < str.length) {\n    let wrappedLines = str.substr(pos, chunkLength).replace(new RegExp('.{' + lineLength + '}', 'g'), '$&\\r\\n').trim();\n    result.push(wrappedLines);\n    pos += chunkLength;\n  }\n\n  return result.join('\\r\\n').trim();\n}\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */\n\n\nclass Encoder extends Transform {\n  constructor(options) {\n    super(); // init Transform\n\n    this.options = options || {};\n\n    if (this.options.lineLength !== false) {\n      this.options.lineLength = this.options.lineLength || 76;\n    }\n\n    this._curLine = '';\n    this._remainingBytes = false;\n    this.inputBytes = 0;\n    this.outputBytes = 0;\n  }\n\n  _transform(chunk, encoding, done) {\n    if (encoding !== 'buffer') {\n      chunk = Buffer.from(chunk, encoding);\n    }\n\n    if (!chunk || !chunk.length) {\n      return setImmediate(done);\n    }\n\n    this.inputBytes += chunk.length;\n\n    if (this._remainingBytes && this._remainingBytes.length) {\n      chunk = Buffer.concat([this._remainingBytes, chunk], this._remainingBytes.length + chunk.length);\n      this._remainingBytes = false;\n    }\n\n    if (chunk.length % 3) {\n      this._remainingBytes = chunk.slice(chunk.length - chunk.length % 3);\n      chunk = chunk.slice(0, chunk.length - chunk.length % 3);\n    } else {\n      this._remainingBytes = false;\n    }\n\n    let b64 = this._curLine + encode(chunk);\n\n    if (this.options.lineLength) {\n      b64 = wrap(b64, this.options.lineLength); // remove last line as it is still most probably incomplete\n\n      let lastLF = b64.lastIndexOf('\\n');\n\n      if (lastLF < 0) {\n        this._curLine = b64;\n        b64 = '';\n      } else if (lastLF === b64.length - 1) {\n        this._curLine = '';\n      } else {\n        this._curLine = b64.substr(lastLF + 1);\n        b64 = b64.substr(0, lastLF + 1);\n      }\n    }\n\n    if (b64) {\n      this.outputBytes += b64.length;\n      this.push(Buffer.from(b64, 'ascii'));\n    }\n\n    setImmediate(done);\n  }\n\n  _flush(done) {\n    if (this._remainingBytes && this._remainingBytes.length) {\n      this._curLine += encode(this._remainingBytes);\n    }\n\n    if (this._curLine) {\n      this._curLine = wrap(this._curLine, this.options.lineLength);\n      this.outputBytes += this._curLine.length;\n      this.push(this._curLine, 'ascii');\n      this._curLine = '';\n    }\n\n    done();\n  }\n\n} // expose to the world\n\n\nmodule.exports = {\n  encode,\n  wrap,\n  Encoder\n};","map":{"version":3,"names":["Transform","require","encode","buffer","Buffer","from","toString","wrap","str","lineLength","length","result","pos","chunkLength","wrappedLines","substr","replace","RegExp","trim","push","join","Encoder","constructor","options","_curLine","_remainingBytes","inputBytes","outputBytes","_transform","chunk","encoding","done","setImmediate","concat","slice","b64","lastLF","lastIndexOf","_flush","module","exports"],"sources":["D:/ReactJS/DoAn_CN/my-app/node_modules/nodemailer/lib/base64/index.js"],"sourcesContent":["'use strict';\n\nconst Transform = require('stream').Transform;\n\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */\nfunction encode(buffer) {\n    if (typeof buffer === 'string') {\n        buffer = Buffer.from(buffer, 'utf-8');\n    }\n\n    return buffer.toString('base64');\n}\n\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */\nfunction wrap(str, lineLength) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n\n    if (str.length <= lineLength) {\n        return str;\n    }\n\n    let result = [];\n    let pos = 0;\n    let chunkLength = lineLength * 1024;\n    while (pos < str.length) {\n        let wrappedLines = str\n            .substr(pos, chunkLength)\n            .replace(new RegExp('.{' + lineLength + '}', 'g'), '$&\\r\\n')\n            .trim();\n        result.push(wrappedLines);\n        pos += chunkLength;\n    }\n\n    return result.join('\\r\\n').trim();\n}\n\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */\nclass Encoder extends Transform {\n    constructor(options) {\n        super();\n        // init Transform\n        this.options = options || {};\n\n        if (this.options.lineLength !== false) {\n            this.options.lineLength = this.options.lineLength || 76;\n        }\n\n        this._curLine = '';\n        this._remainingBytes = false;\n\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n\n    _transform(chunk, encoding, done) {\n        if (encoding !== 'buffer') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        if (!chunk || !chunk.length) {\n            return setImmediate(done);\n        }\n\n        this.inputBytes += chunk.length;\n\n        if (this._remainingBytes && this._remainingBytes.length) {\n            chunk = Buffer.concat([this._remainingBytes, chunk], this._remainingBytes.length + chunk.length);\n            this._remainingBytes = false;\n        }\n\n        if (chunk.length % 3) {\n            this._remainingBytes = chunk.slice(chunk.length - (chunk.length % 3));\n            chunk = chunk.slice(0, chunk.length - (chunk.length % 3));\n        } else {\n            this._remainingBytes = false;\n        }\n\n        let b64 = this._curLine + encode(chunk);\n\n        if (this.options.lineLength) {\n            b64 = wrap(b64, this.options.lineLength);\n\n            // remove last line as it is still most probably incomplete\n            let lastLF = b64.lastIndexOf('\\n');\n            if (lastLF < 0) {\n                this._curLine = b64;\n                b64 = '';\n            } else if (lastLF === b64.length - 1) {\n                this._curLine = '';\n            } else {\n                this._curLine = b64.substr(lastLF + 1);\n                b64 = b64.substr(0, lastLF + 1);\n            }\n        }\n\n        if (b64) {\n            this.outputBytes += b64.length;\n            this.push(Buffer.from(b64, 'ascii'));\n        }\n\n        setImmediate(done);\n    }\n\n    _flush(done) {\n        if (this._remainingBytes && this._remainingBytes.length) {\n            this._curLine += encode(this._remainingBytes);\n        }\n\n        if (this._curLine) {\n            this._curLine = wrap(this._curLine, this.options.lineLength);\n            this.outputBytes += this._curLine.length;\n            this.push(this._curLine, 'ascii');\n            this._curLine = '';\n        }\n        done();\n    }\n}\n\n// expose to the world\nmodule.exports = {\n    encode,\n    wrap,\n    Encoder\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}