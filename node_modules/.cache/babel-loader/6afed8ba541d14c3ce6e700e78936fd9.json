{"ast":null,"code":"'use strict'; // streams through a message body and calculates relaxed body hash\n\nconst Transform = require('stream').Transform;\n\nconst crypto = require('crypto');\n\nclass RelaxedBody extends Transform {\n  constructor(options) {\n    super();\n    options = options || {};\n    this.chunkBuffer = [];\n    this.chunkBufferLen = 0;\n    this.bodyHash = crypto.createHash(options.hashAlgo || 'sha1');\n    this.remainder = '';\n    this.byteLength = 0;\n    this.debug = options.debug;\n    this._debugBody = options.debug ? [] : false;\n  }\n\n  updateHash(chunk) {\n    let bodyStr; // find next remainder\n\n    let nextRemainder = ''; // This crux finds and removes the spaces from the last line and the newline characters after the last non-empty line\n    // If we get another chunk that does not match this description then we can restore the previously processed data\n\n    let state = 'file';\n\n    for (let i = chunk.length - 1; i >= 0; i--) {\n      let c = chunk[i];\n\n      if (state === 'file' && (c === 0x0a || c === 0x0d)) {// do nothing, found \\n or \\r at the end of chunk, stil end of file\n      } else if (state === 'file' && (c === 0x09 || c === 0x20)) {\n        // switch to line ending mode, this is the last non-empty line\n        state = 'line';\n      } else if (state === 'line' && (c === 0x09 || c === 0x20)) {// do nothing, found ' ' or \\t at the end of line, keep processing the last non-empty line\n      } else if (state === 'file' || state === 'line') {\n        // non line/file ending character found, switch to body mode\n        state = 'body';\n\n        if (i === chunk.length - 1) {\n          // final char is not part of line end or file end, so do nothing\n          break;\n        }\n      }\n\n      if (i === 0) {\n        // reached to the beginning of the chunk, check if it is still about the ending\n        // and if the remainder also matches\n        if (state === 'file' && (!this.remainder || /[\\r\\n]$/.test(this.remainder)) || state === 'line' && (!this.remainder || /[ \\t]$/.test(this.remainder))) {\n          // keep everything\n          this.remainder += chunk.toString('binary');\n          return;\n        } else if (state === 'line' || state === 'file') {\n          // process existing remainder as normal line but store the current chunk\n          nextRemainder = chunk.toString('binary');\n          chunk = false;\n          break;\n        }\n      }\n\n      if (state !== 'body') {\n        continue;\n      } // reached first non ending byte\n\n\n      nextRemainder = chunk.slice(i + 1).toString('binary');\n      chunk = chunk.slice(0, i + 1);\n      break;\n    }\n\n    let needsFixing = !!this.remainder;\n\n    if (chunk && !needsFixing) {\n      // check if we even need to change anything\n      for (let i = 0, len = chunk.length; i < len; i++) {\n        if (i && chunk[i] === 0x0a && chunk[i - 1] !== 0x0d) {\n          // missing \\r before \\n\n          needsFixing = true;\n          break;\n        } else if (i && chunk[i] === 0x0d && chunk[i - 1] === 0x20) {\n          // trailing WSP found\n          needsFixing = true;\n          break;\n        } else if (i && chunk[i] === 0x20 && chunk[i - 1] === 0x20) {\n          // multiple spaces found, needs to be replaced with just one\n          needsFixing = true;\n          break;\n        } else if (chunk[i] === 0x09) {\n          // TAB found, needs to be replaced with a space\n          needsFixing = true;\n          break;\n        }\n      }\n    }\n\n    if (needsFixing) {\n      bodyStr = this.remainder + (chunk ? chunk.toString('binary') : '');\n      this.remainder = nextRemainder;\n      bodyStr = bodyStr.replace(/\\r?\\n/g, '\\n') // use js line endings\n      .replace(/[ \\t]*$/gm, '') // remove line endings, rtrim\n      .replace(/[ \\t]+/gm, ' ') // single spaces\n      .replace(/\\n/g, '\\r\\n'); // restore rfc822 line endings\n\n      chunk = Buffer.from(bodyStr, 'binary');\n    } else if (nextRemainder) {\n      this.remainder = nextRemainder;\n    }\n\n    if (this.debug) {\n      this._debugBody.push(chunk);\n    }\n\n    this.bodyHash.update(chunk);\n  }\n\n  _transform(chunk, encoding, callback) {\n    if (!chunk || !chunk.length) {\n      return callback();\n    }\n\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding);\n    }\n\n    this.updateHash(chunk);\n    this.byteLength += chunk.length;\n    this.push(chunk);\n    callback();\n  }\n\n  _flush(callback) {\n    // generate final hash and emit it\n    if (/[\\r\\n]$/.test(this.remainder) && this.byteLength > 2) {\n      // add terminating line end\n      this.bodyHash.update(Buffer.from('\\r\\n'));\n    }\n\n    if (!this.byteLength) {\n      // emit empty line buffer to keep the stream flowing\n      this.push(Buffer.from('\\r\\n')); // this.bodyHash.update(Buffer.from('\\r\\n'));\n    }\n\n    this.emit('hash', this.bodyHash.digest('base64'), this.debug ? Buffer.concat(this._debugBody) : false);\n    callback();\n  }\n\n}\n\nmodule.exports = RelaxedBody;","map":{"version":3,"names":["Transform","require","crypto","RelaxedBody","constructor","options","chunkBuffer","chunkBufferLen","bodyHash","createHash","hashAlgo","remainder","byteLength","debug","_debugBody","updateHash","chunk","bodyStr","nextRemainder","state","i","length","c","test","toString","slice","needsFixing","len","replace","Buffer","from","push","update","_transform","encoding","callback","_flush","emit","digest","concat","module","exports"],"sources":["D:/ReactJS/DoAn_CN/my-app/node_modules/nodemailer/lib/dkim/relaxed-body.js"],"sourcesContent":["'use strict';\n\n// streams through a message body and calculates relaxed body hash\n\nconst Transform = require('stream').Transform;\nconst crypto = require('crypto');\n\nclass RelaxedBody extends Transform {\n    constructor(options) {\n        super();\n        options = options || {};\n        this.chunkBuffer = [];\n        this.chunkBufferLen = 0;\n        this.bodyHash = crypto.createHash(options.hashAlgo || 'sha1');\n        this.remainder = '';\n        this.byteLength = 0;\n\n        this.debug = options.debug;\n        this._debugBody = options.debug ? [] : false;\n    }\n\n    updateHash(chunk) {\n        let bodyStr;\n\n        // find next remainder\n        let nextRemainder = '';\n\n        // This crux finds and removes the spaces from the last line and the newline characters after the last non-empty line\n        // If we get another chunk that does not match this description then we can restore the previously processed data\n        let state = 'file';\n        for (let i = chunk.length - 1; i >= 0; i--) {\n            let c = chunk[i];\n\n            if (state === 'file' && (c === 0x0a || c === 0x0d)) {\n                // do nothing, found \\n or \\r at the end of chunk, stil end of file\n            } else if (state === 'file' && (c === 0x09 || c === 0x20)) {\n                // switch to line ending mode, this is the last non-empty line\n                state = 'line';\n            } else if (state === 'line' && (c === 0x09 || c === 0x20)) {\n                // do nothing, found ' ' or \\t at the end of line, keep processing the last non-empty line\n            } else if (state === 'file' || state === 'line') {\n                // non line/file ending character found, switch to body mode\n                state = 'body';\n                if (i === chunk.length - 1) {\n                    // final char is not part of line end or file end, so do nothing\n                    break;\n                }\n            }\n\n            if (i === 0) {\n                // reached to the beginning of the chunk, check if it is still about the ending\n                // and if the remainder also matches\n                if (\n                    (state === 'file' && (!this.remainder || /[\\r\\n]$/.test(this.remainder))) ||\n                    (state === 'line' && (!this.remainder || /[ \\t]$/.test(this.remainder)))\n                ) {\n                    // keep everything\n                    this.remainder += chunk.toString('binary');\n                    return;\n                } else if (state === 'line' || state === 'file') {\n                    // process existing remainder as normal line but store the current chunk\n                    nextRemainder = chunk.toString('binary');\n                    chunk = false;\n                    break;\n                }\n            }\n\n            if (state !== 'body') {\n                continue;\n            }\n\n            // reached first non ending byte\n            nextRemainder = chunk.slice(i + 1).toString('binary');\n            chunk = chunk.slice(0, i + 1);\n            break;\n        }\n\n        let needsFixing = !!this.remainder;\n        if (chunk && !needsFixing) {\n            // check if we even need to change anything\n            for (let i = 0, len = chunk.length; i < len; i++) {\n                if (i && chunk[i] === 0x0a && chunk[i - 1] !== 0x0d) {\n                    // missing \\r before \\n\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x0d && chunk[i - 1] === 0x20) {\n                    // trailing WSP found\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x20 && chunk[i - 1] === 0x20) {\n                    // multiple spaces found, needs to be replaced with just one\n                    needsFixing = true;\n                    break;\n                } else if (chunk[i] === 0x09) {\n                    // TAB found, needs to be replaced with a space\n                    needsFixing = true;\n                    break;\n                }\n            }\n        }\n\n        if (needsFixing) {\n            bodyStr = this.remainder + (chunk ? chunk.toString('binary') : '');\n            this.remainder = nextRemainder;\n            bodyStr = bodyStr\n                .replace(/\\r?\\n/g, '\\n') // use js line endings\n                .replace(/[ \\t]*$/gm, '') // remove line endings, rtrim\n                .replace(/[ \\t]+/gm, ' ') // single spaces\n                .replace(/\\n/g, '\\r\\n'); // restore rfc822 line endings\n            chunk = Buffer.from(bodyStr, 'binary');\n        } else if (nextRemainder) {\n            this.remainder = nextRemainder;\n        }\n\n        if (this.debug) {\n            this._debugBody.push(chunk);\n        }\n        this.bodyHash.update(chunk);\n    }\n\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n\n        if (typeof chunk === 'string') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        this.updateHash(chunk);\n\n        this.byteLength += chunk.length;\n        this.push(chunk);\n        callback();\n    }\n\n    _flush(callback) {\n        // generate final hash and emit it\n        if (/[\\r\\n]$/.test(this.remainder) && this.byteLength > 2) {\n            // add terminating line end\n            this.bodyHash.update(Buffer.from('\\r\\n'));\n        }\n        if (!this.byteLength) {\n            // emit empty line buffer to keep the stream flowing\n            this.push(Buffer.from('\\r\\n'));\n            // this.bodyHash.update(Buffer.from('\\r\\n'));\n        }\n\n        this.emit('hash', this.bodyHash.digest('base64'), this.debug ? Buffer.concat(this._debugBody) : false);\n        callback();\n    }\n}\n\nmodule.exports = RelaxedBody;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}