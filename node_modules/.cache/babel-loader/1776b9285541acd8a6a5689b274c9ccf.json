{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactJS\\\\DoAn_CN\\\\my-app\\\\src\\\\components\\\\Dashboard\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { Navbar } from \"../Layout/Navbar\";\nimport { Map } from \"../Layout/Caroucel\";\nimport Button from \"react-bootstrap/esm/Button\";\nimport React from \"react\";\nimport { NotificationContainer } from \"react-notifications\";\nimport { createNotification } from \"../Notifications/notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport { getPosts, createnewPost, DeletedPost, getOnePost, EditPost } from \"./postBehavior\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Dashboard = () => {\n  _s();\n\n  const [Post, setPost] = useState();\n  let nav = useNavigate();\n  const [createPost, setCreatePost] = useState({\n    title: \"\",\n    Des: \"\",\n    Url: \"\",\n    Behavior: \"Learning\",\n    user: localStorage.getItem(\"userid\")\n  }); // Edit Post\n\n  let [getPostEdit, setGetPostEdit] = useState(\" \");\n\n  const onchangeEdit = event => {\n    setGetPostEdit({ ...getPostEdit,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const onSubmitEdit = async res => {\n    try {\n      const GetEdit = await EditPost(getPostEdit);\n      console.log(\"Data\", GetEdit);\n\n      if (GetEdit.data.success) {\n        console.log(\"tt\", GetEdit.data.Message);\n        createNotification(\"warning\", GetEdit.data.Message);\n      }\n    } catch (error) {\n      createNotification(\"error\", \"Title can't be empty\");\n    }\n  };\n\n  const onchangeCreate = event => {\n    setCreatePost({ ...createPost,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const getallPost = async () => {\n    try {\n      const GetallPostzx = await getPosts(localStorage.getItem(\"token\"));\n\n      if (GetallPostzx.success) {\n        setPost(GetallPostzx.Post_of_User);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onclickGetonePost = async event => {\n    const getOneP = await getOnePost(event.target.value);\n\n    if (getOneP.success) {\n      setGetPostEdit(getOneP.posts);\n      getPostEdit = getOneP.posts;\n    }\n  };\n\n  const onSubmitCreate = async event => {\n    event.preventDefault();\n\n    try {\n      const onCreate = await createnewPost(createPost);\n\n      if (onCreate.data.success) {\n        createNotification(\"success\", \"Tạo post mới thành công\");\n      }\n    } catch (error) {\n      createNotification(\"error\", \"Title can't be empty\");\n    }\n  };\n\n  const RemovePost = async event => {\n    await DeletedPost(event.target.value);\n  };\n\n  useEffect(() => {\n    if (localStorage.getItem(\"token\") === null) {\n      return nav(\"/login\");\n    }\n\n    getallPost();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Dashboard, \"9CIquiRvSkC3EYeAWR9CesMxYus=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useNavigate","useEffect","useState","Navbar","Map","Button","React","NotificationContainer","createNotification","getPosts","createnewPost","DeletedPost","getOnePost","EditPost","Dashboard","Post","setPost","nav","createPost","setCreatePost","title","Des","Url","Behavior","user","localStorage","getItem","getPostEdit","setGetPostEdit","onchangeEdit","event","target","name","value","onSubmitEdit","res","GetEdit","console","log","data","success","Message","error","onchangeCreate","getallPost","GetallPostzx","Post_of_User","onclickGetonePost","getOneP","posts","onSubmitCreate","preventDefault","onCreate","RemovePost"],"sources":["D:/ReactJS/DoAn_CN/my-app/src/components/Dashboard/Dashboard.js"],"sourcesContent":["import { useNavigate } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Navbar } from \"../Layout/Navbar\";\r\nimport { Map } from \"../Layout/Caroucel\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport React from \"react\";\r\nimport { NotificationContainer } from \"react-notifications\";\r\nimport { createNotification } from \"../Notifications/notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport {\r\n  getPosts,\r\n  createnewPost,\r\n  DeletedPost,\r\n  getOnePost,\r\n  EditPost,\r\n} from \"./postBehavior\";\r\nexport const Dashboard = () => {\r\n  const [Post, setPost] = useState();\r\n  let nav = useNavigate();\r\n\r\n  const [createPost, setCreatePost] = useState({\r\n    title: \"\",\r\n    Des: \"\",\r\n    Url: \"\",\r\n    Behavior: \"Learning\",\r\n    user: localStorage.getItem(\"userid\"),\r\n  });\r\n\r\n  // Edit Post\r\n  let [getPostEdit, setGetPostEdit] = useState(\" \");\r\n\r\n  const onchangeEdit = (event) => {\r\n    setGetPostEdit({\r\n      ...getPostEdit,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const onSubmitEdit = async (res) => {\r\n    try {\r\n      const GetEdit = await EditPost(getPostEdit);\r\n      console.log(\"Data\", GetEdit);\r\n      if (GetEdit.data.success) {\r\n        console.log(\"tt\", GetEdit.data.Message);\r\n        createNotification(\"warning\", GetEdit.data.Message);\r\n      }\r\n    } catch (error) {\r\n      createNotification(\"error\", \"Title can't be empty\");\r\n    }\r\n  };\r\n\r\n  const onchangeCreate = (event) => {\r\n    setCreatePost({\r\n      ...createPost,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const getallPost = async () => {\r\n    try {\r\n      const GetallPostzx = await getPosts(localStorage.getItem(\"token\"));\r\n      if (GetallPostzx.success) {\r\n        setPost(GetallPostzx.Post_of_User);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const onclickGetonePost = async (event) => {\r\n    const getOneP = await getOnePost(event.target.value);\r\n    if (getOneP.success) {\r\n      setGetPostEdit(getOneP.posts);\r\n      getPostEdit = getOneP.posts;\r\n    }\r\n  };\r\n\r\n  const onSubmitCreate = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const onCreate = await createnewPost(createPost);\r\n      if (onCreate.data.success) {\r\n        createNotification(\"success\", \"Tạo post mới thành công\");\r\n      }\r\n    } catch (error) {\r\n      createNotification(\"error\", \"Title can't be empty\");\r\n    }\r\n  };\r\n  const RemovePost = async (event) => {\r\n    await DeletedPost(event.target.value);\r\n  };\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"token\") === null) {\r\n      return nav(\"/login\");\r\n    }\r\n    getallPost();\r\n  });\r\n  return (\r\n    <>\r\n      <Navbar></Navbar>\r\n      <h1>Dashboard</h1>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}