{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactJS\\\\DoAn_CN\\\\my-app\\\\src\\\\components\\\\LayoutConnectDB\\\\Layout.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Button from \"react-bootstrap/esm/Button\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { getPosts, initColumns, updateColumns, getAllColumns, initColumnOrder, getAllColumnOrder, updateColumnOrder } from \"../Dashboard/postBehavior\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LayoutDNDConnectDB = () => {\n  _s();\n\n  const [state, setstate] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [orderColumns, setOrderColumns] = useState([]);\n\n  const getallPost = async () => {\n    try {\n      const GetallPostzx = await getPosts(localStorage.getItem(\"token\"));\n\n      if (GetallPostzx.success) {\n        setstate(GetallPostzx.Post_of_User);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  let title = {\n    title: \"Process\"\n  };\n\n  const updatecolumnsinit = async () => {\n    let UpdateInit = {\n      _id: localStorage.getItem(\"IDinitColumns\"),\n      taskIds: []\n    };\n\n    for (let index = 0; index < state.length; index++) {\n      UpdateInit.taskIds.push(state[index]._id);\n    }\n\n    await updateColumns(UpdateInit);\n  };\n\n  const GetallCol = async () => {\n    const gAllCol = await (await getAllColumns()).data.getALlCol;\n    setColumns(gAllCol);\n  };\n\n  const getInitColumns = async () => {\n    const getInit = await initColumns(title);\n    localStorage.setItem(\"IDinitColumns\", getInit.data.newcolumns._id);\n    updatecolumnsinit();\n    GetallCol();\n    console.log(\"colum\", columns);\n    getInitColumnOrder();\n  };\n\n  const getInitColumnOrder = async () => {\n    console.log(\"colum after click\", columns);\n    const getInit = await initColumnOrder();\n    localStorage.setItem(\"IDinitColumnOrder\", getInit.data.newOrder._id);\n    updateOrderColumns();\n    getAllorderColumn();\n  };\n\n  const updateOrderColumns = async () => {\n    let UpdateInit = {\n      _id: localStorage.getItem(\"IDinitColumnOrder\"),\n      columOrder: []\n    };\n\n    for (let index = 0; index < columns.length; index++) {\n      UpdateInit.columOrder.push(columns[index]._id);\n    }\n\n    await updateColumnOrder(UpdateInit);\n  };\n\n  const getAllorderColumn = async () => {\n    const getALLOrder = (await getAllColumnOrder()).data.getALlColOrder[0].columOrder[0];\n    setOrderColumns([getALLOrder]);\n  };\n\n  useEffect(() => {\n    GetallCol();\n    getallPost(); // getAllorderColumn();\n  });\n\n  const onDragEnd = results => {};\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: getInitColumns,\n      children: \"init map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), console.log(\"colum\", columns), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: columns && columns.map((columID, index) => {\n        const colum = columns[index];\n        console.log(\"colum,index\", colum, index);\n        const task = colum.taskIds.map((taskIds, index) => console.log(\"index\", index));\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LayoutDNDConnectDB, \"3KCpe+qK8QLevu2Dz5Zehq97qJE=\");\n\n_c = LayoutDNDConnectDB;\nexport default LayoutDNDConnectDB;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutDNDConnectDB\");","map":{"version":3,"names":["useState","useEffect","Button","DragDropContext","getPosts","initColumns","updateColumns","getAllColumns","initColumnOrder","getAllColumnOrder","updateColumnOrder","LayoutDNDConnectDB","state","setstate","columns","setColumns","orderColumns","setOrderColumns","getallPost","GetallPostzx","localStorage","getItem","success","Post_of_User","error","console","log","title","updatecolumnsinit","UpdateInit","_id","taskIds","index","length","push","GetallCol","gAllCol","data","getALlCol","getInitColumns","getInit","setItem","newcolumns","getInitColumnOrder","newOrder","updateOrderColumns","getAllorderColumn","columOrder","getALLOrder","getALlColOrder","onDragEnd","results","map","columID","colum","task"],"sources":["D:/ReactJS/DoAn_CN/my-app/src/components/LayoutConnectDB/Layout.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport {\r\n  getPosts,\r\n  initColumns,\r\n  updateColumns,\r\n  getAllColumns,\r\n  initColumnOrder,\r\n  getAllColumnOrder,\r\n  updateColumnOrder,\r\n} from \"../Dashboard/postBehavior\";\r\nconst LayoutDNDConnectDB = () => {\r\n  const [state, setstate] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [orderColumns, setOrderColumns] = useState([]);\r\n  const getallPost = async () => {\r\n    try {\r\n      const GetallPostzx = await getPosts(localStorage.getItem(\"token\"));\r\n      if (GetallPostzx.success) {\r\n        setstate(GetallPostzx.Post_of_User);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  let title = {\r\n    title: \"Process\",\r\n  };\r\n\r\n  const updatecolumnsinit = async () => {\r\n    let UpdateInit = {\r\n      _id: localStorage.getItem(\"IDinitColumns\"),\r\n      taskIds: [],\r\n    };\r\n    for (let index = 0; index < state.length; index++) {\r\n      UpdateInit.taskIds.push(state[index]._id);\r\n    }\r\n    await updateColumns(UpdateInit);\r\n  };\r\n\r\n  const GetallCol = async () => {\r\n    const gAllCol = await (await getAllColumns()).data.getALlCol;\r\n    setColumns(gAllCol);\r\n  };\r\n\r\n  const getInitColumns = async () => {\r\n    const getInit = await initColumns(title);\r\n    localStorage.setItem(\"IDinitColumns\", getInit.data.newcolumns._id);\r\n    updatecolumnsinit();\r\n    GetallCol();\r\n    console.log(\"colum\", columns);\r\n    getInitColumnOrder();\r\n  };\r\n\r\n  const getInitColumnOrder = async () => {\r\n    console.log(\"colum after click\", columns);\r\n    const getInit = await initColumnOrder();\r\n    localStorage.setItem(\"IDinitColumnOrder\", getInit.data.newOrder._id);\r\n    updateOrderColumns();\r\n    getAllorderColumn();\r\n  };\r\n\r\n  const updateOrderColumns = async () => {\r\n    let UpdateInit = {\r\n      _id: localStorage.getItem(\"IDinitColumnOrder\"),\r\n      columOrder: [],\r\n    };\r\n    for (let index = 0; index < columns.length; index++) {\r\n      UpdateInit.columOrder.push(columns[index]._id);\r\n    }\r\n    await updateColumnOrder(UpdateInit);\r\n  };\r\n\r\n  const getAllorderColumn = async () => {\r\n    const getALLOrder = (await getAllColumnOrder()).data.getALlColOrder[0]\r\n      .columOrder[0];\r\n    setOrderColumns([getALLOrder]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    GetallCol();\r\n    getallPost();\r\n    // getAllorderColumn();\r\n  });\r\n  const onDragEnd = (results) => {};\r\n  return (\r\n    <>\r\n      <Button onClick={getInitColumns}>init map</Button>\r\n      {console.log(\"colum\", columns)}\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        {columns &&\r\n          columns.map((columID, index) => {\r\n            const colum = columns[index];\r\n            console.log(\"colum,index\", colum, index);\r\n            const task = colum.taskIds.map((taskIds, index) =>\r\n              console.log(\"index\", index)\r\n            );\r\n          })}\r\n      </DragDropContext>\r\n    </>\r\n  );\r\n};\r\nexport default LayoutDNDConnectDB;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}