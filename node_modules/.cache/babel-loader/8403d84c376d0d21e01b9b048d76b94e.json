{"ast":null,"code":"import { existsSync, open, read, closeSync, close } from 'fs';\nimport { hostname } from 'os';\nimport { Stream } from 'stream';\nimport { TextEncoder, TextDecoder } from 'util';\nimport { createHmac } from 'crypto';\nimport { EventEmitter } from 'events';\nimport { Socket } from 'net';\nimport { connect, TLSSocket, createSecureContext } from 'tls';\n/*\n * Operator tokens and which tokens are expected to end the sequence\n */\n\nconst OPERATORS = new Map([['\"', '\"'], ['(', ')'], ['<', '>'], [',', ''], // Groups are ended by semicolons\n[':', ';'], // Semicolons are not a legal delimiter per the RFC2822 grammar other\n// than for terminating a group, but they are also not valid for any\n// other use in this context.  Given that some mail clients have\n// historically allowed the semicolon as a delimiter equivalent to the\n// comma in their UI, it makes sense to treat them the same as a comma\n// when used outside of a group.\n[';', '']]);\n/**\n * Tokenizes the original input string\n *\n * @param {string | string[] | undefined} address string(s) to tokenize\n * @return {AddressToken[]} An array of operator|text tokens\n */\n\nfunction tokenizeAddress() {\n  let address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  var _a, _b;\n\n  const tokens = [];\n  let token = undefined;\n  let operator = undefined;\n\n  for (const character of address.toString()) {\n    if (((_a = operator === null || operator === void 0 ? void 0 : operator.length) !== null && _a !== void 0 ? _a : 0) > 0 && character === operator) {\n      tokens.push({\n        type: 'operator',\n        value: character\n      });\n      token = undefined;\n      operator = undefined;\n    } else if (((_b = operator === null || operator === void 0 ? void 0 : operator.length) !== null && _b !== void 0 ? _b : 0) === 0 && OPERATORS.has(character)) {\n      tokens.push({\n        type: 'operator',\n        value: character\n      });\n      token = undefined;\n      operator = OPERATORS.get(character);\n    } else {\n      if (token == null) {\n        token = {\n          type: 'text',\n          value: character\n        };\n        tokens.push(token);\n      } else {\n        token.value += character;\n      }\n    }\n  }\n\n  return tokens.map(x => {\n    x.value = x.value.trim();\n    return x;\n  }).filter(x => x.value.length > 0);\n}\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {AddressToken[]} tokens Tokens object\n * @return {AddressObject[]} addresses object array\n */\n\n\nfunction convertAddressTokens(tokens) {\n  const addressObjects = [];\n  const groups = [];\n  let addresses = [];\n  let comments = [];\n  let texts = [];\n  let state = 'text';\n  let isGroup = false;\n\n  function handleToken(token) {\n    if (token.type === 'operator') {\n      switch (token.value) {\n        case '<':\n          state = 'address';\n          break;\n\n        case '(':\n          state = 'comment';\n          break;\n\n        case ':':\n          state = 'group';\n          isGroup = true;\n          break;\n\n        default:\n          state = 'text';\n          break;\n      }\n    } else if (token.value.length > 0) {\n      switch (state) {\n        case 'address':\n          addresses.push(token.value);\n          break;\n\n        case 'comment':\n          comments.push(token.value);\n          break;\n\n        case 'group':\n          groups.push(token.value);\n          break;\n\n        default:\n          texts.push(token.value);\n          break;\n      }\n    }\n  } // Filter out <addresses>, (comments) and regular text\n\n\n  for (const token of tokens) {\n    handleToken(token);\n  } // If there is no text but a comment, replace the two\n\n\n  if (texts.length === 0 && comments.length > 0) {\n    texts = [...comments];\n    comments = [];\n  } // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n\n\n  if (isGroup) {\n    addressObjects.push({\n      name: texts.length === 0 ? undefined : texts.join(' '),\n      group: groups.length > 0 ? addressparser(groups.join(',')) : []\n    });\n  } else {\n    // If no address was found, try to detect one from regular text\n    if (addresses.length === 0 && texts.length > 0) {\n      for (let i = texts.length - 1; i >= 0; i--) {\n        if (texts[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n          addresses = texts.splice(i, 1);\n          break;\n        }\n      } // still no address\n\n\n      if (addresses.length === 0) {\n        for (let i = texts.length - 1; i >= 0; i--) {\n          texts[i] = texts[i].replace(/\\s*\\b[^@\\s]+@[^@\\s]+\\b\\s*/, address => {\n            if (addresses.length === 0) {\n              addresses = [address.trim()];\n              return ' ';\n            } else {\n              return address;\n            }\n          }).trim();\n\n          if (addresses.length > 0) {\n            break;\n          }\n        }\n      }\n    } // If there's still is no text but a comment exixts, replace the two\n\n\n    if (texts.length === 0 && comments.length > 0) {\n      texts = [...comments];\n      comments = [];\n    } // Keep only the first address occurence, push others to regular text\n\n\n    if (addresses.length > 1) {\n      texts = [...texts, ...addresses.splice(1)];\n    }\n\n    if (addresses.length === 0 && isGroup) {\n      return [];\n    } else {\n      // Join values with spaces\n      let address = addresses.join(' ');\n      let name = texts.length === 0 ? address : texts.join(' ');\n\n      if (address === name) {\n        if (address.match(/@/)) {\n          name = '';\n        } else {\n          address = '';\n        }\n      }\n\n      addressObjects.push({\n        address,\n        name\n      });\n    }\n  }\n\n  return addressObjects;\n}\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    \"Name <address@domain>\"\n *\n * will be converted to\n *\n *     [{name: \"Name\", address: \"address@domain\"}]\n *\n * @param {string | string[] | undefined} address Address field\n * @return {AddressObject[]} An array of address objects\n */\n\n\nfunction addressparser(address) {\n  const addresses = [];\n  let tokens = [];\n\n  for (const token of tokenizeAddress(address)) {\n    if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {\n      if (tokens.length > 0) {\n        addresses.push(...convertAddressTokens(tokens));\n      }\n\n      tokens = [];\n    } else {\n      tokens.push(token);\n    }\n  }\n\n  if (tokens.length > 0) {\n    addresses.push(...convertAddressTokens(tokens));\n  }\n\n  return addresses;\n}\n/**\n * @param {Date} [date] an optional date to convert to RFC2822 format\n * @param {boolean} [useUtc] whether to parse the date as UTC (default: false)\n * @returns {string} the converted date\n */\n\n\nfunction getRFC2822Date() {\n  let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  let useUtc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (useUtc) {\n    return getRFC2822DateUTC(date);\n  }\n\n  const dates = date.toString().replace('GMT', '').replace(/\\s\\(.*\\)$/, '').split(' ');\n  dates[0] = dates[0] + ',';\n  const day = dates[1];\n  dates[1] = dates[2];\n  dates[2] = day;\n  return dates.join(' ');\n}\n/**\n * @param {Date} [date] an optional date to convert to RFC2822 format (UTC)\n * @returns {string} the converted date\n */\n\n\nfunction getRFC2822DateUTC() {\n  let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  const dates = date.toUTCString().split(' ');\n  dates.pop(); // remove timezone\n\n  dates.push('+0000');\n  return dates.join(' ');\n}\n/**\n * RFC 2822 regex\n * @see https://tools.ietf.org/html/rfc2822#section-3.3\n * @see https://github.com/moment/moment/blob/a831fc7e2694281ce31e4f090bbcf90a690f0277/src/lib/create/from-string.js#L101\n */\n\n\nconst rfc2822re = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n/**\n * @param {string} [date] a string to check for conformance to the [rfc2822](https://tools.ietf.org/html/rfc2822#section-3.3) standard\n * @returns {boolean} the result of the conformance check\n */\n\nfunction isRFC2822Date(date) {\n  return rfc2822re.test(date);\n} // adapted from https://github.com/emailjs/emailjs-mime-codec/blob/6909c706b9f09bc0e5c3faf48f723cca53e5b352/src/mimecodec.js\n\n\nconst encoder = new TextEncoder();\n/**\n * @see https://tools.ietf.org/html/rfc2045#section-6.7\n */\n\nconst RANGES = [[0x09], [0x0a], [0x0d], [0x20, 0x3c], [0x3e, 0x7e] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n];\nconst LOOKUP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\nconst MAX_CHUNK_LENGTH = 16383; // must be multiple of 3\n\nconst MAX_MIME_WORD_LENGTH = 52;\nconst MAX_B64_MIME_WORD_BYTE_LENGTH = 39;\n\nfunction tripletToBase64(num) {\n  return LOOKUP[num >> 18 & 0x3f] + LOOKUP[num >> 12 & 0x3f] + LOOKUP[num >> 6 & 0x3f] + LOOKUP[num & 0x3f];\n}\n\nfunction encodeChunk(uint8, start, end) {\n  let output = '';\n\n  for (let i = start; i < end; i += 3) {\n    output += tripletToBase64((uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]);\n  }\n\n  return output;\n}\n\nfunction encodeBase64(data) {\n  const len = data.length;\n  const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n  let output = ''; // go through the array every three bytes, we'll deal with trailing stuff later\n\n  for (let i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {\n    output += encodeChunk(data, i, i + MAX_CHUNK_LENGTH > len2 ? len2 : i + MAX_CHUNK_LENGTH);\n  } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n  if (extraBytes === 1) {\n    const tmp = data[len - 1];\n    output += LOOKUP[tmp >> 2];\n    output += LOOKUP[tmp << 4 & 0x3f];\n    output += '==';\n  } else if (extraBytes === 2) {\n    const tmp = (data[len - 2] << 8) + data[len - 1];\n    output += LOOKUP[tmp >> 10];\n    output += LOOKUP[tmp >> 4 & 0x3f];\n    output += LOOKUP[tmp << 2 & 0x3f];\n    output += '=';\n  }\n\n  return output;\n}\n/**\n * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n *\n * @param {string} str Mime encoded string to be split up\n * @param {number} maxlen Maximum length of characters for one part (minimum 12)\n * @return {string[]} lines\n */\n\n\nfunction splitMimeEncodedString(str) {\n  let maxlen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n  const minWordLength = 12; // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n\n  const maxWordLength = Math.max(maxlen, minWordLength);\n  const lines = [];\n\n  while (str.length) {\n    let curLine = str.substr(0, maxWordLength);\n    const match = curLine.match(/=[0-9A-F]?$/i); // skip incomplete escaped char\n\n    if (match) {\n      curLine = curLine.substr(0, match.index);\n    }\n\n    let done = false;\n\n    while (!done) {\n      let chr;\n      done = true;\n      const match = str.substr(curLine.length).match(/^=([0-9A-F]{2})/i); // check if not middle of a unicode char sequence\n\n      if (match) {\n        chr = parseInt(match[1], 16); // invalid sequence, move one char back anc recheck\n\n        if (chr < 0xc2 && chr > 0x7f) {\n          curLine = curLine.substr(0, curLine.length - 3);\n          done = false;\n        }\n      }\n    }\n\n    if (curLine.length) {\n      lines.push(curLine);\n    }\n\n    str = str.substr(curLine.length);\n  }\n\n  return lines;\n}\n/**\n *\n * @param {number} nr number\n * @returns {boolean} if number is in range\n */\n\n\nfunction checkRanges(nr) {\n  return RANGES.reduce((val, range) => val || range.length === 1 && nr === range[0] || range.length === 2 && nr >= range[0] && nr <= range[1], false);\n}\n/**\n * Encodes all non printable and non ascii bytes to =XX form, where XX is the\n * byte value in hex. This function does not convert linebreaks etc. it\n * only escapes character sequences\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data Either a string or an Uint8Array\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Mime encoded string\n */\n\n\nfunction mimeEncode() {\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf-8';\n  const decoder = new TextDecoder(encoding);\n  const buffer = typeof data === 'string' ? encoder.encode(data) : encoder.encode(decoder.decode(data));\n  return buffer.reduce((aggregate, ord, index) => checkRanges(ord) && !((ord === 0x20 || ord === 0x09) && (index === buffer.length - 1 || buffer[index + 1] === 0x0a || buffer[index + 1] === 0x0d)) ? // if the char is in allowed range, then keep as is, unless it is a ws in the end of a line\n  aggregate + String.fromCharCode(ord) : `${aggregate}=${ord < 0x10 ? '0' : ''}${ord.toString(16).toUpperCase()}`, '');\n}\n/**\n * Encodes a string or an Uint8Array to an UTF-8 MIME Word\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://tools.ietf.org/html/rfc2047\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data String to be encoded\n * @param {'Q' | 'B'} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Single or several mime words joined together\n */\n\n\nfunction mimeWordEncode(data) {\n  let mimeWordEncoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Q';\n  let encoding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'utf-8';\n  let parts = [];\n  const decoder = new TextDecoder(encoding);\n  const str = typeof data === 'string' ? data : decoder.decode(data);\n\n  if (mimeWordEncoding === 'Q') {\n    const encodedStr = mimeEncode(str, encoding).replace(/[^a-z0-9!*+\\-/=]/gi, chr => chr === ' ' ? '_' : '=' + (chr.charCodeAt(0) < 0x10 ? '0' : '') + chr.charCodeAt(0).toString(16).toUpperCase());\n    parts = encodedStr.length < MAX_MIME_WORD_LENGTH ? [encodedStr] : splitMimeEncodedString(encodedStr, MAX_MIME_WORD_LENGTH);\n  } else {\n    // Fits as much as possible into every line without breaking utf-8 multibyte characters' octets up across lines\n    let j = 0;\n    let i = 0;\n\n    while (i < str.length) {\n      if (encoder.encode(str.substring(j, i)).length > MAX_B64_MIME_WORD_BYTE_LENGTH) {\n        // we went one character too far, substring at the char before\n        parts.push(str.substring(j, i - 1));\n        j = i - 1;\n      } else {\n        i++;\n      }\n    } // add the remainder of the string\n\n\n    str.substring(j) && parts.push(str.substring(j));\n    parts = parts.map(x => encoder.encode(x)).map(x => encodeBase64(x));\n  }\n\n  return parts.map(p => `=?UTF-8?${mimeWordEncoding}?${p}?= `).join('').trim();\n}\n\nconst CRLF$1 = '\\r\\n';\n/**\n * MIME standard wants 76 char chunks when sending out.\n */\n\nconst MIMECHUNK = 76;\n/**\n * meets both base64 and mime divisibility\n */\n\nconst MIME64CHUNK = MIMECHUNK * 6;\n/**\n * size of the message stream buffer\n */\n\nconst BUFFERSIZE = MIMECHUNK * 24 * 7;\nlet counter = 0;\n\nfunction generateBoundary() {\n  let text = '';\n  const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'()+_,-./:=?\";\n\n  for (let i = 0; i < 69; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return text;\n}\n\nfunction convertPersonToAddress(person) {\n  return addressparser(person).map(_ref => {\n    let {\n      name,\n      address\n    } = _ref;\n    return name ? `${mimeWordEncode(name).replace(/,/g, '=2C')} <${address}>` : address;\n  }).join(', ');\n}\n\nfunction convertDashDelimitedTextToSnakeCase(text) {\n  return text.toLowerCase().replace(/^(.)|-(.)/g, match => match.toUpperCase());\n}\n\nclass Message {\n  /**\n   * Construct an rfc2822-compliant message object.\n   *\n   * Special notes:\n   * - The `from` field is required.\n   * - At least one `to`, `cc`, or `bcc` header is also required.\n   * - You can also add whatever other headers you want.\n   *\n   * @see https://tools.ietf.org/html/rfc2822\n   * @param {Partial<MessageHeaders>} headers Message headers\n   */\n  constructor(headers) {\n    this.attachments = [];\n    this.header = {\n      'message-id': `<${new Date().getTime()}.${counter++}.${process.pid}@${hostname()}>`,\n      date: getRFC2822Date()\n    };\n    this.content = 'text/plain; charset=utf-8';\n    this.alternative = null;\n\n    for (const header in headers) {\n      // allow user to override default content-type to override charset or send a single non-text message\n      if (/^content-type$/i.test(header)) {\n        this.content = headers[header];\n      } else if (header === 'text') {\n        this.text = headers[header];\n      } else if (header === 'attachment' && typeof headers[header] === 'object') {\n        const attachment = headers[header];\n\n        if (Array.isArray(attachment)) {\n          for (let i = 0; i < attachment.length; i++) {\n            this.attach(attachment[i]);\n          }\n        } else if (attachment != null) {\n          this.attach(attachment);\n        }\n      } else if (header === 'subject') {\n        this.header.subject = mimeWordEncode(headers.subject);\n      } else if (/^(cc|bcc|to|from)/i.test(header)) {\n        this.header[header.toLowerCase()] = convertPersonToAddress(headers[header]);\n      } else {\n        // allow any headers the user wants to set??\n        this.header[header.toLowerCase()] = headers[header];\n      }\n    }\n  }\n  /**\n   * Attach a file to the message.\n   *\n   * Can be called multiple times, each adding a new attachment.\n   *\n   * @public\n   * @param {MessageAttachment} options attachment options\n   * @returns {Message} the current instance for chaining\n   */\n\n\n  attach(options) {\n    // sender can specify an attachment as an alternative\n    if (options.alternative) {\n      this.alternative = options;\n      this.alternative.charset = options.charset || 'utf-8';\n      this.alternative.type = options.type || 'text/html';\n      this.alternative.inline = true;\n    } else {\n      this.attachments.push(options);\n    }\n\n    return this;\n  }\n  /**\n   * @public\n   * @returns {{ isValid: boolean, validationError: (string | undefined) }} an object specifying whether this message is validly formatted, and the first validation error if it is not.\n   */\n\n\n  checkValidity() {\n    if (typeof this.header.from !== 'string' && Array.isArray(this.header.from) === false) {\n      return {\n        isValid: false,\n        validationError: 'Message must have a `from` header'\n      };\n    }\n\n    if (typeof this.header.to !== 'string' && Array.isArray(this.header.to) === false && typeof this.header.cc !== 'string' && Array.isArray(this.header.cc) === false && typeof this.header.bcc !== 'string' && Array.isArray(this.header.bcc) === false) {\n      return {\n        isValid: false,\n        validationError: 'Message must have at least one `to`, `cc`, or `bcc` header'\n      };\n    }\n\n    if (this.attachments.length > 0) {\n      const failed = [];\n      this.attachments.forEach(attachment => {\n        if (attachment.path) {\n          if (existsSync(attachment.path) === false) {\n            failed.push(`${attachment.path} does not exist`);\n          }\n        } else if (attachment.stream) {\n          if (!attachment.stream.readable) {\n            failed.push('attachment stream is not readable');\n          }\n        } else if (!attachment.data) {\n          failed.push('attachment has no data associated with it');\n        }\n      });\n      return {\n        isValid: failed.length === 0,\n        validationError: failed.join(', ')\n      };\n    }\n\n    return {\n      isValid: true,\n      validationError: undefined\n    };\n  }\n  /**\n   * @public\n   * @deprecated does not conform to the `errback` style followed by the rest of the library, and will be removed in the next major version. use `checkValidity` instead.\n   * @param {function(isValid: boolean, invalidReason: (string | undefined)): void} callback .\n   * @returns {void}\n   */\n\n\n  valid(callback) {\n    const {\n      isValid,\n      validationError\n    } = this.checkValidity();\n    callback(isValid, validationError);\n  }\n  /**\n   * @public\n   * @returns {MessageStream} a stream of the current message\n   */\n\n\n  stream() {\n    return new MessageStream(this);\n  }\n  /**\n   * @public\n   * @param {function(Error, string): void} callback the function to call with the error and buffer\n   * @returns {void}\n   */\n\n\n  read(callback) {\n    let buffer = '';\n    const str = this.stream();\n    str.on('data', data => buffer += data);\n    str.on('end', err => callback(err, buffer));\n    str.on('error', err => callback(err, buffer));\n  }\n\n  readAsync() {\n    return new Promise((resolve, reject) => {\n      this.read((err, buffer) => {\n        if (err != null) {\n          reject(err);\n        } else {\n          resolve(buffer);\n        }\n      });\n    });\n  }\n\n}\n\nclass MessageStream extends Stream {\n  /**\n   * @param {Message} message the message to stream\n   */\n  constructor(message) {\n    super();\n    this.message = message;\n    this.readable = true;\n    this.paused = false;\n    this.buffer = Buffer.alloc(MIMECHUNK * 24 * 7);\n    this.bufferIndex = 0;\n    /**\n     * @param {string} [data] the data to output\n     * @param {Function} [callback] the function\n     * @param {any[]} [args] array of arguments to pass to the callback\n     * @returns {void}\n     */\n\n    const output = data => {\n      // can we buffer the data?\n      if (this.buffer != null) {\n        const bytes = Buffer.byteLength(data);\n\n        if (bytes + this.bufferIndex < this.buffer.length) {\n          this.buffer.write(data, this.bufferIndex);\n          this.bufferIndex += bytes;\n        } // we can't buffer the data, so ship it out!\n        else if (bytes > this.buffer.length) {\n          if (this.bufferIndex) {\n            this.emit('data', this.buffer.toString('utf-8', 0, this.bufferIndex));\n            this.bufferIndex = 0;\n          }\n\n          const loops = Math.ceil(data.length / this.buffer.length);\n          let loop = 0;\n\n          while (loop < loops) {\n            this.emit('data', data.substring(this.buffer.length * loop, this.buffer.length * (loop + 1)));\n            loop++;\n          }\n        } // we need to clean out the buffer, it is getting full\n        else {\n          if (!this.paused) {\n            this.emit('data', this.buffer.toString('utf-8', 0, this.bufferIndex));\n            this.buffer.write(data, 0);\n            this.bufferIndex = bytes;\n          } else {\n            // we can't empty out the buffer, so let's wait till we resume before adding to it\n            this.once('resume', () => output(data));\n          }\n        }\n      }\n    };\n    /**\n     * @param {MessageAttachment} [attachment] the attachment whose headers you would like to output\n     * @returns {void}\n     */\n\n\n    const outputAttachmentHeaders = attachment => {\n      let data = [];\n      const headers = {\n        'content-type': attachment.type + (attachment.charset ? `; charset=${attachment.charset}` : '') + (attachment.method ? `; method=${attachment.method}` : ''),\n        'content-transfer-encoding': 'base64',\n        'content-disposition': attachment.inline ? 'inline' : `attachment; filename=\"${mimeWordEncode(attachment.name)}\"`\n      }; // allow sender to override default headers\n\n      if (attachment.headers != null) {\n        for (const header in attachment.headers) {\n          headers[header.toLowerCase()] = attachment.headers[header];\n        }\n      }\n\n      for (const header in headers) {\n        data = data.concat([convertDashDelimitedTextToSnakeCase(header), ': ', headers[header], CRLF$1]);\n      }\n\n      output(data.concat([CRLF$1]).join(''));\n    };\n    /**\n     * @param {string} data the data to output as base64\n     * @param {function(): void} [callback] the function to call after output is finished\n     * @returns {void}\n     */\n\n\n    const outputBase64 = (data, callback) => {\n      const loops = Math.ceil(data.length / MIMECHUNK);\n      let loop = 0;\n\n      while (loop < loops) {\n        output(data.substring(MIMECHUNK * loop, MIMECHUNK * (loop + 1)) + CRLF$1);\n        loop++;\n      }\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    const outputFile = (attachment, next) => {\n      var _a;\n\n      const chunk = MIME64CHUNK * 16;\n      const buffer = Buffer.alloc(chunk);\n      const inputEncoding = ((_a = attachment === null || attachment === void 0 ? void 0 : attachment.headers) === null || _a === void 0 ? void 0 : _a['content-transfer-encoding']) || 'base64';\n      const encoding = inputEncoding === '7bit' ? 'ascii' : inputEncoding === '8bit' ? 'binary' : inputEncoding;\n      /**\n       * @param {Error} err the error to emit\n       * @param {number} fd the file descriptor\n       * @returns {void}\n       */\n\n      const opened = (err, fd) => {\n        if (err) {\n          this.emit('error', err);\n          return;\n        }\n\n        const readBytes = (err, bytes) => {\n          if (err || this.readable === false) {\n            this.emit('error', err || new Error('message stream was interrupted somehow!'));\n            return;\n          } // guaranteed to be encoded without padding unless it is our last read\n\n\n          outputBase64(buffer.toString(encoding, 0, bytes), () => {\n            if (bytes == chunk) {\n              // we read a full chunk, there might be more\n              read(fd, buffer, 0, chunk, null, readBytes);\n            } // that was the last chunk, we are done reading the file\n            else {\n              this.removeListener('error', closeSync);\n              close(fd, next);\n            }\n          });\n        };\n\n        read(fd, buffer, 0, chunk, null, readBytes);\n        this.once('error', closeSync);\n      };\n\n      open(attachment.path, 'r', opened);\n    };\n    /**\n     * @param {MessageAttachment} attachment the metadata to use as headers\n     * @param {function(): void} callback the function to call after output is finished\n     * @returns {void}\n     */\n\n\n    const outputStream = (attachment, callback) => {\n      const {\n        stream\n      } = attachment;\n\n      if (stream === null || stream === void 0 ? void 0 : stream.readable) {\n        let previous = Buffer.alloc(0);\n        stream.resume();\n        stream.on('end', () => {\n          outputBase64(previous.toString('base64'), callback);\n          this.removeListener('pause', stream.pause);\n          this.removeListener('resume', stream.resume);\n          this.removeListener('error', stream.resume);\n        });\n        stream.on('data', buff => {\n          // do we have bytes from a previous stream data event?\n          let buffer = Buffer.isBuffer(buff) ? buff : Buffer.from(buff);\n\n          if (previous.byteLength > 0) {\n            buffer = Buffer.concat([previous, buffer]);\n          }\n\n          const padded = buffer.length % MIME64CHUNK;\n          previous = Buffer.alloc(padded); // encode as much of the buffer to base64 without empty bytes\n\n          if (padded > 0) {\n            // copy dangling bytes into previous buffer\n            buffer.copy(previous, 0, buffer.length - padded);\n          }\n\n          outputBase64(buffer.toString('base64', 0, buffer.length - padded));\n        });\n        this.on('pause', stream.pause);\n        this.on('resume', stream.resume);\n        this.on('error', stream.resume);\n      } else {\n        this.emit('error', {\n          message: 'stream not readable'\n        });\n      }\n    };\n\n    const outputAttachment = (attachment, callback) => {\n      const build = attachment.path ? outputFile : attachment.stream ? outputStream : outputData;\n      outputAttachmentHeaders(attachment);\n      build(attachment, callback);\n    };\n    /**\n     * @param {string} boundary the boundary text between outputs\n     * @param {MessageAttachment[]} list the list of potential messages to output\n     * @param {number} index the index of the list item to output\n     * @param {function(): void} callback the function to call if index is greater than upper bound\n     * @returns {void}\n     */\n\n\n    const outputMessage = (boundary, list, index, callback) => {\n      if (index < list.length) {\n        output(`--${boundary}${CRLF$1}`);\n\n        if (list[index].related) {\n          outputRelated(list[index], () => outputMessage(boundary, list, index + 1, callback));\n        } else {\n          outputAttachment(list[index], () => outputMessage(boundary, list, index + 1, callback));\n        }\n      } else {\n        output(`${CRLF$1}--${boundary}--${CRLF$1}${CRLF$1}`);\n        callback();\n      }\n    };\n\n    const outputMixed = () => {\n      const boundary = generateBoundary();\n      output(`Content-Type: multipart/mixed; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n\n      if (this.message.alternative == null) {\n        outputText(this.message);\n        outputMessage(boundary, this.message.attachments, 0, close$1);\n      } else {\n        outputAlternative( // typescript bug; should narrow to { alternative: MessageAttachment }\n        this.message, () => outputMessage(boundary, this.message.attachments, 0, close$1));\n      }\n    };\n    /**\n     * @param {MessageAttachment} attachment the metadata to use as headers\n     * @param {function(): void} callback the function to call after output is finished\n     * @returns {void}\n     */\n\n\n    const outputData = (attachment, callback) => {\n      var _a, _b;\n\n      outputBase64(attachment.encoded ? (_a = attachment.data) !== null && _a !== void 0 ? _a : '' : Buffer.from((_b = attachment.data) !== null && _b !== void 0 ? _b : '').toString('base64'), callback);\n    };\n    /**\n     * @param {Message} message the message to output\n     * @returns {void}\n     */\n\n\n    const outputText = message => {\n      let data = [];\n      data = data.concat(['Content-Type:', message.content, CRLF$1, 'Content-Transfer-Encoding: 7bit', CRLF$1]);\n      data = data.concat(['Content-Disposition: inline', CRLF$1, CRLF$1]);\n      data = data.concat([message.text || '', CRLF$1, CRLF$1]);\n      output(data.join(''));\n    };\n    /**\n     * @param {MessageAttachment} message the message to output\n     * @param {function(): void} callback the function to call after output is finished\n     * @returns {void}\n     */\n\n\n    const outputRelated = (message, callback) => {\n      const boundary = generateBoundary();\n      output(`Content-Type: multipart/related; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n      outputAttachment(message, () => {\n        var _a;\n\n        outputMessage(boundary, (_a = message.related) !== null && _a !== void 0 ? _a : [], 0, () => {\n          output(`${CRLF$1}--${boundary}--${CRLF$1}${CRLF$1}`);\n          callback();\n        });\n      });\n    };\n    /**\n     * @param {Message} message the message to output\n     * @param {function(): void} callback the function to call after output is finished\n     * @returns {void}\n     */\n\n\n    const outputAlternative = (message, callback) => {\n      const boundary = generateBoundary();\n      output(`Content-Type: multipart/alternative; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n      outputText(message);\n      output(`--${boundary}${CRLF$1}`);\n      /**\n       * @returns {void}\n       */\n\n      const finish = () => {\n        output([CRLF$1, '--', boundary, '--', CRLF$1, CRLF$1].join(''));\n        callback();\n      };\n\n      if (message.alternative.related) {\n        outputRelated(message.alternative, finish);\n      } else {\n        outputAttachment(message.alternative, finish);\n      }\n    };\n\n    const close$1 = err => {\n      var _a, _b;\n\n      if (err) {\n        this.emit('error', err);\n      } else {\n        this.emit('data', (_b = (_a = this.buffer) === null || _a === void 0 ? void 0 : _a.toString('utf-8', 0, this.bufferIndex)) !== null && _b !== void 0 ? _b : '');\n        this.emit('end');\n      }\n\n      this.buffer = null;\n      this.bufferIndex = 0;\n      this.readable = false;\n      this.removeAllListeners('resume');\n      this.removeAllListeners('pause');\n      this.removeAllListeners('error');\n      this.removeAllListeners('data');\n      this.removeAllListeners('end');\n    };\n    /**\n     * @returns {void}\n     */\n\n\n    const outputHeaderData = () => {\n      if (this.message.attachments.length || this.message.alternative) {\n        output(`MIME-Version: 1.0${CRLF$1}`);\n        outputMixed();\n      } // you only have a text message!\n      else {\n        outputText(this.message);\n        close$1();\n      }\n    };\n    /**\n     * @returns {void}\n     */\n\n\n    const outputHeader = () => {\n      let data = [];\n\n      for (const header in this.message.header) {\n        // do not output BCC in the headers (regex) nor custom Object.prototype functions...\n        if (!/bcc/i.test(header) && Object.prototype.hasOwnProperty.call(this.message.header, header)) {\n          data = data.concat([convertDashDelimitedTextToSnakeCase(header), ': ', this.message.header[header], CRLF$1]);\n        }\n      }\n\n      output(data.join(''));\n      outputHeaderData();\n    };\n\n    this.once('destroy', close$1);\n    process.nextTick(outputHeader);\n  }\n  /**\n   * @public\n   * pause the stream\n   * @returns {void}\n   */\n\n\n  pause() {\n    this.paused = true;\n    this.emit('pause');\n  }\n  /**\n   * @public\n   * resume the stream\n   * @returns {void}\n   */\n\n\n  resume() {\n    this.paused = false;\n    this.emit('resume');\n  }\n  /**\n   * @public\n   * destroy the stream\n   * @returns {void}\n   */\n\n\n  destroy() {\n    this.emit('destroy', this.bufferIndex > 0 ? {\n      message: 'message stream destroyed'\n    } : null);\n  }\n  /**\n   * @public\n   * destroy the stream at first opportunity\n   * @returns {void}\n   */\n\n\n  destroySoon() {\n    this.emit('destroy');\n  }\n\n}\n/**\n * @readonly\n * @enum\n */\n\n\nconst SMTPErrorStates = {\n  COULDNOTCONNECT: 1,\n  BADRESPONSE: 2,\n  AUTHFAILED: 3,\n  TIMEDOUT: 4,\n  ERROR: 5,\n  NOCONNECTION: 6,\n  AUTHNOTSUPPORTED: 7,\n  CONNECTIONCLOSED: 8,\n  CONNECTIONENDED: 9,\n  CONNECTIONAUTH: 10\n};\n\nclass SMTPError extends Error {\n  /**\n   * @protected\n   * @param {string} message error message\n   */\n  constructor(message) {\n    super(message);\n    this.code = null;\n    this.smtp = null;\n    this.previous = null;\n  }\n  /**\n   *\n   * @param {string} message error message\n   * @param {number} code smtp error state\n   * @param {Error | null} error previous error\n   * @param {unknown} smtp arbitrary data\n   * @returns {SMTPError} error\n   */\n\n\n  static create(message, code, error, smtp) {\n    const msg = (error === null || error === void 0 ? void 0 : error.message) ? `${message} (${error.message})` : message;\n    const err = new SMTPError(msg);\n    err.code = code;\n    err.smtp = smtp;\n\n    if (error) {\n      err.previous = error;\n    }\n\n    return err;\n  }\n\n}\n\nclass SMTPResponseMonitor {\n  constructor(stream, timeout, onerror) {\n    let buffer = '';\n\n    const notify = () => {\n      var _a, _b;\n\n      if (buffer.length) {\n        // parse buffer for response codes\n        const line = buffer.replace('\\r', '');\n\n        if (!((_b = (_a = line.trim().split(/\\n/).pop()) === null || _a === void 0 ? void 0 : _a.match(/^(\\d{3})\\s/)) !== null && _b !== void 0 ? _b : false)) {\n          return;\n        }\n\n        const match = line ? line.match(/(\\d+)\\s?(.*)/) : null;\n        const data = match !== null ? {\n          code: match[1],\n          message: match[2],\n          data: line\n        } : {\n          code: -1,\n          data: line\n        };\n        stream.emit('response', null, data);\n        buffer = '';\n      }\n    };\n\n    const error = err => {\n      stream.emit('response', SMTPError.create('connection encountered an error', SMTPErrorStates.ERROR, err));\n    };\n\n    const timedout = err => {\n      stream.end();\n      stream.emit('response', SMTPError.create('timedout while connecting to smtp server', SMTPErrorStates.TIMEDOUT, err));\n    };\n\n    const watch = data => {\n      if (data !== null) {\n        buffer += data.toString();\n        notify();\n      }\n    };\n\n    const close = err => {\n      stream.emit('response', SMTPError.create('connection has closed', SMTPErrorStates.CONNECTIONCLOSED, err));\n    };\n\n    const end = err => {\n      stream.emit('response', SMTPError.create('connection has ended', SMTPErrorStates.CONNECTIONENDED, err));\n    };\n\n    this.stop = err => {\n      stream.removeAllListeners('response');\n      stream.removeListener('data', watch);\n      stream.removeListener('end', end);\n      stream.removeListener('close', close);\n      stream.removeListener('error', error);\n\n      if (err != null && typeof onerror === 'function') {\n        onerror(err);\n      }\n    };\n\n    stream.on('data', watch);\n    stream.on('end', end);\n    stream.on('close', close);\n    stream.on('error', error);\n    stream.setTimeout(timeout, timedout);\n  }\n\n}\n/**\n * @readonly\n * @enum\n */\n\n\nconst AUTH_METHODS = {\n  PLAIN: 'PLAIN',\n  'CRAM-MD5': 'CRAM-MD5',\n  LOGIN: 'LOGIN',\n  XOAUTH2: 'XOAUTH2'\n};\n/**\n * @readonly\n * @enum\n */\n\nconst SMTPState = {\n  NOTCONNECTED: 0,\n  CONNECTING: 1,\n  CONNECTED: 2\n};\nconst DEFAULT_TIMEOUT = 5000;\nconst SMTP_PORT = 25;\nconst SMTP_SSL_PORT = 465;\nconst SMTP_TLS_PORT = 587;\nconst CRLF = '\\r\\n';\nconst GREYLIST_DELAY = 300;\nlet DEBUG = 0;\n/**\n * @param {...any[]} args the message(s) to log\n * @returns {void}\n */\n\nconst log = function () {\n  if (DEBUG === 1) {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    args.forEach(d => console.log(typeof d === 'object' ? d instanceof Error ? d.message : JSON.stringify(d) : d));\n  }\n};\n/**\n * @param {function(...any[]): void} callback the function to call\n * @param {...any[]} args the arguments to apply to the function\n * @returns {void}\n */\n\n\nconst caller = function (callback) {\n  if (typeof callback === 'function') {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    callback(...args);\n  }\n};\n\nclass SMTPConnection extends EventEmitter {\n  /**\n   * SMTP class written using python's (2.7) smtplib.py as a base.\n   *\n   * To target a Message Transfer Agent (MTA), omit all options.\n   *\n   * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n   */\n  constructor() {\n    let {\n      timeout,\n      host,\n      user,\n      password,\n      domain,\n      port,\n      ssl,\n      tls,\n      logger,\n      authentication\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _a;\n\n    super();\n    this.timeout = DEFAULT_TIMEOUT;\n    this.log = log;\n    this.authentication = [AUTH_METHODS['CRAM-MD5'], AUTH_METHODS.LOGIN, AUTH_METHODS.PLAIN, AUTH_METHODS.XOAUTH2];\n    this._state = SMTPState.NOTCONNECTED;\n    this._secure = false;\n    this.loggedin = false;\n    this.sock = null;\n    this.features = null;\n    this.monitor = null;\n    this.domain = hostname();\n    this.host = 'localhost';\n    this.ssl = false;\n    this.tls = false;\n    this.greylistResponseTracker = new WeakSet();\n\n    if (Array.isArray(authentication)) {\n      this.authentication = authentication;\n    }\n\n    if (typeof timeout === 'number') {\n      this.timeout = timeout;\n    }\n\n    if (typeof domain === 'string') {\n      this.domain = domain;\n    }\n\n    if (typeof host === 'string') {\n      this.host = host;\n    }\n\n    if (ssl != null && (typeof ssl === 'boolean' || typeof ssl === 'object' && Array.isArray(ssl) === false)) {\n      this.ssl = ssl;\n    }\n\n    if (tls != null && (typeof tls === 'boolean' || typeof tls === 'object' && Array.isArray(tls) === false)) {\n      this.tls = tls;\n    }\n\n    this.port = port || (ssl ? SMTP_SSL_PORT : tls ? SMTP_TLS_PORT : SMTP_PORT);\n    this.loggedin = user && password ? false : true;\n\n    if (!user && ((_a = password === null || password === void 0 ? void 0 : password.length) !== null && _a !== void 0 ? _a : 0) > 0) {\n      throw new Error('`password` cannot be set without `user`');\n    } // keep these strings hidden when quicky debugging/logging\n\n\n    this.user = () => user;\n\n    this.password = () => password;\n\n    if (typeof logger === 'function') {\n      this.log = log;\n    }\n  }\n  /**\n   * @public\n   * @param {0 | 1} level -\n   * @returns {void}\n   */\n\n\n  debug(level) {\n    DEBUG = level;\n  }\n  /**\n   * @public\n   * @returns {SMTPState} the current state\n   */\n\n\n  state() {\n    return this._state;\n  }\n  /**\n   * @public\n   * @returns {boolean} whether or not the instance is authorized\n   */\n\n\n  authorized() {\n    return this.loggedin;\n  }\n  /**\n   * Establish an SMTP connection.\n   *\n   * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n   *\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {number} [port] the port to use for the connection\n   * @param {string} [host] the hostname to use for the connection\n   * @param {ConnectOptions} [options={}] the options\n   * @returns {void}\n   */\n\n\n  connect(callback) {\n    let port = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.port;\n    let host = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.host;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    this.port = port;\n    this.host = host;\n    this.ssl = options.ssl || this.ssl;\n\n    if (this._state !== SMTPState.NOTCONNECTED) {\n      this.quit(() => this.connect(callback, port, host, options));\n    }\n    /**\n     * @returns {void}\n     */\n\n\n    const connected = () => {\n      this.log(`connected: ${this.host}:${this.port}`);\n\n      if (this.ssl && !this.tls) {\n        // if key/ca/cert was passed in, check if connection is authorized\n        if (typeof this.ssl !== 'boolean' && this.sock instanceof TLSSocket && !this.sock.authorized) {\n          this.close(true);\n          caller(callback, SMTPError.create('could not establish an ssl connection', SMTPErrorStates.CONNECTIONAUTH));\n        } else {\n          this._secure = true;\n        }\n      }\n    };\n    /**\n     * @param {Error} err err\n     * @returns {void}\n     */\n\n\n    const connectedErrBack = err => {\n      if (!err) {\n        connected();\n      } else {\n        this.close(true);\n        this.log(err);\n        caller(callback, SMTPError.create('could not connect', SMTPErrorStates.COULDNOTCONNECT, err));\n      }\n    };\n\n    const response = (err, msg) => {\n      if (err) {\n        if (this._state === SMTPState.NOTCONNECTED && !this.sock) {\n          return;\n        }\n\n        this.close(true);\n        caller(callback, err);\n      } else if (msg.code == '220') {\n        this.log(msg.data); // might happen first, so no need to wait on connected()\n\n        this._state = SMTPState.CONNECTED;\n        caller(callback, null, msg.data);\n      } else {\n        this.log(`response (data): ${msg.data}`);\n        this.quit(() => {\n          caller(callback, SMTPError.create('bad response on connection', SMTPErrorStates.BADRESPONSE, err, msg.data));\n        });\n      }\n    };\n\n    this._state = SMTPState.CONNECTING;\n    this.log(`connecting: ${this.host}:${this.port}`);\n\n    if (this.ssl) {\n      this.sock = connect(this.port, this.host.trim(), typeof this.ssl === 'object' ? this.ssl : {}, connected);\n    } else {\n      this.sock = new Socket();\n      this.sock.connect(this.port, this.host.trim(), connectedErrBack);\n    }\n\n    this.monitor = new SMTPResponseMonitor(this.sock, this.timeout, () => this.close(true));\n    this.sock.once('response', response);\n    this.sock.once('error', response); // the socket could reset or throw, so let's handle it and let the user know\n  }\n  /**\n   * @public\n   * @param {string} str the string to send\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  send(str, callback) {\n    if (this.sock != null && this._state === SMTPState.CONNECTED) {\n      this.log(str);\n      this.sock.once('response', (err, msg) => {\n        if (err) {\n          caller(callback, err);\n        } else {\n          this.log(msg.data);\n          caller(callback, null, msg);\n        }\n      });\n\n      if (this.sock.writable) {\n        this.sock.write(str);\n      }\n    } else {\n      this.close(true);\n      caller(callback, SMTPError.create('no connection has been established', SMTPErrorStates.NOCONNECTION));\n    }\n  }\n  /**\n   * @public\n   * @param {string} cmd command to issue\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {(number[] | number)} [codes=[250]] array codes\n   * @returns {void}\n   */\n\n\n  command(cmd, callback) {\n    let codes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [250];\n    const codesArray = Array.isArray(codes) ? codes : typeof codes === 'number' ? [codes] : [250];\n\n    const response = (err, msg) => {\n      if (err) {\n        caller(callback, err);\n      } else {\n        const code = Number(msg.code);\n\n        if (codesArray.indexOf(code) !== -1) {\n          caller(callback, err, msg.data, msg.message);\n        } else if ((code === 450 || code === 451) && msg.message.toLowerCase().includes('greylist') && this.greylistResponseTracker.has(response) === false) {\n          this.greylistResponseTracker.add(response);\n          setTimeout(() => {\n            this.send(cmd + CRLF, response);\n          }, GREYLIST_DELAY);\n        } else {\n          const suffix = msg.message ? `: ${msg.message}` : '';\n          const errorMessage = `bad response on command '${cmd.split(' ')[0]}'${suffix}`;\n          caller(callback, SMTPError.create(errorMessage, SMTPErrorStates.BADRESPONSE, null, msg.data));\n        }\n      }\n    };\n\n    this.greylistResponseTracker.delete(response);\n    this.send(cmd + CRLF, response);\n  }\n  /**\n   * @public\n   * @description SMTP 'helo' command.\n   *\n   * Hostname to send for self command defaults to the FQDN of the local\n   * host.\n   *\n   * As this command was deprecated by rfc2821, it should only be used for compatibility with non-compliant servers.\n   * @see https://tools.ietf.org/html/rfc2821#appendix-F.3\n   *\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} domain the domain to associate with the 'helo' request\n   * @returns {void}\n   */\n\n\n  helo(callback, domain) {\n    this.command(`helo ${domain || this.domain}`, (err, data) => {\n      if (err) {\n        caller(callback, err);\n      } else {\n        this.parse_smtp_features(data);\n        caller(callback, err, data);\n      }\n    });\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  starttls(callback) {\n    const response = (err, msg) => {\n      if (this.sock == null) {\n        throw new Error('null socket');\n      }\n\n      if (err) {\n        err.message += ' while establishing a starttls session';\n        caller(callback, err);\n      } else {\n        const secureContext = createSecureContext(typeof this.tls === 'object' ? this.tls : {});\n        const secureSocket = new TLSSocket(this.sock, {\n          secureContext\n        });\n        secureSocket.on('error', err => {\n          this.close(true);\n          caller(callback, err);\n        });\n        this._secure = true;\n        this.sock = secureSocket;\n        new SMTPResponseMonitor(this.sock, this.timeout, () => this.close(true));\n        caller(callback, msg.data);\n      }\n    };\n\n    this.command('starttls', response, [220]);\n  }\n  /**\n   * @public\n   * @param {string} data the string to parse for features\n   * @returns {void}\n   */\n\n\n  parse_smtp_features(data) {\n    //  According to RFC1869 some (badly written)\n    //  MTA's will disconnect on an ehlo. Toss an exception if\n    //  that happens -ddm\n    data.split('\\n').forEach(ext => {\n      const parse = ext.match(/^(?:\\d+[-=]?)\\s*?([^\\s]+)(?:\\s+(.*)\\s*?)?$/); // To be able to communicate with as many SMTP servers as possible,\n      // we have to take the old-style auth advertisement into account,\n      // because:\n      // 1) Else our SMTP feature parser gets confused.\n      // 2) There are some servers that only advertise the auth methods we\n      // support using the old style.\n\n      if (parse != null && this.features != null) {\n        // RFC 1869 requires a space between ehlo keyword and parameters.\n        // It's actually stricter, in that only spaces are allowed between\n        // parameters, but were not going to check for that here.  Note\n        // that the space isn't present if there are no parameters.\n        this.features[parse[1].toLowerCase()] = parse[2] || true;\n      }\n    });\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} domain the domain to associate with the 'ehlo' request\n   * @returns {void}\n   */\n\n\n  ehlo(callback, domain) {\n    this.features = {};\n    this.command(`ehlo ${domain || this.domain}`, (err, data) => {\n      if (err) {\n        caller(callback, err);\n      } else {\n        this.parse_smtp_features(data);\n\n        if (this.tls && !this._secure) {\n          this.starttls(() => this.ehlo(callback, domain));\n        } else {\n          caller(callback, err, data);\n        }\n      }\n    });\n  }\n  /**\n   * @public\n   * @param {string} opt the features keyname to check\n   * @returns {boolean} whether the extension exists\n   */\n\n\n  has_extn(opt) {\n    var _a;\n\n    return ((_a = this.features) !== null && _a !== void 0 ? _a : {})[opt.toLowerCase()] === undefined;\n  }\n  /**\n   * @public\n   * @description SMTP 'help' command, returns text from the server\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} domain the domain to associate with the 'help' request\n   * @returns {void}\n   */\n\n\n  help(callback, domain) {\n    this.command(domain ? `help ${domain}` : 'help', callback, [211, 214]);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  rset(callback) {\n    this.command('rset', callback);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  noop(callback) {\n    this.send('noop', callback);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} from the sender\n   * @returns {void}\n   */\n\n\n  mail(callback, from) {\n    this.command(`mail FROM:${from}`, callback);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} to the receiver\n   * @returns {void}\n   */\n\n\n  rcpt(callback, to) {\n    this.command(`RCPT TO:${to}`, callback, [250, 251]);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  data(callback) {\n    this.command('data', callback, [354]);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  data_end(callback) {\n    this.command(`${CRLF}.`, callback);\n  }\n  /**\n   * @public\n   * @param {string} data the message to send\n   * @returns {void}\n   */\n\n\n  message(data) {\n    var _a, _b;\n\n    this.log(data);\n    (_b = (_a = this.sock) === null || _a === void 0 ? void 0 : _a.write(data)) !== null && _b !== void 0 ? _b : this.log('no socket to write to');\n  }\n  /**\n   * @public\n   * @description SMTP 'verify' command -- checks for address validity.\n   * @param {string} address the address to validate\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  verify(address, callback) {\n    this.command(`vrfy ${address}`, callback, [250, 251, 252]);\n  }\n  /**\n   * @public\n   * @description SMTP 'expn' command -- expands a mailing list.\n   * @param {string} address the mailing list to expand\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  expn(address, callback) {\n    this.command(`expn ${address}`, callback);\n  }\n  /**\n   * @public\n   * @description Calls this.ehlo() and, if an error occurs, this.helo().\n   *\n   * If there has been no previous EHLO or HELO command self session, self\n   * method tries ESMTP EHLO first.\n   *\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} [domain] the domain to associate with the command\n   * @returns {void}\n   */\n\n\n  ehlo_or_helo_if_needed(callback, domain) {\n    // is this code callable...?\n    if (!this.features) {\n      const response = (err, data) => caller(callback, err, data);\n\n      this.ehlo((err, data) => {\n        if (err) {\n          this.helo(response, domain);\n        } else {\n          caller(callback, err, data);\n        }\n      }, domain);\n    }\n  }\n  /**\n   * @public\n   *\n   * Log in on an SMTP server that requires authentication.\n   *\n   * If there has been no previous EHLO or HELO command self session, self\n   * method tries ESMTP EHLO first.\n   *\n   * This method will return normally if the authentication was successful.\n   *\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} [user] the username to authenticate with\n   * @param {string} [password] the password for the authentication\n   * @param {{ method: string, domain: string }} [options] login options\n   * @returns {void}\n   */\n\n\n  login(callback, user, password) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    var _a, _b;\n\n    const login = {\n      user: user ? () => user : this.user,\n      password: password ? () => password : this.password,\n      method: (_b = (_a = options === null || options === void 0 ? void 0 : options.method) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : ''\n    };\n    const domain = (options === null || options === void 0 ? void 0 : options.domain) || this.domain;\n\n    const initiate = (err, data) => {\n      var _a;\n\n      if (err) {\n        caller(callback, err);\n        return;\n      }\n\n      let method = null;\n      /**\n       * @param {string} challenge challenge\n       * @returns {string} base64 cram hash\n       */\n\n      const encodeCramMd5 = challenge => {\n        const hmac = createHmac('md5', login.password());\n        hmac.update(Buffer.from(challenge, 'base64').toString('ascii'));\n        return Buffer.from(`${login.user()} ${hmac.digest('hex')}`).toString('base64');\n      };\n      /**\n       * @returns {string} base64 login/password\n       */\n\n\n      const encodePlain = () => Buffer.from(`\\u0000${login.user()}\\u0000${login.password()}`).toString('base64');\n      /**\n       * @see https://developers.google.com/gmail/xoauth2_protocol\n       * @returns {string} base64 xoauth2 auth token\n       */\n\n\n      const encodeXoauth2 = () => Buffer.from(`user=${login.user()}\\u0001auth=Bearer ${login.password()}\\u0001\\u0001`).toString('base64'); // List of authentication methods we support: from preferred to\n      // less preferred methods.\n\n\n      if (!method) {\n        const preferred = this.authentication;\n        let auth = '';\n\n        if (typeof ((_a = this.features) === null || _a === void 0 ? void 0 : _a['auth']) === 'string') {\n          auth = this.features['auth'];\n        }\n\n        for (let i = 0; i < preferred.length; i++) {\n          if (auth.includes(preferred[i])) {\n            method = preferred[i];\n            break;\n          }\n        }\n      }\n      /**\n       * handle bad responses from command differently\n       * @param {Error} err err\n       * @param {unknown} data data\n       * @returns {void}\n       */\n\n\n      const failed = (err, data) => {\n        this.loggedin = false;\n        this.close(); // if auth is bad, close the connection, it won't get better by itself\n\n        caller(callback, SMTPError.create('authorization.failed', SMTPErrorStates.AUTHFAILED, err, data));\n      };\n      /**\n       * @param {Error} err err\n       * @param {unknown} data data\n       * @returns {void}\n       */\n\n\n      const response = (err, data) => {\n        if (err) {\n          failed(err, data);\n        } else {\n          this.loggedin = true;\n          caller(callback, err, data);\n        }\n      };\n      /**\n       * @param {Error} err err\n       * @param {unknown} data data\n       * @param {string} msg msg\n       * @returns {void}\n       */\n\n\n      const attempt = (err, data, msg) => {\n        if (err) {\n          failed(err, data);\n        } else {\n          if (method === AUTH_METHODS['CRAM-MD5']) {\n            this.command(encodeCramMd5(msg), response, [235, 503]);\n          } else if (method === AUTH_METHODS.LOGIN) {\n            this.command(Buffer.from(login.password()).toString('base64'), response, [235, 503]);\n          }\n        }\n      };\n      /**\n       * @param {Error} err err\n       * @param {unknown} data data\n       * @param {string} msg msg\n       * @returns {void}\n       */\n\n\n      const attemptUser = (err, data) => {\n        if (err) {\n          failed(err, data);\n        } else {\n          if (method === AUTH_METHODS.LOGIN) {\n            this.command(Buffer.from(login.user()).toString('base64'), attempt, [334]);\n          }\n        }\n      };\n\n      switch (method) {\n        case AUTH_METHODS['CRAM-MD5']:\n          this.command(`AUTH  ${AUTH_METHODS['CRAM-MD5']}`, attempt, [334]);\n          break;\n\n        case AUTH_METHODS.LOGIN:\n          this.command(`AUTH ${AUTH_METHODS.LOGIN}`, attemptUser, [334]);\n          break;\n\n        case AUTH_METHODS.PLAIN:\n          this.command(`AUTH ${AUTH_METHODS.PLAIN} ${encodePlain()}`, response, [235, 503]);\n          break;\n\n        case AUTH_METHODS.XOAUTH2:\n          this.command(`AUTH ${AUTH_METHODS.XOAUTH2} ${encodeXoauth2()}`, response, [235, 503]);\n          break;\n\n        default:\n          caller(callback, SMTPError.create('no form of authorization supported', SMTPErrorStates.AUTHNOTSUPPORTED, null, data));\n          break;\n      }\n    };\n\n    this.ehlo_or_helo_if_needed(initiate, domain);\n  }\n  /**\n   * @public\n   * @param {boolean} [force=false] whether or not to force destroy the connection\n   * @returns {void}\n   */\n\n\n  close() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (this.sock) {\n      if (force) {\n        this.log('smtp connection destroyed!');\n        this.sock.destroy();\n      } else {\n        this.log('smtp connection closed.');\n        this.sock.end();\n      }\n    }\n\n    if (this.monitor) {\n      this.monitor.stop();\n      this.monitor = null;\n    }\n\n    this._state = SMTPState.NOTCONNECTED;\n    this._secure = false;\n    this.sock = null;\n    this.features = null;\n    this.loggedin = !(this.user() && this.password());\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} [callback] function to call after response\n   * @returns {void}\n   */\n\n\n  quit(callback) {\n    this.command('quit', (err, data) => {\n      caller(callback, err, data);\n      this.close();\n    }, [221, 250]);\n  }\n\n}\n\nclass SMTPClient {\n  /**\n   * Create a standard SMTP client backed by a self-managed SMTP connection.\n   *\n   * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n   *\n   * @param {SMTPConnectionOptions} server smtp options\n   */\n  constructor(server) {\n    this.queue = [];\n    this.sending = false;\n    this.ready = false;\n    this.timer = null;\n    this.smtp = new SMTPConnection(server);\n  }\n  /**\n   * @public\n   * @template {Message | MessageHeaders} T\n   * @param {T} msg the message to send\n   * @param {MessageCallback<T>} callback receiver for the error (if any) as well as the passed-in message / headers\n   * @returns {void}\n   */\n\n\n  send(msg, callback) {\n    const message = msg instanceof Message ? msg : this._canMakeMessage(msg) ? new Message(msg) : null;\n\n    if (message == null) {\n      callback(new Error('message is not a valid Message instance'), msg);\n      return;\n    }\n\n    const {\n      isValid,\n      validationError\n    } = message.checkValidity();\n\n    if (isValid) {\n      const stack = this.createMessageStack(message, callback);\n\n      if (stack.to.length === 0) {\n        return callback(new Error('No recipients found in message'), msg);\n      }\n\n      this.queue.push(stack);\n\n      this._poll();\n    } else {\n      callback(new Error(validationError), msg);\n    }\n  }\n  /**\n   * @public\n   * @template {Message | MessageHeaders} T\n   * @param {T} msg the message to send\n   * @returns {Promise<T>} a promise that resolves to the passed-in message / headers\n   */\n\n\n  sendAsync(msg) {\n    return new Promise((resolve, reject) => {\n      this.send(msg, (err, message) => {\n        if (err != null) {\n          reject(err);\n        } else {\n          // unfortunately, the conditional type doesn't reach here\n          // fortunately, we only return a `Message` when err is null, so this is safe\n          resolve(message);\n        }\n      });\n    });\n  }\n  /**\n   * @public\n   * @description Converts a message to the raw object used by the internal stack.\n   * @param {Message} message message to convert\n   * @param {MessageCallback} callback errback\n   * @returns {MessageStack} raw message object\n   */\n\n\n  createMessageStack(message) {\n    let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n      /* ø */\n    };\n    const [{\n      address: from\n    }] = addressparser(message.header.from);\n    const stack = {\n      message,\n      to: [],\n      from,\n      callback: callback.bind(this)\n    };\n    const {\n      header: {\n        to,\n        cc,\n        bcc,\n        'return-path': returnPath\n      }\n    } = message;\n\n    if ((typeof to === 'string' || Array.isArray(to)) && to.length > 0) {\n      stack.to = addressparser(to);\n    }\n\n    if ((typeof cc === 'string' || Array.isArray(cc)) && cc.length > 0) {\n      stack.to = stack.to.concat(addressparser(cc).filter(x => stack.to.some(y => y.address === x.address) === false));\n    }\n\n    if ((typeof bcc === 'string' || Array.isArray(bcc)) && bcc.length > 0) {\n      stack.to = stack.to.concat(addressparser(bcc).filter(x => stack.to.some(y => y.address === x.address) === false));\n    }\n\n    if (typeof returnPath === 'string' && returnPath.length > 0) {\n      const parsedReturnPath = addressparser(returnPath);\n\n      if (parsedReturnPath.length > 0) {\n        const [{\n          address: returnPathAddress\n        }] = parsedReturnPath;\n        stack.returnPath = returnPathAddress;\n      }\n    }\n\n    return stack;\n  }\n  /**\n   * @protected\n   * @returns {void}\n   */\n\n\n  _poll() {\n    if (this.timer != null) {\n      clearTimeout(this.timer);\n    }\n\n    if (this.queue.length) {\n      if (this.smtp.state() == SMTPState.NOTCONNECTED) {\n        this._connect(this.queue[0]);\n      } else if (this.smtp.state() == SMTPState.CONNECTED && !this.sending && this.ready) {\n        this._sendmail(this.queue.shift());\n      }\n    } // wait around 1 seconds in case something does come in,\n    // otherwise close out SMTP connection if still open\n    else if (this.smtp.state() == SMTPState.CONNECTED) {\n      this.timer = setTimeout(() => this.smtp.quit(), 1000);\n    }\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n\n\n  _connect(stack) {\n    /**\n     * @param {Error} err callback error\n     * @returns {void}\n     */\n    const connect = err => {\n      if (!err) {\n        const begin = err => {\n          if (!err) {\n            this.ready = true;\n\n            this._poll();\n          } else {\n            stack.callback(err, stack.message); // clear out the queue so all callbacks can be called with the same error message\n\n            this.queue.shift();\n\n            this._poll();\n          }\n        };\n\n        if (!this.smtp.authorized()) {\n          this.smtp.login(begin);\n        } else {\n          this.smtp.ehlo_or_helo_if_needed(begin);\n        }\n      } else {\n        stack.callback(err, stack.message); // clear out the queue so all callbacks can be called with the same error message\n\n        this.queue.shift();\n\n        this._poll();\n      }\n    };\n\n    this.ready = false;\n    this.smtp.connect(connect);\n  }\n  /**\n   * @protected\n   * @param {MessageStack} msg message stack\n   * @returns {boolean} can make message\n   */\n\n\n  _canMakeMessage(msg) {\n    return msg.from && (msg.to || msg.cc || msg.bcc) && (msg.text !== undefined || this._containsInlinedHtml(msg.attachment));\n  }\n  /**\n   * @protected\n   * @param {MessageAttachment | MessageAttachment[]} attachment attachment\n   * @returns {boolean} whether the attachment contains inlined html\n   */\n\n\n  _containsInlinedHtml(attachment) {\n    if (Array.isArray(attachment)) {\n      return attachment.some(att => {\n        return this._isAttachmentInlinedHtml(att);\n      });\n    } else {\n      return this._isAttachmentInlinedHtml(attachment);\n    }\n  }\n  /**\n   * @protected\n   * @param {MessageAttachment} attachment attachment\n   * @returns {boolean} whether the attachment is inlined html\n   */\n\n\n  _isAttachmentInlinedHtml(attachment) {\n    return attachment && (attachment.data || attachment.path) && attachment.alternative === true;\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @param {function(MessageStack): void} next next\n   * @returns {function(Error): void} callback\n   */\n\n\n  _sendsmtp(stack, next) {\n    /**\n     * @param {Error} [err] error\n     * @returns {void}\n     */\n    return err => {\n      if (!err && next) {\n        next.apply(this, [stack]);\n      } else {\n        // if we snag on SMTP commands, call done, passing the error\n        // but first reset SMTP state so queue can continue polling\n        this.smtp.rset(() => this._senddone(err, stack));\n      }\n    };\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n\n\n  _sendmail(stack) {\n    const from = stack.returnPath || stack.from;\n    this.sending = true;\n    this.smtp.mail(this._sendsmtp(stack, this._sendrcpt), '<' + from + '>');\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n\n\n  _sendrcpt(stack) {\n    var _a;\n\n    if (stack.to == null || typeof stack.to === 'string') {\n      throw new TypeError('stack.to must be array');\n    }\n\n    const to = (_a = stack.to.shift()) === null || _a === void 0 ? void 0 : _a.address;\n    this.smtp.rcpt(this._sendsmtp(stack, stack.to.length ? this._sendrcpt : this._senddata), `<${to}>`);\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n\n\n  _senddata(stack) {\n    this.smtp.data(this._sendsmtp(stack, this._sendmessage));\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n\n\n  _sendmessage(stack) {\n    const stream = stack.message.stream();\n    stream.on('data', data => this.smtp.message(data));\n    stream.on('end', () => {\n      this.smtp.data_end(this._sendsmtp(stack, () => this._senddone(null, stack)));\n    }); // there is no way to cancel a message while in the DATA portion,\n    // so we have to close the socket to prevent a bad email from going out\n\n    stream.on('error', err => {\n      this.smtp.close();\n\n      this._senddone(err, stack);\n    });\n  }\n  /**\n   * @protected\n   * @param {Error} err err\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n\n\n  _senddone(err, stack) {\n    this.sending = false;\n    stack.callback(err, stack.message);\n\n    this._poll();\n  }\n\n}\n\nexport { AUTH_METHODS, BUFFERSIZE, DEFAULT_TIMEOUT, MIME64CHUNK, MIMECHUNK, Message, SMTPClient, SMTPConnection, SMTPError, SMTPErrorStates, SMTPResponseMonitor, SMTPState, addressparser, getRFC2822Date, getRFC2822DateUTC, isRFC2822Date, mimeEncode, mimeWordEncode };","map":{"version":3,"names":["existsSync","open","read","closeSync","close","hostname","Stream","TextEncoder","TextDecoder","createHmac","EventEmitter","Socket","connect","TLSSocket","createSecureContext","OPERATORS","Map","tokenizeAddress","address","_a","_b","tokens","token","undefined","operator","character","toString","length","push","type","value","has","get","map","x","trim","filter","convertAddressTokens","addressObjects","groups","addresses","comments","texts","state","isGroup","handleToken","name","join","group","addressparser","i","match","splice","replace","getRFC2822Date","date","Date","useUtc","getRFC2822DateUTC","dates","split","day","toUTCString","pop","rfc2822re","isRFC2822Date","test","encoder","RANGES","LOOKUP","MAX_CHUNK_LENGTH","MAX_MIME_WORD_LENGTH","MAX_B64_MIME_WORD_BYTE_LENGTH","tripletToBase64","num","encodeChunk","uint8","start","end","output","encodeBase64","data","len","extraBytes","len2","tmp","splitMimeEncodedString","str","maxlen","minWordLength","maxWordLength","Math","max","lines","curLine","substr","index","done","chr","parseInt","checkRanges","nr","reduce","val","range","mimeEncode","encoding","decoder","buffer","encode","decode","aggregate","ord","String","fromCharCode","toUpperCase","mimeWordEncode","mimeWordEncoding","parts","encodedStr","charCodeAt","j","substring","p","CRLF$1","MIMECHUNK","MIME64CHUNK","BUFFERSIZE","counter","generateBoundary","text","possible","charAt","floor","random","convertPersonToAddress","person","convertDashDelimitedTextToSnakeCase","toLowerCase","Message","constructor","headers","attachments","header","getTime","process","pid","content","alternative","attachment","Array","isArray","attach","subject","options","charset","inline","checkValidity","from","isValid","validationError","to","cc","bcc","failed","forEach","path","stream","readable","valid","callback","MessageStream","on","err","readAsync","Promise","resolve","reject","message","paused","Buffer","alloc","bufferIndex","bytes","byteLength","write","emit","loops","ceil","loop","once","outputAttachmentHeaders","method","concat","outputBase64","outputFile","next","chunk","inputEncoding","opened","fd","readBytes","Error","removeListener","outputStream","previous","resume","pause","buff","isBuffer","padded","copy","outputAttachment","build","outputData","outputMessage","boundary","list","related","outputRelated","outputMixed","outputText","close$1","outputAlternative","encoded","finish","removeAllListeners","outputHeaderData","outputHeader","Object","prototype","hasOwnProperty","call","nextTick","destroy","destroySoon","SMTPErrorStates","COULDNOTCONNECT","BADRESPONSE","AUTHFAILED","TIMEDOUT","ERROR","NOCONNECTION","AUTHNOTSUPPORTED","CONNECTIONCLOSED","CONNECTIONENDED","CONNECTIONAUTH","SMTPError","code","smtp","create","error","msg","SMTPResponseMonitor","timeout","onerror","notify","line","timedout","watch","stop","setTimeout","AUTH_METHODS","PLAIN","LOGIN","XOAUTH2","SMTPState","NOTCONNECTED","CONNECTING","CONNECTED","DEFAULT_TIMEOUT","SMTP_PORT","SMTP_SSL_PORT","SMTP_TLS_PORT","CRLF","GREYLIST_DELAY","DEBUG","log","args","d","console","JSON","stringify","caller","SMTPConnection","host","user","password","domain","port","ssl","tls","logger","authentication","_state","_secure","loggedin","sock","features","monitor","greylistResponseTracker","WeakSet","debug","level","authorized","quit","connected","connectedErrBack","response","send","writable","command","cmd","codes","codesArray","Number","indexOf","includes","add","suffix","errorMessage","delete","helo","parse_smtp_features","starttls","secureContext","secureSocket","ext","parse","ehlo","has_extn","opt","help","rset","noop","mail","rcpt","data_end","verify","expn","ehlo_or_helo_if_needed","login","initiate","encodeCramMd5","challenge","hmac","update","digest","encodePlain","encodeXoauth2","preferred","auth","attempt","attemptUser","force","SMTPClient","server","queue","sending","ready","timer","_canMakeMessage","stack","createMessageStack","_poll","sendAsync","bind","returnPath","some","y","parsedReturnPath","returnPathAddress","clearTimeout","_connect","_sendmail","shift","begin","_containsInlinedHtml","att","_isAttachmentInlinedHtml","_sendsmtp","apply","_senddone","_sendrcpt","TypeError","_senddata","_sendmessage"],"sources":["D:/ReactJS/DoAn_CN/my-app/node_modules/emailjs/email.js"],"sourcesContent":["import { existsSync, open, read, closeSync, close } from 'fs';\nimport { hostname } from 'os';\nimport { Stream } from 'stream';\nimport { TextEncoder, TextDecoder } from 'util';\nimport { createHmac } from 'crypto';\nimport { EventEmitter } from 'events';\nimport { Socket } from 'net';\nimport { connect, TLSSocket, createSecureContext } from 'tls';\n\n/*\n * Operator tokens and which tokens are expected to end the sequence\n */\nconst OPERATORS = new Map([\n    ['\"', '\"'],\n    ['(', ')'],\n    ['<', '>'],\n    [',', ''],\n    // Groups are ended by semicolons\n    [':', ';'],\n    // Semicolons are not a legal delimiter per the RFC2822 grammar other\n    // than for terminating a group, but they are also not valid for any\n    // other use in this context.  Given that some mail clients have\n    // historically allowed the semicolon as a delimiter equivalent to the\n    // comma in their UI, it makes sense to treat them the same as a comma\n    // when used outside of a group.\n    [';', ''],\n]);\n/**\n * Tokenizes the original input string\n *\n * @param {string | string[] | undefined} address string(s) to tokenize\n * @return {AddressToken[]} An array of operator|text tokens\n */\nfunction tokenizeAddress(address = '') {\n    var _a, _b;\n    const tokens = [];\n    let token = undefined;\n    let operator = undefined;\n    for (const character of address.toString()) {\n        if (((_a = operator === null || operator === void 0 ? void 0 : operator.length) !== null && _a !== void 0 ? _a : 0) > 0 && character === operator) {\n            tokens.push({ type: 'operator', value: character });\n            token = undefined;\n            operator = undefined;\n        }\n        else if (((_b = operator === null || operator === void 0 ? void 0 : operator.length) !== null && _b !== void 0 ? _b : 0) === 0 && OPERATORS.has(character)) {\n            tokens.push({ type: 'operator', value: character });\n            token = undefined;\n            operator = OPERATORS.get(character);\n        }\n        else {\n            if (token == null) {\n                token = { type: 'text', value: character };\n                tokens.push(token);\n            }\n            else {\n                token.value += character;\n            }\n        }\n    }\n    return tokens\n        .map((x) => {\n        x.value = x.value.trim();\n        return x;\n    })\n        .filter((x) => x.value.length > 0);\n}\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {AddressToken[]} tokens Tokens object\n * @return {AddressObject[]} addresses object array\n */\nfunction convertAddressTokens(tokens) {\n    const addressObjects = [];\n    const groups = [];\n    let addresses = [];\n    let comments = [];\n    let texts = [];\n    let state = 'text';\n    let isGroup = false;\n    function handleToken(token) {\n        if (token.type === 'operator') {\n            switch (token.value) {\n                case '<':\n                    state = 'address';\n                    break;\n                case '(':\n                    state = 'comment';\n                    break;\n                case ':':\n                    state = 'group';\n                    isGroup = true;\n                    break;\n                default:\n                    state = 'text';\n                    break;\n            }\n        }\n        else if (token.value.length > 0) {\n            switch (state) {\n                case 'address':\n                    addresses.push(token.value);\n                    break;\n                case 'comment':\n                    comments.push(token.value);\n                    break;\n                case 'group':\n                    groups.push(token.value);\n                    break;\n                default:\n                    texts.push(token.value);\n                    break;\n            }\n        }\n    }\n    // Filter out <addresses>, (comments) and regular text\n    for (const token of tokens) {\n        handleToken(token);\n    }\n    // If there is no text but a comment, replace the two\n    if (texts.length === 0 && comments.length > 0) {\n        texts = [...comments];\n        comments = [];\n    }\n    // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n    if (isGroup) {\n        addressObjects.push({\n            name: texts.length === 0 ? undefined : texts.join(' '),\n            group: groups.length > 0 ? addressparser(groups.join(',')) : [],\n        });\n    }\n    else {\n        // If no address was found, try to detect one from regular text\n        if (addresses.length === 0 && texts.length > 0) {\n            for (let i = texts.length - 1; i >= 0; i--) {\n                if (texts[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n                    addresses = texts.splice(i, 1);\n                    break;\n                }\n            }\n            // still no address\n            if (addresses.length === 0) {\n                for (let i = texts.length - 1; i >= 0; i--) {\n                    texts[i] = texts[i]\n                        .replace(/\\s*\\b[^@\\s]+@[^@\\s]+\\b\\s*/, (address) => {\n                        if (addresses.length === 0) {\n                            addresses = [address.trim()];\n                            return ' ';\n                        }\n                        else {\n                            return address;\n                        }\n                    })\n                        .trim();\n                    if (addresses.length > 0) {\n                        break;\n                    }\n                }\n            }\n        }\n        // If there's still is no text but a comment exixts, replace the two\n        if (texts.length === 0 && comments.length > 0) {\n            texts = [...comments];\n            comments = [];\n        }\n        // Keep only the first address occurence, push others to regular text\n        if (addresses.length > 1) {\n            texts = [...texts, ...addresses.splice(1)];\n        }\n        if (addresses.length === 0 && isGroup) {\n            return [];\n        }\n        else {\n            // Join values with spaces\n            let address = addresses.join(' ');\n            let name = texts.length === 0 ? address : texts.join(' ');\n            if (address === name) {\n                if (address.match(/@/)) {\n                    name = '';\n                }\n                else {\n                    address = '';\n                }\n            }\n            addressObjects.push({ address, name });\n        }\n    }\n    return addressObjects;\n}\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    \"Name <address@domain>\"\n *\n * will be converted to\n *\n *     [{name: \"Name\", address: \"address@domain\"}]\n *\n * @param {string | string[] | undefined} address Address field\n * @return {AddressObject[]} An array of address objects\n */\nfunction addressparser(address) {\n    const addresses = [];\n    let tokens = [];\n    for (const token of tokenizeAddress(address)) {\n        if (token.type === 'operator' &&\n            (token.value === ',' || token.value === ';')) {\n            if (tokens.length > 0) {\n                addresses.push(...convertAddressTokens(tokens));\n            }\n            tokens = [];\n        }\n        else {\n            tokens.push(token);\n        }\n    }\n    if (tokens.length > 0) {\n        addresses.push(...convertAddressTokens(tokens));\n    }\n    return addresses;\n}\n\n/**\n * @param {Date} [date] an optional date to convert to RFC2822 format\n * @param {boolean} [useUtc] whether to parse the date as UTC (default: false)\n * @returns {string} the converted date\n */\nfunction getRFC2822Date(date = new Date(), useUtc = false) {\n    if (useUtc) {\n        return getRFC2822DateUTC(date);\n    }\n    const dates = date\n        .toString()\n        .replace('GMT', '')\n        .replace(/\\s\\(.*\\)$/, '')\n        .split(' ');\n    dates[0] = dates[0] + ',';\n    const day = dates[1];\n    dates[1] = dates[2];\n    dates[2] = day;\n    return dates.join(' ');\n}\n/**\n * @param {Date} [date] an optional date to convert to RFC2822 format (UTC)\n * @returns {string} the converted date\n */\nfunction getRFC2822DateUTC(date = new Date()) {\n    const dates = date.toUTCString().split(' ');\n    dates.pop(); // remove timezone\n    dates.push('+0000');\n    return dates.join(' ');\n}\n/**\n * RFC 2822 regex\n * @see https://tools.ietf.org/html/rfc2822#section-3.3\n * @see https://github.com/moment/moment/blob/a831fc7e2694281ce31e4f090bbcf90a690f0277/src/lib/create/from-string.js#L101\n */\nconst rfc2822re = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n/**\n * @param {string} [date] a string to check for conformance to the [rfc2822](https://tools.ietf.org/html/rfc2822#section-3.3) standard\n * @returns {boolean} the result of the conformance check\n */\nfunction isRFC2822Date(date) {\n    return rfc2822re.test(date);\n}\n\n// adapted from https://github.com/emailjs/emailjs-mime-codec/blob/6909c706b9f09bc0e5c3faf48f723cca53e5b352/src/mimecodec.js\nconst encoder = new TextEncoder();\n/**\n * @see https://tools.ietf.org/html/rfc2045#section-6.7\n */\nconst RANGES = [\n    [0x09],\n    [0x0a],\n    [0x0d],\n    [0x20, 0x3c],\n    [0x3e, 0x7e], // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n];\nconst LOOKUP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\nconst MAX_CHUNK_LENGTH = 16383; // must be multiple of 3\nconst MAX_MIME_WORD_LENGTH = 52;\nconst MAX_B64_MIME_WORD_BYTE_LENGTH = 39;\nfunction tripletToBase64(num) {\n    return (LOOKUP[(num >> 18) & 0x3f] +\n        LOOKUP[(num >> 12) & 0x3f] +\n        LOOKUP[(num >> 6) & 0x3f] +\n        LOOKUP[num & 0x3f]);\n}\nfunction encodeChunk(uint8, start, end) {\n    let output = '';\n    for (let i = start; i < end; i += 3) {\n        output += tripletToBase64((uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]);\n    }\n    return output;\n}\nfunction encodeBase64(data) {\n    const len = data.length;\n    const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n    let output = '';\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for (let i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {\n        output += encodeChunk(data, i, i + MAX_CHUNK_LENGTH > len2 ? len2 : i + MAX_CHUNK_LENGTH);\n    }\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n        const tmp = data[len - 1];\n        output += LOOKUP[tmp >> 2];\n        output += LOOKUP[(tmp << 4) & 0x3f];\n        output += '==';\n    }\n    else if (extraBytes === 2) {\n        const tmp = (data[len - 2] << 8) + data[len - 1];\n        output += LOOKUP[tmp >> 10];\n        output += LOOKUP[(tmp >> 4) & 0x3f];\n        output += LOOKUP[(tmp << 2) & 0x3f];\n        output += '=';\n    }\n    return output;\n}\n/**\n * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n *\n * @param {string} str Mime encoded string to be split up\n * @param {number} maxlen Maximum length of characters for one part (minimum 12)\n * @return {string[]} lines\n */\nfunction splitMimeEncodedString(str, maxlen = 12) {\n    const minWordLength = 12; // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n    const maxWordLength = Math.max(maxlen, minWordLength);\n    const lines = [];\n    while (str.length) {\n        let curLine = str.substr(0, maxWordLength);\n        const match = curLine.match(/=[0-9A-F]?$/i); // skip incomplete escaped char\n        if (match) {\n            curLine = curLine.substr(0, match.index);\n        }\n        let done = false;\n        while (!done) {\n            let chr;\n            done = true;\n            const match = str.substr(curLine.length).match(/^=([0-9A-F]{2})/i); // check if not middle of a unicode char sequence\n            if (match) {\n                chr = parseInt(match[1], 16);\n                // invalid sequence, move one char back anc recheck\n                if (chr < 0xc2 && chr > 0x7f) {\n                    curLine = curLine.substr(0, curLine.length - 3);\n                    done = false;\n                }\n            }\n        }\n        if (curLine.length) {\n            lines.push(curLine);\n        }\n        str = str.substr(curLine.length);\n    }\n    return lines;\n}\n/**\n *\n * @param {number} nr number\n * @returns {boolean} if number is in range\n */\nfunction checkRanges(nr) {\n    return RANGES.reduce((val, range) => val ||\n        (range.length === 1 && nr === range[0]) ||\n        (range.length === 2 && nr >= range[0] && nr <= range[1]), false);\n}\n/**\n * Encodes all non printable and non ascii bytes to =XX form, where XX is the\n * byte value in hex. This function does not convert linebreaks etc. it\n * only escapes character sequences\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data Either a string or an Uint8Array\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Mime encoded string\n */\nfunction mimeEncode(data = '', encoding = 'utf-8') {\n    const decoder = new TextDecoder(encoding);\n    const buffer = typeof data === 'string'\n        ? encoder.encode(data)\n        : encoder.encode(decoder.decode(data));\n    return buffer.reduce((aggregate, ord, index) => checkRanges(ord) &&\n        !((ord === 0x20 || ord === 0x09) &&\n            (index === buffer.length - 1 ||\n                buffer[index + 1] === 0x0a ||\n                buffer[index + 1] === 0x0d))\n        ? // if the char is in allowed range, then keep as is, unless it is a ws in the end of a line\n            aggregate + String.fromCharCode(ord)\n        : `${aggregate}=${ord < 0x10 ? '0' : ''}${ord\n            .toString(16)\n            .toUpperCase()}`, '');\n}\n/**\n * Encodes a string or an Uint8Array to an UTF-8 MIME Word\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://tools.ietf.org/html/rfc2047\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data String to be encoded\n * @param {'Q' | 'B'} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Single or several mime words joined together\n */\nfunction mimeWordEncode(data, mimeWordEncoding = 'Q', encoding = 'utf-8') {\n    let parts = [];\n    const decoder = new TextDecoder(encoding);\n    const str = typeof data === 'string' ? data : decoder.decode(data);\n    if (mimeWordEncoding === 'Q') {\n        const encodedStr = mimeEncode(str, encoding).replace(/[^a-z0-9!*+\\-/=]/gi, (chr) => chr === ' '\n            ? '_'\n            : '=' +\n                (chr.charCodeAt(0) < 0x10 ? '0' : '') +\n                chr.charCodeAt(0).toString(16).toUpperCase());\n        parts =\n            encodedStr.length < MAX_MIME_WORD_LENGTH\n                ? [encodedStr]\n                : splitMimeEncodedString(encodedStr, MAX_MIME_WORD_LENGTH);\n    }\n    else {\n        // Fits as much as possible into every line without breaking utf-8 multibyte characters' octets up across lines\n        let j = 0;\n        let i = 0;\n        while (i < str.length) {\n            if (encoder.encode(str.substring(j, i)).length >\n                MAX_B64_MIME_WORD_BYTE_LENGTH) {\n                // we went one character too far, substring at the char before\n                parts.push(str.substring(j, i - 1));\n                j = i - 1;\n            }\n            else {\n                i++;\n            }\n        }\n        // add the remainder of the string\n        str.substring(j) && parts.push(str.substring(j));\n        parts = parts.map((x) => encoder.encode(x)).map((x) => encodeBase64(x));\n    }\n    return parts\n        .map((p) => `=?UTF-8?${mimeWordEncoding}?${p}?= `)\n        .join('')\n        .trim();\n}\n\nconst CRLF$1 = '\\r\\n';\n/**\n * MIME standard wants 76 char chunks when sending out.\n */\nconst MIMECHUNK = 76;\n/**\n * meets both base64 and mime divisibility\n */\nconst MIME64CHUNK = (MIMECHUNK * 6);\n/**\n * size of the message stream buffer\n */\nconst BUFFERSIZE = (MIMECHUNK * 24 * 7);\nlet counter = 0;\nfunction generateBoundary() {\n    let text = '';\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'()+_,-./:=?\";\n    for (let i = 0; i < 69; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\nfunction convertPersonToAddress(person) {\n    return addressparser(person)\n        .map(({ name, address }) => {\n        return name\n            ? `${mimeWordEncode(name).replace(/,/g, '=2C')} <${address}>`\n            : address;\n    })\n        .join(', ');\n}\nfunction convertDashDelimitedTextToSnakeCase(text) {\n    return text\n        .toLowerCase()\n        .replace(/^(.)|-(.)/g, (match) => match.toUpperCase());\n}\nclass Message {\n    /**\n     * Construct an rfc2822-compliant message object.\n     *\n     * Special notes:\n     * - The `from` field is required.\n     * - At least one `to`, `cc`, or `bcc` header is also required.\n     * - You can also add whatever other headers you want.\n     *\n     * @see https://tools.ietf.org/html/rfc2822\n     * @param {Partial<MessageHeaders>} headers Message headers\n     */\n    constructor(headers) {\n        this.attachments = [];\n        this.header = {\n            'message-id': `<${new Date().getTime()}.${counter++}.${process.pid}@${hostname()}>`,\n            date: getRFC2822Date(),\n        };\n        this.content = 'text/plain; charset=utf-8';\n        this.alternative = null;\n        for (const header in headers) {\n            // allow user to override default content-type to override charset or send a single non-text message\n            if (/^content-type$/i.test(header)) {\n                this.content = headers[header];\n            }\n            else if (header === 'text') {\n                this.text = headers[header];\n            }\n            else if (header === 'attachment' &&\n                typeof headers[header] === 'object') {\n                const attachment = headers[header];\n                if (Array.isArray(attachment)) {\n                    for (let i = 0; i < attachment.length; i++) {\n                        this.attach(attachment[i]);\n                    }\n                }\n                else if (attachment != null) {\n                    this.attach(attachment);\n                }\n            }\n            else if (header === 'subject') {\n                this.header.subject = mimeWordEncode(headers.subject);\n            }\n            else if (/^(cc|bcc|to|from)/i.test(header)) {\n                this.header[header.toLowerCase()] = convertPersonToAddress(headers[header]);\n            }\n            else {\n                // allow any headers the user wants to set??\n                this.header[header.toLowerCase()] = headers[header];\n            }\n        }\n    }\n    /**\n     * Attach a file to the message.\n     *\n     * Can be called multiple times, each adding a new attachment.\n     *\n     * @public\n     * @param {MessageAttachment} options attachment options\n     * @returns {Message} the current instance for chaining\n     */\n    attach(options) {\n        // sender can specify an attachment as an alternative\n        if (options.alternative) {\n            this.alternative = options;\n            this.alternative.charset = options.charset || 'utf-8';\n            this.alternative.type = options.type || 'text/html';\n            this.alternative.inline = true;\n        }\n        else {\n            this.attachments.push(options);\n        }\n        return this;\n    }\n    /**\n     * @public\n     * @returns {{ isValid: boolean, validationError: (string | undefined) }} an object specifying whether this message is validly formatted, and the first validation error if it is not.\n     */\n    checkValidity() {\n        if (typeof this.header.from !== 'string' &&\n            Array.isArray(this.header.from) === false) {\n            return {\n                isValid: false,\n                validationError: 'Message must have a `from` header',\n            };\n        }\n        if (typeof this.header.to !== 'string' &&\n            Array.isArray(this.header.to) === false &&\n            typeof this.header.cc !== 'string' &&\n            Array.isArray(this.header.cc) === false &&\n            typeof this.header.bcc !== 'string' &&\n            Array.isArray(this.header.bcc) === false) {\n            return {\n                isValid: false,\n                validationError: 'Message must have at least one `to`, `cc`, or `bcc` header',\n            };\n        }\n        if (this.attachments.length > 0) {\n            const failed = [];\n            this.attachments.forEach((attachment) => {\n                if (attachment.path) {\n                    if (existsSync(attachment.path) === false) {\n                        failed.push(`${attachment.path} does not exist`);\n                    }\n                }\n                else if (attachment.stream) {\n                    if (!attachment.stream.readable) {\n                        failed.push('attachment stream is not readable');\n                    }\n                }\n                else if (!attachment.data) {\n                    failed.push('attachment has no data associated with it');\n                }\n            });\n            return {\n                isValid: failed.length === 0,\n                validationError: failed.join(', '),\n            };\n        }\n        return { isValid: true, validationError: undefined };\n    }\n    /**\n     * @public\n     * @deprecated does not conform to the `errback` style followed by the rest of the library, and will be removed in the next major version. use `checkValidity` instead.\n     * @param {function(isValid: boolean, invalidReason: (string | undefined)): void} callback .\n     * @returns {void}\n     */\n    valid(callback) {\n        const { isValid, validationError } = this.checkValidity();\n        callback(isValid, validationError);\n    }\n    /**\n     * @public\n     * @returns {MessageStream} a stream of the current message\n     */\n    stream() {\n        return new MessageStream(this);\n    }\n    /**\n     * @public\n     * @param {function(Error, string): void} callback the function to call with the error and buffer\n     * @returns {void}\n     */\n    read(callback) {\n        let buffer = '';\n        const str = this.stream();\n        str.on('data', (data) => (buffer += data));\n        str.on('end', (err) => callback(err, buffer));\n        str.on('error', (err) => callback(err, buffer));\n    }\n    readAsync() {\n        return new Promise((resolve, reject) => {\n            this.read((err, buffer) => {\n                if (err != null) {\n                    reject(err);\n                }\n                else {\n                    resolve(buffer);\n                }\n            });\n        });\n    }\n}\nclass MessageStream extends Stream {\n    /**\n     * @param {Message} message the message to stream\n     */\n    constructor(message) {\n        super();\n        this.message = message;\n        this.readable = true;\n        this.paused = false;\n        this.buffer = Buffer.alloc(MIMECHUNK * 24 * 7);\n        this.bufferIndex = 0;\n        /**\n         * @param {string} [data] the data to output\n         * @param {Function} [callback] the function\n         * @param {any[]} [args] array of arguments to pass to the callback\n         * @returns {void}\n         */\n        const output = (data) => {\n            // can we buffer the data?\n            if (this.buffer != null) {\n                const bytes = Buffer.byteLength(data);\n                if (bytes + this.bufferIndex < this.buffer.length) {\n                    this.buffer.write(data, this.bufferIndex);\n                    this.bufferIndex += bytes;\n                }\n                // we can't buffer the data, so ship it out!\n                else if (bytes > this.buffer.length) {\n                    if (this.bufferIndex) {\n                        this.emit('data', this.buffer.toString('utf-8', 0, this.bufferIndex));\n                        this.bufferIndex = 0;\n                    }\n                    const loops = Math.ceil(data.length / this.buffer.length);\n                    let loop = 0;\n                    while (loop < loops) {\n                        this.emit('data', data.substring(this.buffer.length * loop, this.buffer.length * (loop + 1)));\n                        loop++;\n                    }\n                } // we need to clean out the buffer, it is getting full\n                else {\n                    if (!this.paused) {\n                        this.emit('data', this.buffer.toString('utf-8', 0, this.bufferIndex));\n                        this.buffer.write(data, 0);\n                        this.bufferIndex = bytes;\n                    }\n                    else {\n                        // we can't empty out the buffer, so let's wait till we resume before adding to it\n                        this.once('resume', () => output(data));\n                    }\n                }\n            }\n        };\n        /**\n         * @param {MessageAttachment} [attachment] the attachment whose headers you would like to output\n         * @returns {void}\n         */\n        const outputAttachmentHeaders = (attachment) => {\n            let data = [];\n            const headers = {\n                'content-type': attachment.type +\n                    (attachment.charset ? `; charset=${attachment.charset}` : '') +\n                    (attachment.method ? `; method=${attachment.method}` : ''),\n                'content-transfer-encoding': 'base64',\n                'content-disposition': attachment.inline\n                    ? 'inline'\n                    : `attachment; filename=\"${mimeWordEncode(attachment.name)}\"`,\n            };\n            // allow sender to override default headers\n            if (attachment.headers != null) {\n                for (const header in attachment.headers) {\n                    headers[header.toLowerCase()] = attachment.headers[header];\n                }\n            }\n            for (const header in headers) {\n                data = data.concat([\n                    convertDashDelimitedTextToSnakeCase(header),\n                    ': ',\n                    headers[header],\n                    CRLF$1,\n                ]);\n            }\n            output(data.concat([CRLF$1]).join(''));\n        };\n        /**\n         * @param {string} data the data to output as base64\n         * @param {function(): void} [callback] the function to call after output is finished\n         * @returns {void}\n         */\n        const outputBase64 = (data, callback) => {\n            const loops = Math.ceil(data.length / MIMECHUNK);\n            let loop = 0;\n            while (loop < loops) {\n                output(data.substring(MIMECHUNK * loop, MIMECHUNK * (loop + 1)) + CRLF$1);\n                loop++;\n            }\n            if (callback) {\n                callback();\n            }\n        };\n        const outputFile = (attachment, next) => {\n            var _a;\n            const chunk = MIME64CHUNK * 16;\n            const buffer = Buffer.alloc(chunk);\n            const inputEncoding = ((_a = attachment === null || attachment === void 0 ? void 0 : attachment.headers) === null || _a === void 0 ? void 0 : _a['content-transfer-encoding']) || 'base64';\n            const encoding = inputEncoding === '7bit'\n                ? 'ascii'\n                : inputEncoding === '8bit'\n                    ? 'binary'\n                    : inputEncoding;\n            /**\n             * @param {Error} err the error to emit\n             * @param {number} fd the file descriptor\n             * @returns {void}\n             */\n            const opened = (err, fd) => {\n                if (err) {\n                    this.emit('error', err);\n                    return;\n                }\n                const readBytes = (err, bytes) => {\n                    if (err || this.readable === false) {\n                        this.emit('error', err || new Error('message stream was interrupted somehow!'));\n                        return;\n                    }\n                    // guaranteed to be encoded without padding unless it is our last read\n                    outputBase64(buffer.toString(encoding, 0, bytes), () => {\n                        if (bytes == chunk) {\n                            // we read a full chunk, there might be more\n                            read(fd, buffer, 0, chunk, null, readBytes);\n                        } // that was the last chunk, we are done reading the file\n                        else {\n                            this.removeListener('error', closeSync);\n                            close(fd, next);\n                        }\n                    });\n                };\n                read(fd, buffer, 0, chunk, null, readBytes);\n                this.once('error', closeSync);\n            };\n            open(attachment.path, 'r', opened);\n        };\n        /**\n         * @param {MessageAttachment} attachment the metadata to use as headers\n         * @param {function(): void} callback the function to call after output is finished\n         * @returns {void}\n         */\n        const outputStream = (attachment, callback) => {\n            const { stream } = attachment;\n            if (stream === null || stream === void 0 ? void 0 : stream.readable) {\n                let previous = Buffer.alloc(0);\n                stream.resume();\n                stream.on('end', () => {\n                    outputBase64(previous.toString('base64'), callback);\n                    this.removeListener('pause', stream.pause);\n                    this.removeListener('resume', stream.resume);\n                    this.removeListener('error', stream.resume);\n                });\n                stream.on('data', (buff) => {\n                    // do we have bytes from a previous stream data event?\n                    let buffer = Buffer.isBuffer(buff) ? buff : Buffer.from(buff);\n                    if (previous.byteLength > 0) {\n                        buffer = Buffer.concat([previous, buffer]);\n                    }\n                    const padded = buffer.length % MIME64CHUNK;\n                    previous = Buffer.alloc(padded);\n                    // encode as much of the buffer to base64 without empty bytes\n                    if (padded > 0) {\n                        // copy dangling bytes into previous buffer\n                        buffer.copy(previous, 0, buffer.length - padded);\n                    }\n                    outputBase64(buffer.toString('base64', 0, buffer.length - padded));\n                });\n                this.on('pause', stream.pause);\n                this.on('resume', stream.resume);\n                this.on('error', stream.resume);\n            }\n            else {\n                this.emit('error', { message: 'stream not readable' });\n            }\n        };\n        const outputAttachment = (attachment, callback) => {\n            const build = attachment.path\n                ? outputFile\n                : attachment.stream\n                    ? outputStream\n                    : outputData;\n            outputAttachmentHeaders(attachment);\n            build(attachment, callback);\n        };\n        /**\n         * @param {string} boundary the boundary text between outputs\n         * @param {MessageAttachment[]} list the list of potential messages to output\n         * @param {number} index the index of the list item to output\n         * @param {function(): void} callback the function to call if index is greater than upper bound\n         * @returns {void}\n         */\n        const outputMessage = (boundary, list, index, callback) => {\n            if (index < list.length) {\n                output(`--${boundary}${CRLF$1}`);\n                if (list[index].related) {\n                    outputRelated(list[index], () => outputMessage(boundary, list, index + 1, callback));\n                }\n                else {\n                    outputAttachment(list[index], () => outputMessage(boundary, list, index + 1, callback));\n                }\n            }\n            else {\n                output(`${CRLF$1}--${boundary}--${CRLF$1}${CRLF$1}`);\n                callback();\n            }\n        };\n        const outputMixed = () => {\n            const boundary = generateBoundary();\n            output(`Content-Type: multipart/mixed; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n            if (this.message.alternative == null) {\n                outputText(this.message);\n                outputMessage(boundary, this.message.attachments, 0, close$1);\n            }\n            else {\n                outputAlternative(\n                // typescript bug; should narrow to { alternative: MessageAttachment }\n                this.message, () => outputMessage(boundary, this.message.attachments, 0, close$1));\n            }\n        };\n        /**\n         * @param {MessageAttachment} attachment the metadata to use as headers\n         * @param {function(): void} callback the function to call after output is finished\n         * @returns {void}\n         */\n        const outputData = (attachment, callback) => {\n            var _a, _b;\n            outputBase64(attachment.encoded\n                ? (_a = attachment.data) !== null && _a !== void 0 ? _a : ''\n                : Buffer.from((_b = attachment.data) !== null && _b !== void 0 ? _b : '').toString('base64'), callback);\n        };\n        /**\n         * @param {Message} message the message to output\n         * @returns {void}\n         */\n        const outputText = (message) => {\n            let data = [];\n            data = data.concat([\n                'Content-Type:',\n                message.content,\n                CRLF$1,\n                'Content-Transfer-Encoding: 7bit',\n                CRLF$1,\n            ]);\n            data = data.concat(['Content-Disposition: inline', CRLF$1, CRLF$1]);\n            data = data.concat([message.text || '', CRLF$1, CRLF$1]);\n            output(data.join(''));\n        };\n        /**\n         * @param {MessageAttachment} message the message to output\n         * @param {function(): void} callback the function to call after output is finished\n         * @returns {void}\n         */\n        const outputRelated = (message, callback) => {\n            const boundary = generateBoundary();\n            output(`Content-Type: multipart/related; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n            outputAttachment(message, () => {\n                var _a;\n                outputMessage(boundary, (_a = message.related) !== null && _a !== void 0 ? _a : [], 0, () => {\n                    output(`${CRLF$1}--${boundary}--${CRLF$1}${CRLF$1}`);\n                    callback();\n                });\n            });\n        };\n        /**\n         * @param {Message} message the message to output\n         * @param {function(): void} callback the function to call after output is finished\n         * @returns {void}\n         */\n        const outputAlternative = (message, callback) => {\n            const boundary = generateBoundary();\n            output(`Content-Type: multipart/alternative; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n            outputText(message);\n            output(`--${boundary}${CRLF$1}`);\n            /**\n             * @returns {void}\n             */\n            const finish = () => {\n                output([CRLF$1, '--', boundary, '--', CRLF$1, CRLF$1].join(''));\n                callback();\n            };\n            if (message.alternative.related) {\n                outputRelated(message.alternative, finish);\n            }\n            else {\n                outputAttachment(message.alternative, finish);\n            }\n        };\n        const close$1 = (err) => {\n            var _a, _b;\n            if (err) {\n                this.emit('error', err);\n            }\n            else {\n                this.emit('data', (_b = (_a = this.buffer) === null || _a === void 0 ? void 0 : _a.toString('utf-8', 0, this.bufferIndex)) !== null && _b !== void 0 ? _b : '');\n                this.emit('end');\n            }\n            this.buffer = null;\n            this.bufferIndex = 0;\n            this.readable = false;\n            this.removeAllListeners('resume');\n            this.removeAllListeners('pause');\n            this.removeAllListeners('error');\n            this.removeAllListeners('data');\n            this.removeAllListeners('end');\n        };\n        /**\n         * @returns {void}\n         */\n        const outputHeaderData = () => {\n            if (this.message.attachments.length || this.message.alternative) {\n                output(`MIME-Version: 1.0${CRLF$1}`);\n                outputMixed();\n            } // you only have a text message!\n            else {\n                outputText(this.message);\n                close$1();\n            }\n        };\n        /**\n         * @returns {void}\n         */\n        const outputHeader = () => {\n            let data = [];\n            for (const header in this.message.header) {\n                // do not output BCC in the headers (regex) nor custom Object.prototype functions...\n                if (!/bcc/i.test(header) &&\n                    Object.prototype.hasOwnProperty.call(this.message.header, header)) {\n                    data = data.concat([\n                        convertDashDelimitedTextToSnakeCase(header),\n                        ': ',\n                        this.message.header[header],\n                        CRLF$1,\n                    ]);\n                }\n            }\n            output(data.join(''));\n            outputHeaderData();\n        };\n        this.once('destroy', close$1);\n        process.nextTick(outputHeader);\n    }\n    /**\n     * @public\n     * pause the stream\n     * @returns {void}\n     */\n    pause() {\n        this.paused = true;\n        this.emit('pause');\n    }\n    /**\n     * @public\n     * resume the stream\n     * @returns {void}\n     */\n    resume() {\n        this.paused = false;\n        this.emit('resume');\n    }\n    /**\n     * @public\n     * destroy the stream\n     * @returns {void}\n     */\n    destroy() {\n        this.emit('destroy', this.bufferIndex > 0 ? { message: 'message stream destroyed' } : null);\n    }\n    /**\n     * @public\n     * destroy the stream at first opportunity\n     * @returns {void}\n     */\n    destroySoon() {\n        this.emit('destroy');\n    }\n}\n\n/**\n * @readonly\n * @enum\n */\nconst SMTPErrorStates = {\n    COULDNOTCONNECT: 1,\n    BADRESPONSE: 2,\n    AUTHFAILED: 3,\n    TIMEDOUT: 4,\n    ERROR: 5,\n    NOCONNECTION: 6,\n    AUTHNOTSUPPORTED: 7,\n    CONNECTIONCLOSED: 8,\n    CONNECTIONENDED: 9,\n    CONNECTIONAUTH: 10,\n};\nclass SMTPError extends Error {\n    /**\n     * @protected\n     * @param {string} message error message\n     */\n    constructor(message) {\n        super(message);\n        this.code = null;\n        this.smtp = null;\n        this.previous = null;\n    }\n    /**\n     *\n     * @param {string} message error message\n     * @param {number} code smtp error state\n     * @param {Error | null} error previous error\n     * @param {unknown} smtp arbitrary data\n     * @returns {SMTPError} error\n     */\n    static create(message, code, error, smtp) {\n        const msg = (error === null || error === void 0 ? void 0 : error.message) ? `${message} (${error.message})` : message;\n        const err = new SMTPError(msg);\n        err.code = code;\n        err.smtp = smtp;\n        if (error) {\n            err.previous = error;\n        }\n        return err;\n    }\n}\n\nclass SMTPResponseMonitor {\n    constructor(stream, timeout, onerror) {\n        let buffer = '';\n        const notify = () => {\n            var _a, _b;\n            if (buffer.length) {\n                // parse buffer for response codes\n                const line = buffer.replace('\\r', '');\n                if (!((_b = (_a = line\n                    .trim()\n                    .split(/\\n/)\n                    .pop()) === null || _a === void 0 ? void 0 : _a.match(/^(\\d{3})\\s/)) !== null && _b !== void 0 ? _b : false)) {\n                    return;\n                }\n                const match = line ? line.match(/(\\d+)\\s?(.*)/) : null;\n                const data = match !== null\n                    ? { code: match[1], message: match[2], data: line }\n                    : { code: -1, data: line };\n                stream.emit('response', null, data);\n                buffer = '';\n            }\n        };\n        const error = (err) => {\n            stream.emit('response', SMTPError.create('connection encountered an error', SMTPErrorStates.ERROR, err));\n        };\n        const timedout = (err) => {\n            stream.end();\n            stream.emit('response', SMTPError.create('timedout while connecting to smtp server', SMTPErrorStates.TIMEDOUT, err));\n        };\n        const watch = (data) => {\n            if (data !== null) {\n                buffer += data.toString();\n                notify();\n            }\n        };\n        const close = (err) => {\n            stream.emit('response', SMTPError.create('connection has closed', SMTPErrorStates.CONNECTIONCLOSED, err));\n        };\n        const end = (err) => {\n            stream.emit('response', SMTPError.create('connection has ended', SMTPErrorStates.CONNECTIONENDED, err));\n        };\n        this.stop = (err) => {\n            stream.removeAllListeners('response');\n            stream.removeListener('data', watch);\n            stream.removeListener('end', end);\n            stream.removeListener('close', close);\n            stream.removeListener('error', error);\n            if (err != null && typeof onerror === 'function') {\n                onerror(err);\n            }\n        };\n        stream.on('data', watch);\n        stream.on('end', end);\n        stream.on('close', close);\n        stream.on('error', error);\n        stream.setTimeout(timeout, timedout);\n    }\n}\n\n/**\n * @readonly\n * @enum\n */\nconst AUTH_METHODS = {\n    PLAIN: 'PLAIN',\n    'CRAM-MD5': 'CRAM-MD5',\n    LOGIN: 'LOGIN',\n    XOAUTH2: 'XOAUTH2',\n};\n/**\n * @readonly\n * @enum\n */\nconst SMTPState = {\n    NOTCONNECTED: 0,\n    CONNECTING: 1,\n    CONNECTED: 2,\n};\nconst DEFAULT_TIMEOUT = 5000;\nconst SMTP_PORT = 25;\nconst SMTP_SSL_PORT = 465;\nconst SMTP_TLS_PORT = 587;\nconst CRLF = '\\r\\n';\nconst GREYLIST_DELAY = 300;\nlet DEBUG = 0;\n/**\n * @param {...any[]} args the message(s) to log\n * @returns {void}\n */\nconst log = (...args) => {\n    if (DEBUG === 1) {\n        args.forEach((d) => console.log(typeof d === 'object'\n            ? d instanceof Error\n                ? d.message\n                : JSON.stringify(d)\n            : d));\n    }\n};\n/**\n * @param {function(...any[]): void} callback the function to call\n * @param {...any[]} args the arguments to apply to the function\n * @returns {void}\n */\nconst caller = (callback, ...args) => {\n    if (typeof callback === 'function') {\n        callback(...args);\n    }\n};\nclass SMTPConnection extends EventEmitter {\n    /**\n     * SMTP class written using python's (2.7) smtplib.py as a base.\n     *\n     * To target a Message Transfer Agent (MTA), omit all options.\n     *\n     * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n     */\n    constructor({ timeout, host, user, password, domain, port, ssl, tls, logger, authentication, } = {}) {\n        var _a;\n        super();\n        this.timeout = DEFAULT_TIMEOUT;\n        this.log = log;\n        this.authentication = [\n            AUTH_METHODS['CRAM-MD5'],\n            AUTH_METHODS.LOGIN,\n            AUTH_METHODS.PLAIN,\n            AUTH_METHODS.XOAUTH2,\n        ];\n        this._state = SMTPState.NOTCONNECTED;\n        this._secure = false;\n        this.loggedin = false;\n        this.sock = null;\n        this.features = null;\n        this.monitor = null;\n        this.domain = hostname();\n        this.host = 'localhost';\n        this.ssl = false;\n        this.tls = false;\n        this.greylistResponseTracker = new WeakSet();\n        if (Array.isArray(authentication)) {\n            this.authentication = authentication;\n        }\n        if (typeof timeout === 'number') {\n            this.timeout = timeout;\n        }\n        if (typeof domain === 'string') {\n            this.domain = domain;\n        }\n        if (typeof host === 'string') {\n            this.host = host;\n        }\n        if (ssl != null &&\n            (typeof ssl === 'boolean' ||\n                (typeof ssl === 'object' && Array.isArray(ssl) === false))) {\n            this.ssl = ssl;\n        }\n        if (tls != null &&\n            (typeof tls === 'boolean' ||\n                (typeof tls === 'object' && Array.isArray(tls) === false))) {\n            this.tls = tls;\n        }\n        this.port = port || (ssl ? SMTP_SSL_PORT : tls ? SMTP_TLS_PORT : SMTP_PORT);\n        this.loggedin = user && password ? false : true;\n        if (!user && ((_a = password === null || password === void 0 ? void 0 : password.length) !== null && _a !== void 0 ? _a : 0) > 0) {\n            throw new Error('`password` cannot be set without `user`');\n        }\n        // keep these strings hidden when quicky debugging/logging\n        this.user = () => user;\n        this.password = () => password;\n        if (typeof logger === 'function') {\n            this.log = log;\n        }\n    }\n    /**\n     * @public\n     * @param {0 | 1} level -\n     * @returns {void}\n     */\n    debug(level) {\n        DEBUG = level;\n    }\n    /**\n     * @public\n     * @returns {SMTPState} the current state\n     */\n    state() {\n        return this._state;\n    }\n    /**\n     * @public\n     * @returns {boolean} whether or not the instance is authorized\n     */\n    authorized() {\n        return this.loggedin;\n    }\n    /**\n     * Establish an SMTP connection.\n     *\n     * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n     *\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {number} [port] the port to use for the connection\n     * @param {string} [host] the hostname to use for the connection\n     * @param {ConnectOptions} [options={}] the options\n     * @returns {void}\n     */\n    connect(callback, port = this.port, host = this.host, options = {}) {\n        this.port = port;\n        this.host = host;\n        this.ssl = options.ssl || this.ssl;\n        if (this._state !== SMTPState.NOTCONNECTED) {\n            this.quit(() => this.connect(callback, port, host, options));\n        }\n        /**\n         * @returns {void}\n         */\n        const connected = () => {\n            this.log(`connected: ${this.host}:${this.port}`);\n            if (this.ssl && !this.tls) {\n                // if key/ca/cert was passed in, check if connection is authorized\n                if (typeof this.ssl !== 'boolean' &&\n                    this.sock instanceof TLSSocket &&\n                    !this.sock.authorized) {\n                    this.close(true);\n                    caller(callback, SMTPError.create('could not establish an ssl connection', SMTPErrorStates.CONNECTIONAUTH));\n                }\n                else {\n                    this._secure = true;\n                }\n            }\n        };\n        /**\n         * @param {Error} err err\n         * @returns {void}\n         */\n        const connectedErrBack = (err) => {\n            if (!err) {\n                connected();\n            }\n            else {\n                this.close(true);\n                this.log(err);\n                caller(callback, SMTPError.create('could not connect', SMTPErrorStates.COULDNOTCONNECT, err));\n            }\n        };\n        const response = (err, msg) => {\n            if (err) {\n                if (this._state === SMTPState.NOTCONNECTED && !this.sock) {\n                    return;\n                }\n                this.close(true);\n                caller(callback, err);\n            }\n            else if (msg.code == '220') {\n                this.log(msg.data);\n                // might happen first, so no need to wait on connected()\n                this._state = SMTPState.CONNECTED;\n                caller(callback, null, msg.data);\n            }\n            else {\n                this.log(`response (data): ${msg.data}`);\n                this.quit(() => {\n                    caller(callback, SMTPError.create('bad response on connection', SMTPErrorStates.BADRESPONSE, err, msg.data));\n                });\n            }\n        };\n        this._state = SMTPState.CONNECTING;\n        this.log(`connecting: ${this.host}:${this.port}`);\n        if (this.ssl) {\n            this.sock = connect(this.port, this.host.trim(), typeof this.ssl === 'object' ? this.ssl : {}, connected);\n        }\n        else {\n            this.sock = new Socket();\n            this.sock.connect(this.port, this.host.trim(), connectedErrBack);\n        }\n        this.monitor = new SMTPResponseMonitor(this.sock, this.timeout, () => this.close(true));\n        this.sock.once('response', response);\n        this.sock.once('error', response); // the socket could reset or throw, so let's handle it and let the user know\n    }\n    /**\n     * @public\n     * @param {string} str the string to send\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    send(str, callback) {\n        if (this.sock != null && this._state === SMTPState.CONNECTED) {\n            this.log(str);\n            this.sock.once('response', (err, msg) => {\n                if (err) {\n                    caller(callback, err);\n                }\n                else {\n                    this.log(msg.data);\n                    caller(callback, null, msg);\n                }\n            });\n            if (this.sock.writable) {\n                this.sock.write(str);\n            }\n        }\n        else {\n            this.close(true);\n            caller(callback, SMTPError.create('no connection has been established', SMTPErrorStates.NOCONNECTION));\n        }\n    }\n    /**\n     * @public\n     * @param {string} cmd command to issue\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {(number[] | number)} [codes=[250]] array codes\n     * @returns {void}\n     */\n    command(cmd, callback, codes = [250]) {\n        const codesArray = Array.isArray(codes)\n            ? codes\n            : typeof codes === 'number'\n                ? [codes]\n                : [250];\n        const response = (err, msg) => {\n            if (err) {\n                caller(callback, err);\n            }\n            else {\n                const code = Number(msg.code);\n                if (codesArray.indexOf(code) !== -1) {\n                    caller(callback, err, msg.data, msg.message);\n                }\n                else if ((code === 450 || code === 451) &&\n                    msg.message.toLowerCase().includes('greylist') &&\n                    this.greylistResponseTracker.has(response) === false) {\n                    this.greylistResponseTracker.add(response);\n                    setTimeout(() => {\n                        this.send(cmd + CRLF, response);\n                    }, GREYLIST_DELAY);\n                }\n                else {\n                    const suffix = msg.message ? `: ${msg.message}` : '';\n                    const errorMessage = `bad response on command '${cmd.split(' ')[0]}'${suffix}`;\n                    caller(callback, SMTPError.create(errorMessage, SMTPErrorStates.BADRESPONSE, null, msg.data));\n                }\n            }\n        };\n        this.greylistResponseTracker.delete(response);\n        this.send(cmd + CRLF, response);\n    }\n    /**\n     * @public\n     * @description SMTP 'helo' command.\n     *\n     * Hostname to send for self command defaults to the FQDN of the local\n     * host.\n     *\n     * As this command was deprecated by rfc2821, it should only be used for compatibility with non-compliant servers.\n     * @see https://tools.ietf.org/html/rfc2821#appendix-F.3\n     *\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} domain the domain to associate with the 'helo' request\n     * @returns {void}\n     */\n    helo(callback, domain) {\n        this.command(`helo ${domain || this.domain}`, (err, data) => {\n            if (err) {\n                caller(callback, err);\n            }\n            else {\n                this.parse_smtp_features(data);\n                caller(callback, err, data);\n            }\n        });\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    starttls(callback) {\n        const response = (err, msg) => {\n            if (this.sock == null) {\n                throw new Error('null socket');\n            }\n            if (err) {\n                err.message += ' while establishing a starttls session';\n                caller(callback, err);\n            }\n            else {\n                const secureContext = createSecureContext(typeof this.tls === 'object' ? this.tls : {});\n                const secureSocket = new TLSSocket(this.sock, { secureContext });\n                secureSocket.on('error', (err) => {\n                    this.close(true);\n                    caller(callback, err);\n                });\n                this._secure = true;\n                this.sock = secureSocket;\n                new SMTPResponseMonitor(this.sock, this.timeout, () => this.close(true));\n                caller(callback, msg.data);\n            }\n        };\n        this.command('starttls', response, [220]);\n    }\n    /**\n     * @public\n     * @param {string} data the string to parse for features\n     * @returns {void}\n     */\n    parse_smtp_features(data) {\n        //  According to RFC1869 some (badly written)\n        //  MTA's will disconnect on an ehlo. Toss an exception if\n        //  that happens -ddm\n        data.split('\\n').forEach((ext) => {\n            const parse = ext.match(/^(?:\\d+[-=]?)\\s*?([^\\s]+)(?:\\s+(.*)\\s*?)?$/);\n            // To be able to communicate with as many SMTP servers as possible,\n            // we have to take the old-style auth advertisement into account,\n            // because:\n            // 1) Else our SMTP feature parser gets confused.\n            // 2) There are some servers that only advertise the auth methods we\n            // support using the old style.\n            if (parse != null && this.features != null) {\n                // RFC 1869 requires a space between ehlo keyword and parameters.\n                // It's actually stricter, in that only spaces are allowed between\n                // parameters, but were not going to check for that here.  Note\n                // that the space isn't present if there are no parameters.\n                this.features[parse[1].toLowerCase()] = parse[2] || true;\n            }\n        });\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} domain the domain to associate with the 'ehlo' request\n     * @returns {void}\n     */\n    ehlo(callback, domain) {\n        this.features = {};\n        this.command(`ehlo ${domain || this.domain}`, (err, data) => {\n            if (err) {\n                caller(callback, err);\n            }\n            else {\n                this.parse_smtp_features(data);\n                if (this.tls && !this._secure) {\n                    this.starttls(() => this.ehlo(callback, domain));\n                }\n                else {\n                    caller(callback, err, data);\n                }\n            }\n        });\n    }\n    /**\n     * @public\n     * @param {string} opt the features keyname to check\n     * @returns {boolean} whether the extension exists\n     */\n    has_extn(opt) {\n        var _a;\n        return ((_a = this.features) !== null && _a !== void 0 ? _a : {})[opt.toLowerCase()] === undefined;\n    }\n    /**\n     * @public\n     * @description SMTP 'help' command, returns text from the server\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} domain the domain to associate with the 'help' request\n     * @returns {void}\n     */\n    help(callback, domain) {\n        this.command(domain ? `help ${domain}` : 'help', callback, [211, 214]);\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    rset(callback) {\n        this.command('rset', callback);\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    noop(callback) {\n        this.send('noop', callback);\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} from the sender\n     * @returns {void}\n     */\n    mail(callback, from) {\n        this.command(`mail FROM:${from}`, callback);\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} to the receiver\n     * @returns {void}\n     */\n    rcpt(callback, to) {\n        this.command(`RCPT TO:${to}`, callback, [250, 251]);\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    data(callback) {\n        this.command('data', callback, [354]);\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    data_end(callback) {\n        this.command(`${CRLF}.`, callback);\n    }\n    /**\n     * @public\n     * @param {string} data the message to send\n     * @returns {void}\n     */\n    message(data) {\n        var _a, _b;\n        this.log(data);\n        (_b = (_a = this.sock) === null || _a === void 0 ? void 0 : _a.write(data)) !== null && _b !== void 0 ? _b : this.log('no socket to write to');\n    }\n    /**\n     * @public\n     * @description SMTP 'verify' command -- checks for address validity.\n     * @param {string} address the address to validate\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    verify(address, callback) {\n        this.command(`vrfy ${address}`, callback, [250, 251, 252]);\n    }\n    /**\n     * @public\n     * @description SMTP 'expn' command -- expands a mailing list.\n     * @param {string} address the mailing list to expand\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    expn(address, callback) {\n        this.command(`expn ${address}`, callback);\n    }\n    /**\n     * @public\n     * @description Calls this.ehlo() and, if an error occurs, this.helo().\n     *\n     * If there has been no previous EHLO or HELO command self session, self\n     * method tries ESMTP EHLO first.\n     *\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} [domain] the domain to associate with the command\n     * @returns {void}\n     */\n    ehlo_or_helo_if_needed(callback, domain) {\n        // is this code callable...?\n        if (!this.features) {\n            const response = (err, data) => caller(callback, err, data);\n            this.ehlo((err, data) => {\n                if (err) {\n                    this.helo(response, domain);\n                }\n                else {\n                    caller(callback, err, data);\n                }\n            }, domain);\n        }\n    }\n    /**\n     * @public\n     *\n     * Log in on an SMTP server that requires authentication.\n     *\n     * If there has been no previous EHLO or HELO command self session, self\n     * method tries ESMTP EHLO first.\n     *\n     * This method will return normally if the authentication was successful.\n     *\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} [user] the username to authenticate with\n     * @param {string} [password] the password for the authentication\n     * @param {{ method: string, domain: string }} [options] login options\n     * @returns {void}\n     */\n    login(callback, user, password, options = {}) {\n        var _a, _b;\n        const login = {\n            user: user ? () => user : this.user,\n            password: password ? () => password : this.password,\n            method: (_b = (_a = options === null || options === void 0 ? void 0 : options.method) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '',\n        };\n        const domain = (options === null || options === void 0 ? void 0 : options.domain) || this.domain;\n        const initiate = (err, data) => {\n            var _a;\n            if (err) {\n                caller(callback, err);\n                return;\n            }\n            let method = null;\n            /**\n             * @param {string} challenge challenge\n             * @returns {string} base64 cram hash\n             */\n            const encodeCramMd5 = (challenge) => {\n                const hmac = createHmac('md5', login.password());\n                hmac.update(Buffer.from(challenge, 'base64').toString('ascii'));\n                return Buffer.from(`${login.user()} ${hmac.digest('hex')}`).toString('base64');\n            };\n            /**\n             * @returns {string} base64 login/password\n             */\n            const encodePlain = () => Buffer.from(`\\u0000${login.user()}\\u0000${login.password()}`).toString('base64');\n            /**\n             * @see https://developers.google.com/gmail/xoauth2_protocol\n             * @returns {string} base64 xoauth2 auth token\n             */\n            const encodeXoauth2 = () => Buffer.from(`user=${login.user()}\\u0001auth=Bearer ${login.password()}\\u0001\\u0001`).toString('base64');\n            // List of authentication methods we support: from preferred to\n            // less preferred methods.\n            if (!method) {\n                const preferred = this.authentication;\n                let auth = '';\n                if (typeof ((_a = this.features) === null || _a === void 0 ? void 0 : _a['auth']) === 'string') {\n                    auth = this.features['auth'];\n                }\n                for (let i = 0; i < preferred.length; i++) {\n                    if (auth.includes(preferred[i])) {\n                        method = preferred[i];\n                        break;\n                    }\n                }\n            }\n            /**\n             * handle bad responses from command differently\n             * @param {Error} err err\n             * @param {unknown} data data\n             * @returns {void}\n             */\n            const failed = (err, data) => {\n                this.loggedin = false;\n                this.close(); // if auth is bad, close the connection, it won't get better by itself\n                caller(callback, SMTPError.create('authorization.failed', SMTPErrorStates.AUTHFAILED, err, data));\n            };\n            /**\n             * @param {Error} err err\n             * @param {unknown} data data\n             * @returns {void}\n             */\n            const response = (err, data) => {\n                if (err) {\n                    failed(err, data);\n                }\n                else {\n                    this.loggedin = true;\n                    caller(callback, err, data);\n                }\n            };\n            /**\n             * @param {Error} err err\n             * @param {unknown} data data\n             * @param {string} msg msg\n             * @returns {void}\n             */\n            const attempt = (err, data, msg) => {\n                if (err) {\n                    failed(err, data);\n                }\n                else {\n                    if (method === AUTH_METHODS['CRAM-MD5']) {\n                        this.command(encodeCramMd5(msg), response, [235, 503]);\n                    }\n                    else if (method === AUTH_METHODS.LOGIN) {\n                        this.command(Buffer.from(login.password()).toString('base64'), response, [235, 503]);\n                    }\n                }\n            };\n            /**\n             * @param {Error} err err\n             * @param {unknown} data data\n             * @param {string} msg msg\n             * @returns {void}\n             */\n            const attemptUser = (err, data) => {\n                if (err) {\n                    failed(err, data);\n                }\n                else {\n                    if (method === AUTH_METHODS.LOGIN) {\n                        this.command(Buffer.from(login.user()).toString('base64'), attempt, [334]);\n                    }\n                }\n            };\n            switch (method) {\n                case AUTH_METHODS['CRAM-MD5']:\n                    this.command(`AUTH  ${AUTH_METHODS['CRAM-MD5']}`, attempt, [334]);\n                    break;\n                case AUTH_METHODS.LOGIN:\n                    this.command(`AUTH ${AUTH_METHODS.LOGIN}`, attemptUser, [334]);\n                    break;\n                case AUTH_METHODS.PLAIN:\n                    this.command(`AUTH ${AUTH_METHODS.PLAIN} ${encodePlain()}`, response, [235, 503]);\n                    break;\n                case AUTH_METHODS.XOAUTH2:\n                    this.command(`AUTH ${AUTH_METHODS.XOAUTH2} ${encodeXoauth2()}`, response, [235, 503]);\n                    break;\n                default:\n                    caller(callback, SMTPError.create('no form of authorization supported', SMTPErrorStates.AUTHNOTSUPPORTED, null, data));\n                    break;\n            }\n        };\n        this.ehlo_or_helo_if_needed(initiate, domain);\n    }\n    /**\n     * @public\n     * @param {boolean} [force=false] whether or not to force destroy the connection\n     * @returns {void}\n     */\n    close(force = false) {\n        if (this.sock) {\n            if (force) {\n                this.log('smtp connection destroyed!');\n                this.sock.destroy();\n            }\n            else {\n                this.log('smtp connection closed.');\n                this.sock.end();\n            }\n        }\n        if (this.monitor) {\n            this.monitor.stop();\n            this.monitor = null;\n        }\n        this._state = SMTPState.NOTCONNECTED;\n        this._secure = false;\n        this.sock = null;\n        this.features = null;\n        this.loggedin = !(this.user() && this.password());\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} [callback] function to call after response\n     * @returns {void}\n     */\n    quit(callback) {\n        this.command('quit', (err, data) => {\n            caller(callback, err, data);\n            this.close();\n        }, [221, 250]);\n    }\n}\n\nclass SMTPClient {\n    /**\n     * Create a standard SMTP client backed by a self-managed SMTP connection.\n     *\n     * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n     *\n     * @param {SMTPConnectionOptions} server smtp options\n     */\n    constructor(server) {\n        this.queue = [];\n        this.sending = false;\n        this.ready = false;\n        this.timer = null;\n        this.smtp = new SMTPConnection(server);\n    }\n    /**\n     * @public\n     * @template {Message | MessageHeaders} T\n     * @param {T} msg the message to send\n     * @param {MessageCallback<T>} callback receiver for the error (if any) as well as the passed-in message / headers\n     * @returns {void}\n     */\n    send(msg, callback) {\n        const message = msg instanceof Message\n            ? msg\n            : this._canMakeMessage(msg)\n                ? new Message(msg)\n                : null;\n        if (message == null) {\n            callback(new Error('message is not a valid Message instance'), msg);\n            return;\n        }\n        const { isValid, validationError } = message.checkValidity();\n        if (isValid) {\n            const stack = this.createMessageStack(message, callback);\n            if (stack.to.length === 0) {\n                return callback(new Error('No recipients found in message'), msg);\n            }\n            this.queue.push(stack);\n            this._poll();\n        }\n        else {\n            callback(new Error(validationError), msg);\n        }\n    }\n    /**\n     * @public\n     * @template {Message | MessageHeaders} T\n     * @param {T} msg the message to send\n     * @returns {Promise<T>} a promise that resolves to the passed-in message / headers\n     */\n    sendAsync(msg) {\n        return new Promise((resolve, reject) => {\n            this.send(msg, (err, message) => {\n                if (err != null) {\n                    reject(err);\n                }\n                else {\n                    // unfortunately, the conditional type doesn't reach here\n                    // fortunately, we only return a `Message` when err is null, so this is safe\n                    resolve(message);\n                }\n            });\n        });\n    }\n    /**\n     * @public\n     * @description Converts a message to the raw object used by the internal stack.\n     * @param {Message} message message to convert\n     * @param {MessageCallback} callback errback\n     * @returns {MessageStack} raw message object\n     */\n    createMessageStack(message, callback = function () {\n        /* ø */\n    }) {\n        const [{ address: from }] = addressparser(message.header.from);\n        const stack = {\n            message,\n            to: [],\n            from,\n            callback: callback.bind(this),\n        };\n        const { header: { to, cc, bcc, 'return-path': returnPath }, } = message;\n        if ((typeof to === 'string' || Array.isArray(to)) && to.length > 0) {\n            stack.to = addressparser(to);\n        }\n        if ((typeof cc === 'string' || Array.isArray(cc)) && cc.length > 0) {\n            stack.to = stack.to.concat(addressparser(cc).filter((x) => stack.to.some((y) => y.address === x.address) === false));\n        }\n        if ((typeof bcc === 'string' || Array.isArray(bcc)) && bcc.length > 0) {\n            stack.to = stack.to.concat(addressparser(bcc).filter((x) => stack.to.some((y) => y.address === x.address) === false));\n        }\n        if (typeof returnPath === 'string' && returnPath.length > 0) {\n            const parsedReturnPath = addressparser(returnPath);\n            if (parsedReturnPath.length > 0) {\n                const [{ address: returnPathAddress }] = parsedReturnPath;\n                stack.returnPath = returnPathAddress;\n            }\n        }\n        return stack;\n    }\n    /**\n     * @protected\n     * @returns {void}\n     */\n    _poll() {\n        if (this.timer != null) {\n            clearTimeout(this.timer);\n        }\n        if (this.queue.length) {\n            if (this.smtp.state() == SMTPState.NOTCONNECTED) {\n                this._connect(this.queue[0]);\n            }\n            else if (this.smtp.state() == SMTPState.CONNECTED &&\n                !this.sending &&\n                this.ready) {\n                this._sendmail(this.queue.shift());\n            }\n        }\n        // wait around 1 seconds in case something does come in,\n        // otherwise close out SMTP connection if still open\n        else if (this.smtp.state() == SMTPState.CONNECTED) {\n            this.timer = setTimeout(() => this.smtp.quit(), 1000);\n        }\n    }\n    /**\n     * @protected\n     * @param {MessageStack} stack stack\n     * @returns {void}\n     */\n    _connect(stack) {\n        /**\n         * @param {Error} err callback error\n         * @returns {void}\n         */\n        const connect = (err) => {\n            if (!err) {\n                const begin = (err) => {\n                    if (!err) {\n                        this.ready = true;\n                        this._poll();\n                    }\n                    else {\n                        stack.callback(err, stack.message);\n                        // clear out the queue so all callbacks can be called with the same error message\n                        this.queue.shift();\n                        this._poll();\n                    }\n                };\n                if (!this.smtp.authorized()) {\n                    this.smtp.login(begin);\n                }\n                else {\n                    this.smtp.ehlo_or_helo_if_needed(begin);\n                }\n            }\n            else {\n                stack.callback(err, stack.message);\n                // clear out the queue so all callbacks can be called with the same error message\n                this.queue.shift();\n                this._poll();\n            }\n        };\n        this.ready = false;\n        this.smtp.connect(connect);\n    }\n    /**\n     * @protected\n     * @param {MessageStack} msg message stack\n     * @returns {boolean} can make message\n     */\n    _canMakeMessage(msg) {\n        return (msg.from &&\n            (msg.to || msg.cc || msg.bcc) &&\n            (msg.text !== undefined || this._containsInlinedHtml(msg.attachment)));\n    }\n    /**\n     * @protected\n     * @param {MessageAttachment | MessageAttachment[]} attachment attachment\n     * @returns {boolean} whether the attachment contains inlined html\n     */\n    _containsInlinedHtml(attachment) {\n        if (Array.isArray(attachment)) {\n            return attachment.some((att) => {\n                return this._isAttachmentInlinedHtml(att);\n            });\n        }\n        else {\n            return this._isAttachmentInlinedHtml(attachment);\n        }\n    }\n    /**\n     * @protected\n     * @param {MessageAttachment} attachment attachment\n     * @returns {boolean} whether the attachment is inlined html\n     */\n    _isAttachmentInlinedHtml(attachment) {\n        return (attachment &&\n            (attachment.data || attachment.path) &&\n            attachment.alternative === true);\n    }\n    /**\n     * @protected\n     * @param {MessageStack} stack stack\n     * @param {function(MessageStack): void} next next\n     * @returns {function(Error): void} callback\n     */\n    _sendsmtp(stack, next) {\n        /**\n         * @param {Error} [err] error\n         * @returns {void}\n         */\n        return (err) => {\n            if (!err && next) {\n                next.apply(this, [stack]);\n            }\n            else {\n                // if we snag on SMTP commands, call done, passing the error\n                // but first reset SMTP state so queue can continue polling\n                this.smtp.rset(() => this._senddone(err, stack));\n            }\n        };\n    }\n    /**\n     * @protected\n     * @param {MessageStack} stack stack\n     * @returns {void}\n     */\n    _sendmail(stack) {\n        const from = stack.returnPath || stack.from;\n        this.sending = true;\n        this.smtp.mail(this._sendsmtp(stack, this._sendrcpt), '<' + from + '>');\n    }\n    /**\n     * @protected\n     * @param {MessageStack} stack stack\n     * @returns {void}\n     */\n    _sendrcpt(stack) {\n        var _a;\n        if (stack.to == null || typeof stack.to === 'string') {\n            throw new TypeError('stack.to must be array');\n        }\n        const to = (_a = stack.to.shift()) === null || _a === void 0 ? void 0 : _a.address;\n        this.smtp.rcpt(this._sendsmtp(stack, stack.to.length ? this._sendrcpt : this._senddata), `<${to}>`);\n    }\n    /**\n     * @protected\n     * @param {MessageStack} stack stack\n     * @returns {void}\n     */\n    _senddata(stack) {\n        this.smtp.data(this._sendsmtp(stack, this._sendmessage));\n    }\n    /**\n     * @protected\n     * @param {MessageStack} stack stack\n     * @returns {void}\n     */\n    _sendmessage(stack) {\n        const stream = stack.message.stream();\n        stream.on('data', (data) => this.smtp.message(data));\n        stream.on('end', () => {\n            this.smtp.data_end(this._sendsmtp(stack, () => this._senddone(null, stack)));\n        });\n        // there is no way to cancel a message while in the DATA portion,\n        // so we have to close the socket to prevent a bad email from going out\n        stream.on('error', (err) => {\n            this.smtp.close();\n            this._senddone(err, stack);\n        });\n    }\n    /**\n     * @protected\n     * @param {Error} err err\n     * @param {MessageStack} stack stack\n     * @returns {void}\n     */\n    _senddone(err, stack) {\n        this.sending = false;\n        stack.callback(err, stack.message);\n        this._poll();\n    }\n}\n\nexport { AUTH_METHODS, BUFFERSIZE, DEFAULT_TIMEOUT, MIME64CHUNK, MIMECHUNK, Message, SMTPClient, SMTPConnection, SMTPError, SMTPErrorStates, SMTPResponseMonitor, SMTPState, addressparser, getRFC2822Date, getRFC2822DateUTC, isRFC2822Date, mimeEncode, mimeWordEncode };\n//# sourceMappingURL=email.js.map\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,SAAjC,EAA4CC,KAA5C,QAAyD,IAAzD;AACA,SAASC,QAAT,QAAyB,IAAzB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,MAAzC;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,SAASC,YAAT,QAA6B,QAA7B;AACA,SAASC,MAAT,QAAuB,KAAvB;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,mBAA7B,QAAwD,KAAxD;AAEA;AACA;AACA;;AACA,MAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQ,CACtB,CAAC,GAAD,EAAM,GAAN,CADsB,EAEtB,CAAC,GAAD,EAAM,GAAN,CAFsB,EAGtB,CAAC,GAAD,EAAM,GAAN,CAHsB,EAItB,CAAC,GAAD,EAAM,EAAN,CAJsB,EAKtB;AACA,CAAC,GAAD,EAAM,GAAN,CANsB,EAOtB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,GAAD,EAAM,EAAN,CAbsB,CAAR,CAAlB;AAeA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,GAAuC;EAAA,IAAdC,OAAc,uEAAJ,EAAI;;EACnC,IAAIC,EAAJ,EAAQC,EAAR;;EACA,MAAMC,MAAM,GAAG,EAAf;EACA,IAAIC,KAAK,GAAGC,SAAZ;EACA,IAAIC,QAAQ,GAAGD,SAAf;;EACA,KAAK,MAAME,SAAX,IAAwBP,OAAO,CAACQ,QAAR,EAAxB,EAA4C;IACxC,IAAI,CAAC,CAACP,EAAE,GAAGK,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACG,MAAnE,MAA+E,IAA/E,IAAuFR,EAAE,KAAK,KAAK,CAAnG,GAAuGA,EAAvG,GAA4G,CAA7G,IAAkH,CAAlH,IAAuHM,SAAS,KAAKD,QAAzI,EAAmJ;MAC/IH,MAAM,CAACO,IAAP,CAAY;QAAEC,IAAI,EAAE,UAAR;QAAoBC,KAAK,EAAEL;MAA3B,CAAZ;MACAH,KAAK,GAAGC,SAAR;MACAC,QAAQ,GAAGD,SAAX;IACH,CAJD,MAKK,IAAI,CAAC,CAACH,EAAE,GAAGI,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACG,MAAnE,MAA+E,IAA/E,IAAuFP,EAAE,KAAK,KAAK,CAAnG,GAAuGA,EAAvG,GAA4G,CAA7G,MAAoH,CAApH,IAAyHL,SAAS,CAACgB,GAAV,CAAcN,SAAd,CAA7H,EAAuJ;MACxJJ,MAAM,CAACO,IAAP,CAAY;QAAEC,IAAI,EAAE,UAAR;QAAoBC,KAAK,EAAEL;MAA3B,CAAZ;MACAH,KAAK,GAAGC,SAAR;MACAC,QAAQ,GAAGT,SAAS,CAACiB,GAAV,CAAcP,SAAd,CAAX;IACH,CAJI,MAKA;MACD,IAAIH,KAAK,IAAI,IAAb,EAAmB;QACfA,KAAK,GAAG;UAAEO,IAAI,EAAE,MAAR;UAAgBC,KAAK,EAAEL;QAAvB,CAAR;QACAJ,MAAM,CAACO,IAAP,CAAYN,KAAZ;MACH,CAHD,MAIK;QACDA,KAAK,CAACQ,KAAN,IAAeL,SAAf;MACH;IACJ;EACJ;;EACD,OAAOJ,MAAM,CACRY,GADE,CACGC,CAAD,IAAO;IACZA,CAAC,CAACJ,KAAF,GAAUI,CAAC,CAACJ,KAAF,CAAQK,IAAR,EAAV;IACA,OAAOD,CAAP;EACH,CAJM,EAKFE,MALE,CAKMF,CAAD,IAAOA,CAAC,CAACJ,KAAF,CAAQH,MAAR,GAAiB,CAL7B,CAAP;AAMH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASU,oBAAT,CAA8BhB,MAA9B,EAAsC;EAClC,MAAMiB,cAAc,GAAG,EAAvB;EACA,MAAMC,MAAM,GAAG,EAAf;EACA,IAAIC,SAAS,GAAG,EAAhB;EACA,IAAIC,QAAQ,GAAG,EAAf;EACA,IAAIC,KAAK,GAAG,EAAZ;EACA,IAAIC,KAAK,GAAG,MAAZ;EACA,IAAIC,OAAO,GAAG,KAAd;;EACA,SAASC,WAAT,CAAqBvB,KAArB,EAA4B;IACxB,IAAIA,KAAK,CAACO,IAAN,KAAe,UAAnB,EAA+B;MAC3B,QAAQP,KAAK,CAACQ,KAAd;QACI,KAAK,GAAL;UACIa,KAAK,GAAG,SAAR;UACA;;QACJ,KAAK,GAAL;UACIA,KAAK,GAAG,SAAR;UACA;;QACJ,KAAK,GAAL;UACIA,KAAK,GAAG,OAAR;UACAC,OAAO,GAAG,IAAV;UACA;;QACJ;UACID,KAAK,GAAG,MAAR;UACA;MAbR;IAeH,CAhBD,MAiBK,IAAIrB,KAAK,CAACQ,KAAN,CAAYH,MAAZ,GAAqB,CAAzB,EAA4B;MAC7B,QAAQgB,KAAR;QACI,KAAK,SAAL;UACIH,SAAS,CAACZ,IAAV,CAAeN,KAAK,CAACQ,KAArB;UACA;;QACJ,KAAK,SAAL;UACIW,QAAQ,CAACb,IAAT,CAAcN,KAAK,CAACQ,KAApB;UACA;;QACJ,KAAK,OAAL;UACIS,MAAM,CAACX,IAAP,CAAYN,KAAK,CAACQ,KAAlB;UACA;;QACJ;UACIY,KAAK,CAACd,IAAN,CAAWN,KAAK,CAACQ,KAAjB;UACA;MAZR;IAcH;EACJ,CA1CiC,CA2ClC;;;EACA,KAAK,MAAMR,KAAX,IAAoBD,MAApB,EAA4B;IACxBwB,WAAW,CAACvB,KAAD,CAAX;EACH,CA9CiC,CA+ClC;;;EACA,IAAIoB,KAAK,CAACf,MAAN,KAAiB,CAAjB,IAAsBc,QAAQ,CAACd,MAAT,GAAkB,CAA5C,EAA+C;IAC3Ce,KAAK,GAAG,CAAC,GAAGD,QAAJ,CAAR;IACAA,QAAQ,GAAG,EAAX;EACH,CAnDiC,CAoDlC;;;EACA,IAAIG,OAAJ,EAAa;IACTN,cAAc,CAACV,IAAf,CAAoB;MAChBkB,IAAI,EAAEJ,KAAK,CAACf,MAAN,KAAiB,CAAjB,GAAqBJ,SAArB,GAAiCmB,KAAK,CAACK,IAAN,CAAW,GAAX,CADvB;MAEhBC,KAAK,EAAET,MAAM,CAACZ,MAAP,GAAgB,CAAhB,GAAoBsB,aAAa,CAACV,MAAM,CAACQ,IAAP,CAAY,GAAZ,CAAD,CAAjC,GAAsD;IAF7C,CAApB;EAIH,CALD,MAMK;IACD;IACA,IAAIP,SAAS,CAACb,MAAV,KAAqB,CAArB,IAA0Be,KAAK,CAACf,MAAN,GAAe,CAA7C,EAAgD;MAC5C,KAAK,IAAIuB,CAAC,GAAGR,KAAK,CAACf,MAAN,GAAe,CAA5B,EAA+BuB,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;QACxC,IAAIR,KAAK,CAACQ,CAAD,CAAL,CAASC,KAAT,CAAe,mBAAf,CAAJ,EAAyC;UACrCX,SAAS,GAAGE,KAAK,CAACU,MAAN,CAAaF,CAAb,EAAgB,CAAhB,CAAZ;UACA;QACH;MACJ,CAN2C,CAO5C;;;MACA,IAAIV,SAAS,CAACb,MAAV,KAAqB,CAAzB,EAA4B;QACxB,KAAK,IAAIuB,CAAC,GAAGR,KAAK,CAACf,MAAN,GAAe,CAA5B,EAA+BuB,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;UACxCR,KAAK,CAACQ,CAAD,CAAL,GAAWR,KAAK,CAACQ,CAAD,CAAL,CACNG,OADM,CACE,2BADF,EACgCnC,OAAD,IAAa;YACnD,IAAIsB,SAAS,CAACb,MAAV,KAAqB,CAAzB,EAA4B;cACxBa,SAAS,GAAG,CAACtB,OAAO,CAACiB,IAAR,EAAD,CAAZ;cACA,OAAO,GAAP;YACH,CAHD,MAIK;cACD,OAAOjB,OAAP;YACH;UACJ,CATU,EAUNiB,IAVM,EAAX;;UAWA,IAAIK,SAAS,CAACb,MAAV,GAAmB,CAAvB,EAA0B;YACtB;UACH;QACJ;MACJ;IACJ,CA5BA,CA6BD;;;IACA,IAAIe,KAAK,CAACf,MAAN,KAAiB,CAAjB,IAAsBc,QAAQ,CAACd,MAAT,GAAkB,CAA5C,EAA+C;MAC3Ce,KAAK,GAAG,CAAC,GAAGD,QAAJ,CAAR;MACAA,QAAQ,GAAG,EAAX;IACH,CAjCA,CAkCD;;;IACA,IAAID,SAAS,CAACb,MAAV,GAAmB,CAAvB,EAA0B;MACtBe,KAAK,GAAG,CAAC,GAAGA,KAAJ,EAAW,GAAGF,SAAS,CAACY,MAAV,CAAiB,CAAjB,CAAd,CAAR;IACH;;IACD,IAAIZ,SAAS,CAACb,MAAV,KAAqB,CAArB,IAA0BiB,OAA9B,EAAuC;MACnC,OAAO,EAAP;IACH,CAFD,MAGK;MACD;MACA,IAAI1B,OAAO,GAAGsB,SAAS,CAACO,IAAV,CAAe,GAAf,CAAd;MACA,IAAID,IAAI,GAAGJ,KAAK,CAACf,MAAN,KAAiB,CAAjB,GAAqBT,OAArB,GAA+BwB,KAAK,CAACK,IAAN,CAAW,GAAX,CAA1C;;MACA,IAAI7B,OAAO,KAAK4B,IAAhB,EAAsB;QAClB,IAAI5B,OAAO,CAACiC,KAAR,CAAc,GAAd,CAAJ,EAAwB;UACpBL,IAAI,GAAG,EAAP;QACH,CAFD,MAGK;UACD5B,OAAO,GAAG,EAAV;QACH;MACJ;;MACDoB,cAAc,CAACV,IAAf,CAAoB;QAAEV,OAAF;QAAW4B;MAAX,CAApB;IACH;EACJ;;EACD,OAAOR,cAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,aAAT,CAAuB/B,OAAvB,EAAgC;EAC5B,MAAMsB,SAAS,GAAG,EAAlB;EACA,IAAInB,MAAM,GAAG,EAAb;;EACA,KAAK,MAAMC,KAAX,IAAoBL,eAAe,CAACC,OAAD,CAAnC,EAA8C;IAC1C,IAAII,KAAK,CAACO,IAAN,KAAe,UAAf,KACCP,KAAK,CAACQ,KAAN,KAAgB,GAAhB,IAAuBR,KAAK,CAACQ,KAAN,KAAgB,GADxC,CAAJ,EACkD;MAC9C,IAAIT,MAAM,CAACM,MAAP,GAAgB,CAApB,EAAuB;QACnBa,SAAS,CAACZ,IAAV,CAAe,GAAGS,oBAAoB,CAAChB,MAAD,CAAtC;MACH;;MACDA,MAAM,GAAG,EAAT;IACH,CAND,MAOK;MACDA,MAAM,CAACO,IAAP,CAAYN,KAAZ;IACH;EACJ;;EACD,IAAID,MAAM,CAACM,MAAP,GAAgB,CAApB,EAAuB;IACnBa,SAAS,CAACZ,IAAV,CAAe,GAAGS,oBAAoB,CAAChB,MAAD,CAAtC;EACH;;EACD,OAAOmB,SAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASc,cAAT,GAA2D;EAAA,IAAnCC,IAAmC,uEAA5B,IAAIC,IAAJ,EAA4B;EAAA,IAAhBC,MAAgB,uEAAP,KAAO;;EACvD,IAAIA,MAAJ,EAAY;IACR,OAAOC,iBAAiB,CAACH,IAAD,CAAxB;EACH;;EACD,MAAMI,KAAK,GAAGJ,IAAI,CACb7B,QADS,GAET2B,OAFS,CAED,KAFC,EAEM,EAFN,EAGTA,OAHS,CAGD,WAHC,EAGY,EAHZ,EAITO,KAJS,CAIH,GAJG,CAAd;EAKAD,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,GAAW,GAAtB;EACA,MAAME,GAAG,GAAGF,KAAK,CAAC,CAAD,CAAjB;EACAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAhB;EACAA,KAAK,CAAC,CAAD,CAAL,GAAWE,GAAX;EACA,OAAOF,KAAK,CAACZ,IAAN,CAAW,GAAX,CAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASW,iBAAT,GAA8C;EAAA,IAAnBH,IAAmB,uEAAZ,IAAIC,IAAJ,EAAY;EAC1C,MAAMG,KAAK,GAAGJ,IAAI,CAACO,WAAL,GAAmBF,KAAnB,CAAyB,GAAzB,CAAd;EACAD,KAAK,CAACI,GAAN,GAF0C,CAE7B;;EACbJ,KAAK,CAAC/B,IAAN,CAAW,OAAX;EACA,OAAO+B,KAAK,CAACZ,IAAN,CAAW,GAAX,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,MAAMiB,SAAS,GAAG,yLAAlB;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBV,IAAvB,EAA6B;EACzB,OAAOS,SAAS,CAACE,IAAV,CAAeX,IAAf,CAAP;AACH,C,CAED;;;AACA,MAAMY,OAAO,GAAG,IAAI5D,WAAJ,EAAhB;AACA;AACA;AACA;;AACA,MAAM6D,MAAM,GAAG,CACX,CAAC,IAAD,CADW,EAEX,CAAC,IAAD,CAFW,EAGX,CAAC,IAAD,CAHW,EAIX,CAAC,IAAD,EAAO,IAAP,CAJW,EAKX,CAAC,IAAD,EAAO,IAAP,CALW,CAKG;AALH,CAAf;AAOA,MAAMC,MAAM,GAAG,mEAAmET,KAAnE,CAAyE,EAAzE,CAAf;AACA,MAAMU,gBAAgB,GAAG,KAAzB,C,CAAgC;;AAChC,MAAMC,oBAAoB,GAAG,EAA7B;AACA,MAAMC,6BAA6B,GAAG,EAAtC;;AACA,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;EAC1B,OAAQL,MAAM,CAAEK,GAAG,IAAI,EAAR,GAAc,IAAf,CAAN,GACJL,MAAM,CAAEK,GAAG,IAAI,EAAR,GAAc,IAAf,CADF,GAEJL,MAAM,CAAEK,GAAG,IAAI,CAAR,GAAa,IAAd,CAFF,GAGJL,MAAM,CAACK,GAAG,GAAG,IAAP,CAHV;AAIH;;AACD,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,GAAnC,EAAwC;EACpC,IAAIC,MAAM,GAAG,EAAb;;EACA,KAAK,IAAI7B,CAAC,GAAG2B,KAAb,EAAoB3B,CAAC,GAAG4B,GAAxB,EAA6B5B,CAAC,IAAI,CAAlC,EAAqC;IACjC6B,MAAM,IAAIN,eAAe,CAAC,CAACG,KAAK,CAAC1B,CAAD,CAAL,IAAY,EAAb,KAAoB0B,KAAK,CAAC1B,CAAC,GAAG,CAAL,CAAL,IAAgB,CAApC,IAAyC0B,KAAK,CAAC1B,CAAC,GAAG,CAAL,CAA/C,CAAzB;EACH;;EACD,OAAO6B,MAAP;AACH;;AACD,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;EACxB,MAAMC,GAAG,GAAGD,IAAI,CAACtD,MAAjB;EACA,MAAMwD,UAAU,GAAGD,GAAG,GAAG,CAAzB,CAFwB,CAEI;;EAC5B,IAAIH,MAAM,GAAG,EAAb,CAHwB,CAIxB;;EACA,KAAK,IAAI7B,CAAC,GAAG,CAAR,EAAWkC,IAAI,GAAGF,GAAG,GAAGC,UAA7B,EAAyCjC,CAAC,GAAGkC,IAA7C,EAAmDlC,CAAC,IAAIoB,gBAAxD,EAA0E;IACtES,MAAM,IAAIJ,WAAW,CAACM,IAAD,EAAO/B,CAAP,EAAUA,CAAC,GAAGoB,gBAAJ,GAAuBc,IAAvB,GAA8BA,IAA9B,GAAqClC,CAAC,GAAGoB,gBAAnD,CAArB;EACH,CAPuB,CAQxB;;;EACA,IAAIa,UAAU,KAAK,CAAnB,EAAsB;IAClB,MAAME,GAAG,GAAGJ,IAAI,CAACC,GAAG,GAAG,CAAP,CAAhB;IACAH,MAAM,IAAIV,MAAM,CAACgB,GAAG,IAAI,CAAR,CAAhB;IACAN,MAAM,IAAIV,MAAM,CAAEgB,GAAG,IAAI,CAAR,GAAa,IAAd,CAAhB;IACAN,MAAM,IAAI,IAAV;EACH,CALD,MAMK,IAAII,UAAU,KAAK,CAAnB,EAAsB;IACvB,MAAME,GAAG,GAAG,CAACJ,IAAI,CAACC,GAAG,GAAG,CAAP,CAAJ,IAAiB,CAAlB,IAAuBD,IAAI,CAACC,GAAG,GAAG,CAAP,CAAvC;IACAH,MAAM,IAAIV,MAAM,CAACgB,GAAG,IAAI,EAAR,CAAhB;IACAN,MAAM,IAAIV,MAAM,CAAEgB,GAAG,IAAI,CAAR,GAAa,IAAd,CAAhB;IACAN,MAAM,IAAIV,MAAM,CAAEgB,GAAG,IAAI,CAAR,GAAa,IAAd,CAAhB;IACAN,MAAM,IAAI,GAAV;EACH;;EACD,OAAOA,MAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,sBAAT,CAAgCC,GAAhC,EAAkD;EAAA,IAAbC,MAAa,uEAAJ,EAAI;EAC9C,MAAMC,aAAa,GAAG,EAAtB,CAD8C,CACpB;;EAC1B,MAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAASJ,MAAT,EAAiBC,aAAjB,CAAtB;EACA,MAAMI,KAAK,GAAG,EAAd;;EACA,OAAON,GAAG,CAAC5D,MAAX,EAAmB;IACf,IAAImE,OAAO,GAAGP,GAAG,CAACQ,MAAJ,CAAW,CAAX,EAAcL,aAAd,CAAd;IACA,MAAMvC,KAAK,GAAG2C,OAAO,CAAC3C,KAAR,CAAc,cAAd,CAAd,CAFe,CAE8B;;IAC7C,IAAIA,KAAJ,EAAW;MACP2C,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,CAAf,EAAkB5C,KAAK,CAAC6C,KAAxB,CAAV;IACH;;IACD,IAAIC,IAAI,GAAG,KAAX;;IACA,OAAO,CAACA,IAAR,EAAc;MACV,IAAIC,GAAJ;MACAD,IAAI,GAAG,IAAP;MACA,MAAM9C,KAAK,GAAGoC,GAAG,CAACQ,MAAJ,CAAWD,OAAO,CAACnE,MAAnB,EAA2BwB,KAA3B,CAAiC,kBAAjC,CAAd,CAHU,CAG0D;;MACpE,IAAIA,KAAJ,EAAW;QACP+C,GAAG,GAAGC,QAAQ,CAAChD,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAd,CADO,CAEP;;QACA,IAAI+C,GAAG,GAAG,IAAN,IAAcA,GAAG,GAAG,IAAxB,EAA8B;UAC1BJ,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,CAAf,EAAkBD,OAAO,CAACnE,MAAR,GAAiB,CAAnC,CAAV;UACAsE,IAAI,GAAG,KAAP;QACH;MACJ;IACJ;;IACD,IAAIH,OAAO,CAACnE,MAAZ,EAAoB;MAChBkE,KAAK,CAACjE,IAAN,CAAWkE,OAAX;IACH;;IACDP,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWD,OAAO,CAACnE,MAAnB,CAAN;EACH;;EACD,OAAOkE,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASO,WAAT,CAAqBC,EAArB,EAAyB;EACrB,OAAOjC,MAAM,CAACkC,MAAP,CAAc,CAACC,GAAD,EAAMC,KAAN,KAAgBD,GAAG,IACnCC,KAAK,CAAC7E,MAAN,KAAiB,CAAjB,IAAsB0E,EAAE,KAAKG,KAAK,CAAC,CAAD,CADF,IAEhCA,KAAK,CAAC7E,MAAN,KAAiB,CAAjB,IAAsB0E,EAAE,IAAIG,KAAK,CAAC,CAAD,CAAjC,IAAwCH,EAAE,IAAIG,KAAK,CAAC,CAAD,CAFjD,EAEuD,KAFvD,CAAP;AAGH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,GAAmD;EAAA,IAA/BxB,IAA+B,uEAAxB,EAAwB;EAAA,IAApByB,QAAoB,uEAAT,OAAS;EAC/C,MAAMC,OAAO,GAAG,IAAInG,WAAJ,CAAgBkG,QAAhB,CAAhB;EACA,MAAME,MAAM,GAAG,OAAO3B,IAAP,KAAgB,QAAhB,GACTd,OAAO,CAAC0C,MAAR,CAAe5B,IAAf,CADS,GAETd,OAAO,CAAC0C,MAAR,CAAeF,OAAO,CAACG,MAAR,CAAe7B,IAAf,CAAf,CAFN;EAGA,OAAO2B,MAAM,CAACN,MAAP,CAAc,CAACS,SAAD,EAAYC,GAAZ,EAAiBhB,KAAjB,KAA2BI,WAAW,CAACY,GAAD,CAAX,IAC5C,EAAE,CAACA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,IAAzB,MACGhB,KAAK,KAAKY,MAAM,CAACjF,MAAP,GAAgB,CAA1B,IACGiF,MAAM,CAACZ,KAAK,GAAG,CAAT,CAAN,KAAsB,IADzB,IAEGY,MAAM,CAACZ,KAAK,GAAG,CAAT,CAAN,KAAsB,IAH5B,CAAF,CAD4C,GAK1C;EACEe,SAAS,GAAGE,MAAM,CAACC,YAAP,CAAoBF,GAApB,CAN4B,GAOzC,GAAED,SAAU,IAAGC,GAAG,GAAG,IAAN,GAAa,GAAb,GAAmB,EAAG,GAAEA,GAAG,CACxCtF,QADqC,CAC5B,EAD4B,EAErCyF,WAFqC,EAEvB,EAThB,EASmB,EATnB,CAAP;AAUH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBnC,IAAxB,EAA0E;EAAA,IAA5CoC,gBAA4C,uEAAzB,GAAyB;EAAA,IAApBX,QAAoB,uEAAT,OAAS;EACtE,IAAIY,KAAK,GAAG,EAAZ;EACA,MAAMX,OAAO,GAAG,IAAInG,WAAJ,CAAgBkG,QAAhB,CAAhB;EACA,MAAMnB,GAAG,GAAG,OAAON,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkC0B,OAAO,CAACG,MAAR,CAAe7B,IAAf,CAA9C;;EACA,IAAIoC,gBAAgB,KAAK,GAAzB,EAA8B;IAC1B,MAAME,UAAU,GAAGd,UAAU,CAAClB,GAAD,EAAMmB,QAAN,CAAV,CAA0BrD,OAA1B,CAAkC,oBAAlC,EAAyD6C,GAAD,IAASA,GAAG,KAAK,GAAR,GAC9E,GAD8E,GAE9E,OACGA,GAAG,CAACsB,UAAJ,CAAe,CAAf,IAAoB,IAApB,GAA2B,GAA3B,GAAiC,EADpC,IAEEtB,GAAG,CAACsB,UAAJ,CAAe,CAAf,EAAkB9F,QAAlB,CAA2B,EAA3B,EAA+ByF,WAA/B,EAJW,CAAnB;IAKAG,KAAK,GACDC,UAAU,CAAC5F,MAAX,GAAoB4C,oBAApB,GACM,CAACgD,UAAD,CADN,GAEMjC,sBAAsB,CAACiC,UAAD,EAAahD,oBAAb,CAHhC;EAIH,CAVD,MAWK;IACD;IACA,IAAIkD,CAAC,GAAG,CAAR;IACA,IAAIvE,CAAC,GAAG,CAAR;;IACA,OAAOA,CAAC,GAAGqC,GAAG,CAAC5D,MAAf,EAAuB;MACnB,IAAIwC,OAAO,CAAC0C,MAAR,CAAetB,GAAG,CAACmC,SAAJ,CAAcD,CAAd,EAAiBvE,CAAjB,CAAf,EAAoCvB,MAApC,GACA6C,6BADJ,EACmC;QAC/B;QACA8C,KAAK,CAAC1F,IAAN,CAAW2D,GAAG,CAACmC,SAAJ,CAAcD,CAAd,EAAiBvE,CAAC,GAAG,CAArB,CAAX;QACAuE,CAAC,GAAGvE,CAAC,GAAG,CAAR;MACH,CALD,MAMK;QACDA,CAAC;MACJ;IACJ,CAdA,CAeD;;;IACAqC,GAAG,CAACmC,SAAJ,CAAcD,CAAd,KAAoBH,KAAK,CAAC1F,IAAN,CAAW2D,GAAG,CAACmC,SAAJ,CAAcD,CAAd,CAAX,CAApB;IACAH,KAAK,GAAGA,KAAK,CAACrF,GAAN,CAAWC,CAAD,IAAOiC,OAAO,CAAC0C,MAAR,CAAe3E,CAAf,CAAjB,EAAoCD,GAApC,CAAyCC,CAAD,IAAO8C,YAAY,CAAC9C,CAAD,CAA3D,CAAR;EACH;;EACD,OAAOoF,KAAK,CACPrF,GADE,CACG0F,CAAD,IAAQ,WAAUN,gBAAiB,IAAGM,CAAE,KAD1C,EAEF5E,IAFE,CAEG,EAFH,EAGFZ,IAHE,EAAP;AAIH;;AAED,MAAMyF,MAAM,GAAG,MAAf;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAG,EAAlB;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAID,SAAS,GAAG,CAAjC;AACA;AACA;AACA;;AACA,MAAME,UAAU,GAAIF,SAAS,GAAG,EAAZ,GAAiB,CAArC;AACA,IAAIG,OAAO,GAAG,CAAd;;AACA,SAASC,gBAAT,GAA4B;EACxB,IAAIC,IAAI,GAAG,EAAX;EACA,MAAMC,QAAQ,GAAG,4EAAjB;;EACA,KAAK,IAAIjF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;IACzBgF,IAAI,IAAIC,QAAQ,CAACC,MAAT,CAAgBzC,IAAI,CAAC0C,KAAL,CAAW1C,IAAI,CAAC2C,MAAL,KAAgBH,QAAQ,CAACxG,MAApC,CAAhB,CAAR;EACH;;EACD,OAAOuG,IAAP;AACH;;AACD,SAASK,sBAAT,CAAgCC,MAAhC,EAAwC;EACpC,OAAOvF,aAAa,CAACuF,MAAD,CAAb,CACFvG,GADE,CACE,QAAuB;IAAA,IAAtB;MAAEa,IAAF;MAAQ5B;IAAR,CAAsB;IAC5B,OAAO4B,IAAI,GACJ,GAAEsE,cAAc,CAACtE,IAAD,CAAd,CAAqBO,OAArB,CAA6B,IAA7B,EAAmC,KAAnC,CAA0C,KAAInC,OAAQ,GADpD,GAELA,OAFN;EAGH,CALM,EAMF6B,IANE,CAMG,IANH,CAAP;AAOH;;AACD,SAAS0F,mCAAT,CAA6CP,IAA7C,EAAmD;EAC/C,OAAOA,IAAI,CACNQ,WADE,GAEFrF,OAFE,CAEM,YAFN,EAEqBF,KAAD,IAAWA,KAAK,CAACgE,WAAN,EAF/B,CAAP;AAGH;;AACD,MAAMwB,OAAN,CAAc;EACV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,OAAD,EAAU;IACjB,KAAKC,WAAL,GAAmB,EAAnB;IACA,KAAKC,MAAL,GAAc;MACV,cAAe,IAAG,IAAIvF,IAAJ,GAAWwF,OAAX,EAAqB,IAAGhB,OAAO,EAAG,IAAGiB,OAAO,CAACC,GAAI,IAAG7I,QAAQ,EAAG,GADvE;MAEVkD,IAAI,EAAED,cAAc;IAFV,CAAd;IAIA,KAAK6F,OAAL,GAAe,2BAAf;IACA,KAAKC,WAAL,GAAmB,IAAnB;;IACA,KAAK,MAAML,MAAX,IAAqBF,OAArB,EAA8B;MAC1B;MACA,IAAI,kBAAkB3E,IAAlB,CAAuB6E,MAAvB,CAAJ,EAAoC;QAChC,KAAKI,OAAL,GAAeN,OAAO,CAACE,MAAD,CAAtB;MACH,CAFD,MAGK,IAAIA,MAAM,KAAK,MAAf,EAAuB;QACxB,KAAKb,IAAL,GAAYW,OAAO,CAACE,MAAD,CAAnB;MACH,CAFI,MAGA,IAAIA,MAAM,KAAK,YAAX,IACL,OAAOF,OAAO,CAACE,MAAD,CAAd,KAA2B,QAD1B,EACoC;QACrC,MAAMM,UAAU,GAAGR,OAAO,CAACE,MAAD,CAA1B;;QACA,IAAIO,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAJ,EAA+B;UAC3B,KAAK,IAAInG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmG,UAAU,CAAC1H,MAA/B,EAAuCuB,CAAC,EAAxC,EAA4C;YACxC,KAAKsG,MAAL,CAAYH,UAAU,CAACnG,CAAD,CAAtB;UACH;QACJ,CAJD,MAKK,IAAImG,UAAU,IAAI,IAAlB,EAAwB;UACzB,KAAKG,MAAL,CAAYH,UAAZ;QACH;MACJ,CAXI,MAYA,IAAIN,MAAM,KAAK,SAAf,EAA0B;QAC3B,KAAKA,MAAL,CAAYU,OAAZ,GAAsBrC,cAAc,CAACyB,OAAO,CAACY,OAAT,CAApC;MACH,CAFI,MAGA,IAAI,qBAAqBvF,IAArB,CAA0B6E,MAA1B,CAAJ,EAAuC;QACxC,KAAKA,MAAL,CAAYA,MAAM,CAACL,WAAP,EAAZ,IAAoCH,sBAAsB,CAACM,OAAO,CAACE,MAAD,CAAR,CAA1D;MACH,CAFI,MAGA;QACD;QACA,KAAKA,MAAL,CAAYA,MAAM,CAACL,WAAP,EAAZ,IAAoCG,OAAO,CAACE,MAAD,CAA3C;MACH;IACJ;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIS,MAAM,CAACE,OAAD,EAAU;IACZ;IACA,IAAIA,OAAO,CAACN,WAAZ,EAAyB;MACrB,KAAKA,WAAL,GAAmBM,OAAnB;MACA,KAAKN,WAAL,CAAiBO,OAAjB,GAA2BD,OAAO,CAACC,OAAR,IAAmB,OAA9C;MACA,KAAKP,WAAL,CAAiBvH,IAAjB,GAAwB6H,OAAO,CAAC7H,IAAR,IAAgB,WAAxC;MACA,KAAKuH,WAAL,CAAiBQ,MAAjB,GAA0B,IAA1B;IACH,CALD,MAMK;MACD,KAAKd,WAAL,CAAiBlH,IAAjB,CAAsB8H,OAAtB;IACH;;IACD,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIG,aAAa,GAAG;IACZ,IAAI,OAAO,KAAKd,MAAL,CAAYe,IAAnB,KAA4B,QAA5B,IACAR,KAAK,CAACC,OAAN,CAAc,KAAKR,MAAL,CAAYe,IAA1B,MAAoC,KADxC,EAC+C;MAC3C,OAAO;QACHC,OAAO,EAAE,KADN;QAEHC,eAAe,EAAE;MAFd,CAAP;IAIH;;IACD,IAAI,OAAO,KAAKjB,MAAL,CAAYkB,EAAnB,KAA0B,QAA1B,IACAX,KAAK,CAACC,OAAN,CAAc,KAAKR,MAAL,CAAYkB,EAA1B,MAAkC,KADlC,IAEA,OAAO,KAAKlB,MAAL,CAAYmB,EAAnB,KAA0B,QAF1B,IAGAZ,KAAK,CAACC,OAAN,CAAc,KAAKR,MAAL,CAAYmB,EAA1B,MAAkC,KAHlC,IAIA,OAAO,KAAKnB,MAAL,CAAYoB,GAAnB,KAA2B,QAJ3B,IAKAb,KAAK,CAACC,OAAN,CAAc,KAAKR,MAAL,CAAYoB,GAA1B,MAAmC,KALvC,EAK8C;MAC1C,OAAO;QACHJ,OAAO,EAAE,KADN;QAEHC,eAAe,EAAE;MAFd,CAAP;IAIH;;IACD,IAAI,KAAKlB,WAAL,CAAiBnH,MAAjB,GAA0B,CAA9B,EAAiC;MAC7B,MAAMyI,MAAM,GAAG,EAAf;MACA,KAAKtB,WAAL,CAAiBuB,OAAjB,CAA0BhB,UAAD,IAAgB;QACrC,IAAIA,UAAU,CAACiB,IAAf,EAAqB;UACjB,IAAItK,UAAU,CAACqJ,UAAU,CAACiB,IAAZ,CAAV,KAAgC,KAApC,EAA2C;YACvCF,MAAM,CAACxI,IAAP,CAAa,GAAEyH,UAAU,CAACiB,IAAK,iBAA/B;UACH;QACJ,CAJD,MAKK,IAAIjB,UAAU,CAACkB,MAAf,EAAuB;UACxB,IAAI,CAAClB,UAAU,CAACkB,MAAX,CAAkBC,QAAvB,EAAiC;YAC7BJ,MAAM,CAACxI,IAAP,CAAY,mCAAZ;UACH;QACJ,CAJI,MAKA,IAAI,CAACyH,UAAU,CAACpE,IAAhB,EAAsB;UACvBmF,MAAM,CAACxI,IAAP,CAAY,2CAAZ;QACH;MACJ,CAdD;MAeA,OAAO;QACHmI,OAAO,EAAEK,MAAM,CAACzI,MAAP,KAAkB,CADxB;QAEHqI,eAAe,EAAEI,MAAM,CAACrH,IAAP,CAAY,IAAZ;MAFd,CAAP;IAIH;;IACD,OAAO;MAAEgH,OAAO,EAAE,IAAX;MAAiBC,eAAe,EAAEzI;IAAlC,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIkJ,KAAK,CAACC,QAAD,EAAW;IACZ,MAAM;MAAEX,OAAF;MAAWC;IAAX,IAA+B,KAAKH,aAAL,EAArC;IACAa,QAAQ,CAACX,OAAD,EAAUC,eAAV,CAAR;EACH;EACD;AACJ;AACA;AACA;;;EACIO,MAAM,GAAG;IACL,OAAO,IAAII,aAAJ,CAAkB,IAAlB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIzK,IAAI,CAACwK,QAAD,EAAW;IACX,IAAI9D,MAAM,GAAG,EAAb;IACA,MAAMrB,GAAG,GAAG,KAAKgF,MAAL,EAAZ;IACAhF,GAAG,CAACqF,EAAJ,CAAO,MAAP,EAAgB3F,IAAD,IAAW2B,MAAM,IAAI3B,IAApC;IACAM,GAAG,CAACqF,EAAJ,CAAO,KAAP,EAAeC,GAAD,IAASH,QAAQ,CAACG,GAAD,EAAMjE,MAAN,CAA/B;IACArB,GAAG,CAACqF,EAAJ,CAAO,OAAP,EAAiBC,GAAD,IAASH,QAAQ,CAACG,GAAD,EAAMjE,MAAN,CAAjC;EACH;;EACDkE,SAAS,GAAG;IACR,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACpC,KAAK/K,IAAL,CAAU,CAAC2K,GAAD,EAAMjE,MAAN,KAAiB;QACvB,IAAIiE,GAAG,IAAI,IAAX,EAAiB;UACbI,MAAM,CAACJ,GAAD,CAAN;QACH,CAFD,MAGK;UACDG,OAAO,CAACpE,MAAD,CAAP;QACH;MACJ,CAPD;IAQH,CATM,CAAP;EAUH;;AAjKS;;AAmKd,MAAM+D,aAAN,SAA4BrK,MAA5B,CAAmC;EAC/B;AACJ;AACA;EACIsI,WAAW,CAACsC,OAAD,EAAU;IACjB;IACA,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKV,QAAL,GAAgB,IAAhB;IACA,KAAKW,MAAL,GAAc,KAAd;IACA,KAAKvE,MAAL,GAAcwE,MAAM,CAACC,KAAP,CAAaxD,SAAS,GAAG,EAAZ,GAAiB,CAA9B,CAAd;IACA,KAAKyD,WAAL,GAAmB,CAAnB;IACA;AACR;AACA;AACA;AACA;AACA;;IACQ,MAAMvG,MAAM,GAAIE,IAAD,IAAU;MACrB;MACA,IAAI,KAAK2B,MAAL,IAAe,IAAnB,EAAyB;QACrB,MAAM2E,KAAK,GAAGH,MAAM,CAACI,UAAP,CAAkBvG,IAAlB,CAAd;;QACA,IAAIsG,KAAK,GAAG,KAAKD,WAAb,GAA2B,KAAK1E,MAAL,CAAYjF,MAA3C,EAAmD;UAC/C,KAAKiF,MAAL,CAAY6E,KAAZ,CAAkBxG,IAAlB,EAAwB,KAAKqG,WAA7B;UACA,KAAKA,WAAL,IAAoBC,KAApB;QACH,CAHD,CAIA;QAJA,KAKK,IAAIA,KAAK,GAAG,KAAK3E,MAAL,CAAYjF,MAAxB,EAAgC;UACjC,IAAI,KAAK2J,WAAT,EAAsB;YAClB,KAAKI,IAAL,CAAU,MAAV,EAAkB,KAAK9E,MAAL,CAAYlF,QAAZ,CAAqB,OAArB,EAA8B,CAA9B,EAAiC,KAAK4J,WAAtC,CAAlB;YACA,KAAKA,WAAL,GAAmB,CAAnB;UACH;;UACD,MAAMK,KAAK,GAAGhG,IAAI,CAACiG,IAAL,CAAU3G,IAAI,CAACtD,MAAL,GAAc,KAAKiF,MAAL,CAAYjF,MAApC,CAAd;UACA,IAAIkK,IAAI,GAAG,CAAX;;UACA,OAAOA,IAAI,GAAGF,KAAd,EAAqB;YACjB,KAAKD,IAAL,CAAU,MAAV,EAAkBzG,IAAI,CAACyC,SAAL,CAAe,KAAKd,MAAL,CAAYjF,MAAZ,GAAqBkK,IAApC,EAA0C,KAAKjF,MAAL,CAAYjF,MAAZ,IAAsBkK,IAAI,GAAG,CAA7B,CAA1C,CAAlB;YACAA,IAAI;UACP;QACJ,CAXI,CAWH;QAXG,KAYA;UACD,IAAI,CAAC,KAAKV,MAAV,EAAkB;YACd,KAAKO,IAAL,CAAU,MAAV,EAAkB,KAAK9E,MAAL,CAAYlF,QAAZ,CAAqB,OAArB,EAA8B,CAA9B,EAAiC,KAAK4J,WAAtC,CAAlB;YACA,KAAK1E,MAAL,CAAY6E,KAAZ,CAAkBxG,IAAlB,EAAwB,CAAxB;YACA,KAAKqG,WAAL,GAAmBC,KAAnB;UACH,CAJD,MAKK;YACD;YACA,KAAKO,IAAL,CAAU,QAAV,EAAoB,MAAM/G,MAAM,CAACE,IAAD,CAAhC;UACH;QACJ;MACJ;IACJ,CAjCD;IAkCA;AACR;AACA;AACA;;;IACQ,MAAM8G,uBAAuB,GAAI1C,UAAD,IAAgB;MAC5C,IAAIpE,IAAI,GAAG,EAAX;MACA,MAAM4D,OAAO,GAAG;QACZ,gBAAgBQ,UAAU,CAACxH,IAAX,IACXwH,UAAU,CAACM,OAAX,GAAsB,aAAYN,UAAU,CAACM,OAAQ,EAArD,GAAyD,EAD9C,KAEXN,UAAU,CAAC2C,MAAX,GAAqB,YAAW3C,UAAU,CAAC2C,MAAO,EAAlD,GAAsD,EAF3C,CADJ;QAIZ,6BAA6B,QAJjB;QAKZ,uBAAuB3C,UAAU,CAACO,MAAX,GACjB,QADiB,GAEhB,yBAAwBxC,cAAc,CAACiC,UAAU,CAACvG,IAAZ,CAAkB;MAPnD,CAAhB,CAF4C,CAW5C;;MACA,IAAIuG,UAAU,CAACR,OAAX,IAAsB,IAA1B,EAAgC;QAC5B,KAAK,MAAME,MAAX,IAAqBM,UAAU,CAACR,OAAhC,EAAyC;UACrCA,OAAO,CAACE,MAAM,CAACL,WAAP,EAAD,CAAP,GAAgCW,UAAU,CAACR,OAAX,CAAmBE,MAAnB,CAAhC;QACH;MACJ;;MACD,KAAK,MAAMA,MAAX,IAAqBF,OAArB,EAA8B;QAC1B5D,IAAI,GAAGA,IAAI,CAACgH,MAAL,CAAY,CACfxD,mCAAmC,CAACM,MAAD,CADpB,EAEf,IAFe,EAGfF,OAAO,CAACE,MAAD,CAHQ,EAIfnB,MAJe,CAAZ,CAAP;MAMH;;MACD7C,MAAM,CAACE,IAAI,CAACgH,MAAL,CAAY,CAACrE,MAAD,CAAZ,EAAsB7E,IAAtB,CAA2B,EAA3B,CAAD,CAAN;IACH,CA1BD;IA2BA;AACR;AACA;AACA;AACA;;;IACQ,MAAMmJ,YAAY,GAAG,CAACjH,IAAD,EAAOyF,QAAP,KAAoB;MACrC,MAAMiB,KAAK,GAAGhG,IAAI,CAACiG,IAAL,CAAU3G,IAAI,CAACtD,MAAL,GAAckG,SAAxB,CAAd;MACA,IAAIgE,IAAI,GAAG,CAAX;;MACA,OAAOA,IAAI,GAAGF,KAAd,EAAqB;QACjB5G,MAAM,CAACE,IAAI,CAACyC,SAAL,CAAeG,SAAS,GAAGgE,IAA3B,EAAiChE,SAAS,IAAIgE,IAAI,GAAG,CAAX,CAA1C,IAA2DjE,MAA5D,CAAN;QACAiE,IAAI;MACP;;MACD,IAAInB,QAAJ,EAAc;QACVA,QAAQ;MACX;IACJ,CAVD;;IAWA,MAAMyB,UAAU,GAAG,CAAC9C,UAAD,EAAa+C,IAAb,KAAsB;MACrC,IAAIjL,EAAJ;;MACA,MAAMkL,KAAK,GAAGvE,WAAW,GAAG,EAA5B;MACA,MAAMlB,MAAM,GAAGwE,MAAM,CAACC,KAAP,CAAagB,KAAb,CAAf;MACA,MAAMC,aAAa,GAAG,CAAC,CAACnL,EAAE,GAAGkI,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACR,OAAzE,MAAsF,IAAtF,IAA8F1H,EAAE,KAAK,KAAK,CAA1G,GAA8G,KAAK,CAAnH,GAAuHA,EAAE,CAAC,2BAAD,CAA1H,KAA4J,QAAlL;MACA,MAAMuF,QAAQ,GAAG4F,aAAa,KAAK,MAAlB,GACX,OADW,GAEXA,aAAa,KAAK,MAAlB,GACI,QADJ,GAEIA,aAJV;MAKA;AACZ;AACA;AACA;AACA;;MACY,MAAMC,MAAM,GAAG,CAAC1B,GAAD,EAAM2B,EAAN,KAAa;QACxB,IAAI3B,GAAJ,EAAS;UACL,KAAKa,IAAL,CAAU,OAAV,EAAmBb,GAAnB;UACA;QACH;;QACD,MAAM4B,SAAS,GAAG,CAAC5B,GAAD,EAAMU,KAAN,KAAgB;UAC9B,IAAIV,GAAG,IAAI,KAAKL,QAAL,KAAkB,KAA7B,EAAoC;YAChC,KAAKkB,IAAL,CAAU,OAAV,EAAmBb,GAAG,IAAI,IAAI6B,KAAJ,CAAU,yCAAV,CAA1B;YACA;UACH,CAJ6B,CAK9B;;;UACAR,YAAY,CAACtF,MAAM,CAAClF,QAAP,CAAgBgF,QAAhB,EAA0B,CAA1B,EAA6B6E,KAA7B,CAAD,EAAsC,MAAM;YACpD,IAAIA,KAAK,IAAIc,KAAb,EAAoB;cAChB;cACAnM,IAAI,CAACsM,EAAD,EAAK5F,MAAL,EAAa,CAAb,EAAgByF,KAAhB,EAAuB,IAAvB,EAA6BI,SAA7B,CAAJ;YACH,CAHD,CAGE;YAHF,KAIK;cACD,KAAKE,cAAL,CAAoB,OAApB,EAA6BxM,SAA7B;cACAC,KAAK,CAACoM,EAAD,EAAKJ,IAAL,CAAL;YACH;UACJ,CATW,CAAZ;QAUH,CAhBD;;QAiBAlM,IAAI,CAACsM,EAAD,EAAK5F,MAAL,EAAa,CAAb,EAAgByF,KAAhB,EAAuB,IAAvB,EAA6BI,SAA7B,CAAJ;QACA,KAAKX,IAAL,CAAU,OAAV,EAAmB3L,SAAnB;MACH,CAxBD;;MAyBAF,IAAI,CAACoJ,UAAU,CAACiB,IAAZ,EAAkB,GAAlB,EAAuBiC,MAAvB,CAAJ;IACH,CAzCD;IA0CA;AACR;AACA;AACA;AACA;;;IACQ,MAAMK,YAAY,GAAG,CAACvD,UAAD,EAAaqB,QAAb,KAA0B;MAC3C,MAAM;QAAEH;MAAF,IAAalB,UAAnB;;MACA,IAAIkB,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACC,QAA3D,EAAqE;QACjE,IAAIqC,QAAQ,GAAGzB,MAAM,CAACC,KAAP,CAAa,CAAb,CAAf;QACAd,MAAM,CAACuC,MAAP;QACAvC,MAAM,CAACK,EAAP,CAAU,KAAV,EAAiB,MAAM;UACnBsB,YAAY,CAACW,QAAQ,CAACnL,QAAT,CAAkB,QAAlB,CAAD,EAA8BgJ,QAA9B,CAAZ;UACA,KAAKiC,cAAL,CAAoB,OAApB,EAA6BpC,MAAM,CAACwC,KAApC;UACA,KAAKJ,cAAL,CAAoB,QAApB,EAA8BpC,MAAM,CAACuC,MAArC;UACA,KAAKH,cAAL,CAAoB,OAApB,EAA6BpC,MAAM,CAACuC,MAApC;QACH,CALD;QAMAvC,MAAM,CAACK,EAAP,CAAU,MAAV,EAAmBoC,IAAD,IAAU;UACxB;UACA,IAAIpG,MAAM,GAAGwE,MAAM,CAAC6B,QAAP,CAAgBD,IAAhB,IAAwBA,IAAxB,GAA+B5B,MAAM,CAACtB,IAAP,CAAYkD,IAAZ,CAA5C;;UACA,IAAIH,QAAQ,CAACrB,UAAT,GAAsB,CAA1B,EAA6B;YACzB5E,MAAM,GAAGwE,MAAM,CAACa,MAAP,CAAc,CAACY,QAAD,EAAWjG,MAAX,CAAd,CAAT;UACH;;UACD,MAAMsG,MAAM,GAAGtG,MAAM,CAACjF,MAAP,GAAgBmG,WAA/B;UACA+E,QAAQ,GAAGzB,MAAM,CAACC,KAAP,CAAa6B,MAAb,CAAX,CAPwB,CAQxB;;UACA,IAAIA,MAAM,GAAG,CAAb,EAAgB;YACZ;YACAtG,MAAM,CAACuG,IAAP,CAAYN,QAAZ,EAAsB,CAAtB,EAAyBjG,MAAM,CAACjF,MAAP,GAAgBuL,MAAzC;UACH;;UACDhB,YAAY,CAACtF,MAAM,CAAClF,QAAP,CAAgB,QAAhB,EAA0B,CAA1B,EAA6BkF,MAAM,CAACjF,MAAP,GAAgBuL,MAA7C,CAAD,CAAZ;QACH,CAdD;QAeA,KAAKtC,EAAL,CAAQ,OAAR,EAAiBL,MAAM,CAACwC,KAAxB;QACA,KAAKnC,EAAL,CAAQ,QAAR,EAAkBL,MAAM,CAACuC,MAAzB;QACA,KAAKlC,EAAL,CAAQ,OAAR,EAAiBL,MAAM,CAACuC,MAAxB;MACH,CA3BD,MA4BK;QACD,KAAKpB,IAAL,CAAU,OAAV,EAAmB;UAAER,OAAO,EAAE;QAAX,CAAnB;MACH;IACJ,CAjCD;;IAkCA,MAAMkC,gBAAgB,GAAG,CAAC/D,UAAD,EAAaqB,QAAb,KAA0B;MAC/C,MAAM2C,KAAK,GAAGhE,UAAU,CAACiB,IAAX,GACR6B,UADQ,GAER9C,UAAU,CAACkB,MAAX,GACIqC,YADJ,GAEIU,UAJV;MAKAvB,uBAAuB,CAAC1C,UAAD,CAAvB;MACAgE,KAAK,CAAChE,UAAD,EAAaqB,QAAb,CAAL;IACH,CARD;IASA;AACR;AACA;AACA;AACA;AACA;AACA;;;IACQ,MAAM6C,aAAa,GAAG,CAACC,QAAD,EAAWC,IAAX,EAAiBzH,KAAjB,EAAwB0E,QAAxB,KAAqC;MACvD,IAAI1E,KAAK,GAAGyH,IAAI,CAAC9L,MAAjB,EAAyB;QACrBoD,MAAM,CAAE,KAAIyI,QAAS,GAAE5F,MAAO,EAAxB,CAAN;;QACA,IAAI6F,IAAI,CAACzH,KAAD,CAAJ,CAAY0H,OAAhB,EAAyB;UACrBC,aAAa,CAACF,IAAI,CAACzH,KAAD,CAAL,EAAc,MAAMuH,aAAa,CAACC,QAAD,EAAWC,IAAX,EAAiBzH,KAAK,GAAG,CAAzB,EAA4B0E,QAA5B,CAAjC,CAAb;QACH,CAFD,MAGK;UACD0C,gBAAgB,CAACK,IAAI,CAACzH,KAAD,CAAL,EAAc,MAAMuH,aAAa,CAACC,QAAD,EAAWC,IAAX,EAAiBzH,KAAK,GAAG,CAAzB,EAA4B0E,QAA5B,CAAjC,CAAhB;QACH;MACJ,CARD,MASK;QACD3F,MAAM,CAAE,GAAE6C,MAAO,KAAI4F,QAAS,KAAI5F,MAAO,GAAEA,MAAO,EAA5C,CAAN;QACA8C,QAAQ;MACX;IACJ,CAdD;;IAeA,MAAMkD,WAAW,GAAG,MAAM;MACtB,MAAMJ,QAAQ,GAAGvF,gBAAgB,EAAjC;MACAlD,MAAM,CAAE,4CAA2CyI,QAAS,IAAG5F,MAAO,GAAEA,MAAO,KAAI4F,QAAS,GAAE5F,MAAO,EAA/F,CAAN;;MACA,IAAI,KAAKsD,OAAL,CAAa9B,WAAb,IAA4B,IAAhC,EAAsC;QAClCyE,UAAU,CAAC,KAAK3C,OAAN,CAAV;QACAqC,aAAa,CAACC,QAAD,EAAW,KAAKtC,OAAL,CAAapC,WAAxB,EAAqC,CAArC,EAAwCgF,OAAxC,CAAb;MACH,CAHD,MAIK;QACDC,iBAAiB,EACjB;QACA,KAAK7C,OAFY,EAEH,MAAMqC,aAAa,CAACC,QAAD,EAAW,KAAKtC,OAAL,CAAapC,WAAxB,EAAqC,CAArC,EAAwCgF,OAAxC,CAFhB,CAAjB;MAGH;IACJ,CAZD;IAaA;AACR;AACA;AACA;AACA;;;IACQ,MAAMR,UAAU,GAAG,CAACjE,UAAD,EAAaqB,QAAb,KAA0B;MACzC,IAAIvJ,EAAJ,EAAQC,EAAR;;MACA8K,YAAY,CAAC7C,UAAU,CAAC2E,OAAX,GACP,CAAC7M,EAAE,GAAGkI,UAAU,CAACpE,IAAjB,MAA2B,IAA3B,IAAmC9D,EAAE,KAAK,KAAK,CAA/C,GAAmDA,EAAnD,GAAwD,EADjD,GAEPiK,MAAM,CAACtB,IAAP,CAAY,CAAC1I,EAAE,GAAGiI,UAAU,CAACpE,IAAjB,MAA2B,IAA3B,IAAmC7D,EAAE,KAAK,KAAK,CAA/C,GAAmDA,EAAnD,GAAwD,EAApE,EAAwEM,QAAxE,CAAiF,QAAjF,CAFM,EAEsFgJ,QAFtF,CAAZ;IAGH,CALD;IAMA;AACR;AACA;AACA;;;IACQ,MAAMmD,UAAU,GAAI3C,OAAD,IAAa;MAC5B,IAAIjG,IAAI,GAAG,EAAX;MACAA,IAAI,GAAGA,IAAI,CAACgH,MAAL,CAAY,CACf,eADe,EAEff,OAAO,CAAC/B,OAFO,EAGfvB,MAHe,EAIf,iCAJe,EAKfA,MALe,CAAZ,CAAP;MAOA3C,IAAI,GAAGA,IAAI,CAACgH,MAAL,CAAY,CAAC,6BAAD,EAAgCrE,MAAhC,EAAwCA,MAAxC,CAAZ,CAAP;MACA3C,IAAI,GAAGA,IAAI,CAACgH,MAAL,CAAY,CAACf,OAAO,CAAChD,IAAR,IAAgB,EAAjB,EAAqBN,MAArB,EAA6BA,MAA7B,CAAZ,CAAP;MACA7C,MAAM,CAACE,IAAI,CAAClC,IAAL,CAAU,EAAV,CAAD,CAAN;IACH,CAZD;IAaA;AACR;AACA;AACA;AACA;;;IACQ,MAAM4K,aAAa,GAAG,CAACzC,OAAD,EAAUR,QAAV,KAAuB;MACzC,MAAM8C,QAAQ,GAAGvF,gBAAgB,EAAjC;MACAlD,MAAM,CAAE,8CAA6CyI,QAAS,IAAG5F,MAAO,GAAEA,MAAO,KAAI4F,QAAS,GAAE5F,MAAO,EAAjG,CAAN;MACAwF,gBAAgB,CAAClC,OAAD,EAAU,MAAM;QAC5B,IAAI/J,EAAJ;;QACAoM,aAAa,CAACC,QAAD,EAAW,CAACrM,EAAE,GAAG+J,OAAO,CAACwC,OAAd,MAA2B,IAA3B,IAAmCvM,EAAE,KAAK,KAAK,CAA/C,GAAmDA,EAAnD,GAAwD,EAAnE,EAAuE,CAAvE,EAA0E,MAAM;UACzF4D,MAAM,CAAE,GAAE6C,MAAO,KAAI4F,QAAS,KAAI5F,MAAO,GAAEA,MAAO,EAA5C,CAAN;UACA8C,QAAQ;QACX,CAHY,CAAb;MAIH,CANe,CAAhB;IAOH,CAVD;IAWA;AACR;AACA;AACA;AACA;;;IACQ,MAAMqD,iBAAiB,GAAG,CAAC7C,OAAD,EAAUR,QAAV,KAAuB;MAC7C,MAAM8C,QAAQ,GAAGvF,gBAAgB,EAAjC;MACAlD,MAAM,CAAE,kDAAiDyI,QAAS,IAAG5F,MAAO,GAAEA,MAAO,KAAI4F,QAAS,GAAE5F,MAAO,EAArG,CAAN;MACAiG,UAAU,CAAC3C,OAAD,CAAV;MACAnG,MAAM,CAAE,KAAIyI,QAAS,GAAE5F,MAAO,EAAxB,CAAN;MACA;AACZ;AACA;;MACY,MAAMqG,MAAM,GAAG,MAAM;QACjBlJ,MAAM,CAAC,CAAC6C,MAAD,EAAS,IAAT,EAAe4F,QAAf,EAAyB,IAAzB,EAA+B5F,MAA/B,EAAuCA,MAAvC,EAA+C7E,IAA/C,CAAoD,EAApD,CAAD,CAAN;QACA2H,QAAQ;MACX,CAHD;;MAIA,IAAIQ,OAAO,CAAC9B,WAAR,CAAoBsE,OAAxB,EAAiC;QAC7BC,aAAa,CAACzC,OAAO,CAAC9B,WAAT,EAAsB6E,MAAtB,CAAb;MACH,CAFD,MAGK;QACDb,gBAAgB,CAAClC,OAAO,CAAC9B,WAAT,EAAsB6E,MAAtB,CAAhB;MACH;IACJ,CAlBD;;IAmBA,MAAMH,OAAO,GAAIjD,GAAD,IAAS;MACrB,IAAI1J,EAAJ,EAAQC,EAAR;;MACA,IAAIyJ,GAAJ,EAAS;QACL,KAAKa,IAAL,CAAU,OAAV,EAAmBb,GAAnB;MACH,CAFD,MAGK;QACD,KAAKa,IAAL,CAAU,MAAV,EAAkB,CAACtK,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKyF,MAAX,MAAuB,IAAvB,IAA+BzF,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACO,QAAH,CAAY,OAAZ,EAAqB,CAArB,EAAwB,KAAK4J,WAA7B,CAA9D,MAA6G,IAA7G,IAAqHlK,EAAE,KAAK,KAAK,CAAjI,GAAqIA,EAArI,GAA0I,EAA5J;QACA,KAAKsK,IAAL,CAAU,KAAV;MACH;;MACD,KAAK9E,MAAL,GAAc,IAAd;MACA,KAAK0E,WAAL,GAAmB,CAAnB;MACA,KAAKd,QAAL,GAAgB,KAAhB;MACA,KAAK0D,kBAAL,CAAwB,QAAxB;MACA,KAAKA,kBAAL,CAAwB,OAAxB;MACA,KAAKA,kBAAL,CAAwB,OAAxB;MACA,KAAKA,kBAAL,CAAwB,MAAxB;MACA,KAAKA,kBAAL,CAAwB,KAAxB;IACH,CAjBD;IAkBA;AACR;AACA;;;IACQ,MAAMC,gBAAgB,GAAG,MAAM;MAC3B,IAAI,KAAKjD,OAAL,CAAapC,WAAb,CAAyBnH,MAAzB,IAAmC,KAAKuJ,OAAL,CAAa9B,WAApD,EAAiE;QAC7DrE,MAAM,CAAE,oBAAmB6C,MAAO,EAA5B,CAAN;QACAgG,WAAW;MACd,CAHD,CAGE;MAHF,KAIK;QACDC,UAAU,CAAC,KAAK3C,OAAN,CAAV;QACA4C,OAAO;MACV;IACJ,CATD;IAUA;AACR;AACA;;;IACQ,MAAMM,YAAY,GAAG,MAAM;MACvB,IAAInJ,IAAI,GAAG,EAAX;;MACA,KAAK,MAAM8D,MAAX,IAAqB,KAAKmC,OAAL,CAAanC,MAAlC,EAA0C;QACtC;QACA,IAAI,CAAC,OAAO7E,IAAP,CAAY6E,MAAZ,CAAD,IACAsF,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC,KAAKtD,OAAL,CAAanC,MAAlD,EAA0DA,MAA1D,CADJ,EACuE;UACnE9D,IAAI,GAAGA,IAAI,CAACgH,MAAL,CAAY,CACfxD,mCAAmC,CAACM,MAAD,CADpB,EAEf,IAFe,EAGf,KAAKmC,OAAL,CAAanC,MAAb,CAAoBA,MAApB,CAHe,EAIfnB,MAJe,CAAZ,CAAP;QAMH;MACJ;;MACD7C,MAAM,CAACE,IAAI,CAAClC,IAAL,CAAU,EAAV,CAAD,CAAN;MACAoL,gBAAgB;IACnB,CAhBD;;IAiBA,KAAKrC,IAAL,CAAU,SAAV,EAAqBgC,OAArB;IACA7E,OAAO,CAACwF,QAAR,CAAiBL,YAAjB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIrB,KAAK,GAAG;IACJ,KAAK5B,MAAL,GAAc,IAAd;IACA,KAAKO,IAAL,CAAU,OAAV;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIoB,MAAM,GAAG;IACL,KAAK3B,MAAL,GAAc,KAAd;IACA,KAAKO,IAAL,CAAU,QAAV;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIgD,OAAO,GAAG;IACN,KAAKhD,IAAL,CAAU,SAAV,EAAqB,KAAKJ,WAAL,GAAmB,CAAnB,GAAuB;MAAEJ,OAAO,EAAE;IAAX,CAAvB,GAAiE,IAAtF;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIyD,WAAW,GAAG;IACV,KAAKjD,IAAL,CAAU,SAAV;EACH;;AA1X8B;AA6XnC;AACA;AACA;AACA;;;AACA,MAAMkD,eAAe,GAAG;EACpBC,eAAe,EAAE,CADG;EAEpBC,WAAW,EAAE,CAFO;EAGpBC,UAAU,EAAE,CAHQ;EAIpBC,QAAQ,EAAE,CAJU;EAKpBC,KAAK,EAAE,CALa;EAMpBC,YAAY,EAAE,CANM;EAOpBC,gBAAgB,EAAE,CAPE;EAQpBC,gBAAgB,EAAE,CARE;EASpBC,eAAe,EAAE,CATG;EAUpBC,cAAc,EAAE;AAVI,CAAxB;;AAYA,MAAMC,SAAN,SAAwB7C,KAAxB,CAA8B;EAC1B;AACJ;AACA;AACA;EACI9D,WAAW,CAACsC,OAAD,EAAU;IACjB,MAAMA,OAAN;IACA,KAAKsE,IAAL,GAAY,IAAZ;IACA,KAAKC,IAAL,GAAY,IAAZ;IACA,KAAK5C,QAAL,GAAgB,IAAhB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACiB,OAAN6C,MAAM,CAACxE,OAAD,EAAUsE,IAAV,EAAgBG,KAAhB,EAAuBF,IAAvB,EAA6B;IACtC,MAAMG,GAAG,GAAG,CAACD,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACzE,OAArD,IAAiE,GAAEA,OAAQ,KAAIyE,KAAK,CAACzE,OAAQ,GAA7F,GAAkGA,OAA9G;IACA,MAAML,GAAG,GAAG,IAAI0E,SAAJ,CAAcK,GAAd,CAAZ;IACA/E,GAAG,CAAC2E,IAAJ,GAAWA,IAAX;IACA3E,GAAG,CAAC4E,IAAJ,GAAWA,IAAX;;IACA,IAAIE,KAAJ,EAAW;MACP9E,GAAG,CAACgC,QAAJ,GAAe8C,KAAf;IACH;;IACD,OAAO9E,GAAP;EACH;;AA5ByB;;AA+B9B,MAAMgF,mBAAN,CAA0B;EACtBjH,WAAW,CAAC2B,MAAD,EAASuF,OAAT,EAAkBC,OAAlB,EAA2B;IAClC,IAAInJ,MAAM,GAAG,EAAb;;IACA,MAAMoJ,MAAM,GAAG,MAAM;MACjB,IAAI7O,EAAJ,EAAQC,EAAR;;MACA,IAAIwF,MAAM,CAACjF,MAAX,EAAmB;QACf;QACA,MAAMsO,IAAI,GAAGrJ,MAAM,CAACvD,OAAP,CAAe,IAAf,EAAqB,EAArB,CAAb;;QACA,IAAI,EAAE,CAACjC,EAAE,GAAG,CAACD,EAAE,GAAG8O,IAAI,CACjB9N,IADa,GAEbyB,KAFa,CAEP,IAFO,EAGbG,GAHa,EAAN,MAGI,IAHJ,IAGY5C,EAAE,KAAK,KAAK,CAHxB,GAG4B,KAAK,CAHjC,GAGqCA,EAAE,CAACgC,KAAH,CAAS,YAAT,CAH3C,MAGuE,IAHvE,IAG+E/B,EAAE,KAAK,KAAK,CAH3F,GAG+FA,EAH/F,GAGoG,KAHtG,CAAJ,EAGkH;UAC9G;QACH;;QACD,MAAM+B,KAAK,GAAG8M,IAAI,GAAGA,IAAI,CAAC9M,KAAL,CAAW,cAAX,CAAH,GAAgC,IAAlD;QACA,MAAM8B,IAAI,GAAG9B,KAAK,KAAK,IAAV,GACP;UAAEqM,IAAI,EAAErM,KAAK,CAAC,CAAD,CAAb;UAAkB+H,OAAO,EAAE/H,KAAK,CAAC,CAAD,CAAhC;UAAqC8B,IAAI,EAAEgL;QAA3C,CADO,GAEP;UAAET,IAAI,EAAE,CAAC,CAAT;UAAYvK,IAAI,EAAEgL;QAAlB,CAFN;QAGA1F,MAAM,CAACmB,IAAP,CAAY,UAAZ,EAAwB,IAAxB,EAA8BzG,IAA9B;QACA2B,MAAM,GAAG,EAAT;MACH;IACJ,CAlBD;;IAmBA,MAAM+I,KAAK,GAAI9E,GAAD,IAAS;MACnBN,MAAM,CAACmB,IAAP,CAAY,UAAZ,EAAwB6D,SAAS,CAACG,MAAV,CAAiB,iCAAjB,EAAoDd,eAAe,CAACK,KAApE,EAA2EpE,GAA3E,CAAxB;IACH,CAFD;;IAGA,MAAMqF,QAAQ,GAAIrF,GAAD,IAAS;MACtBN,MAAM,CAACzF,GAAP;MACAyF,MAAM,CAACmB,IAAP,CAAY,UAAZ,EAAwB6D,SAAS,CAACG,MAAV,CAAiB,0CAAjB,EAA6Dd,eAAe,CAACI,QAA7E,EAAuFnE,GAAvF,CAAxB;IACH,CAHD;;IAIA,MAAMsF,KAAK,GAAIlL,IAAD,IAAU;MACpB,IAAIA,IAAI,KAAK,IAAb,EAAmB;QACf2B,MAAM,IAAI3B,IAAI,CAACvD,QAAL,EAAV;QACAsO,MAAM;MACT;IACJ,CALD;;IAMA,MAAM5P,KAAK,GAAIyK,GAAD,IAAS;MACnBN,MAAM,CAACmB,IAAP,CAAY,UAAZ,EAAwB6D,SAAS,CAACG,MAAV,CAAiB,uBAAjB,EAA0Cd,eAAe,CAACQ,gBAA1D,EAA4EvE,GAA5E,CAAxB;IACH,CAFD;;IAGA,MAAM/F,GAAG,GAAI+F,GAAD,IAAS;MACjBN,MAAM,CAACmB,IAAP,CAAY,UAAZ,EAAwB6D,SAAS,CAACG,MAAV,CAAiB,sBAAjB,EAAyCd,eAAe,CAACS,eAAzD,EAA0ExE,GAA1E,CAAxB;IACH,CAFD;;IAGA,KAAKuF,IAAL,GAAavF,GAAD,IAAS;MACjBN,MAAM,CAAC2D,kBAAP,CAA0B,UAA1B;MACA3D,MAAM,CAACoC,cAAP,CAAsB,MAAtB,EAA8BwD,KAA9B;MACA5F,MAAM,CAACoC,cAAP,CAAsB,KAAtB,EAA6B7H,GAA7B;MACAyF,MAAM,CAACoC,cAAP,CAAsB,OAAtB,EAA+BvM,KAA/B;MACAmK,MAAM,CAACoC,cAAP,CAAsB,OAAtB,EAA+BgD,KAA/B;;MACA,IAAI9E,GAAG,IAAI,IAAP,IAAe,OAAOkF,OAAP,KAAmB,UAAtC,EAAkD;QAC9CA,OAAO,CAAClF,GAAD,CAAP;MACH;IACJ,CATD;;IAUAN,MAAM,CAACK,EAAP,CAAU,MAAV,EAAkBuF,KAAlB;IACA5F,MAAM,CAACK,EAAP,CAAU,KAAV,EAAiB9F,GAAjB;IACAyF,MAAM,CAACK,EAAP,CAAU,OAAV,EAAmBxK,KAAnB;IACAmK,MAAM,CAACK,EAAP,CAAU,OAAV,EAAmB+E,KAAnB;IACApF,MAAM,CAAC8F,UAAP,CAAkBP,OAAlB,EAA2BI,QAA3B;EACH;;AAxDqB;AA2D1B;AACA;AACA;AACA;;;AACA,MAAMI,YAAY,GAAG;EACjBC,KAAK,EAAE,OADU;EAEjB,YAAY,UAFK;EAGjBC,KAAK,EAAE,OAHU;EAIjBC,OAAO,EAAE;AAJQ,CAArB;AAMA;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAG;EACdC,YAAY,EAAE,CADA;EAEdC,UAAU,EAAE,CAFE;EAGdC,SAAS,EAAE;AAHG,CAAlB;AAKA,MAAMC,eAAe,GAAG,IAAxB;AACA,MAAMC,SAAS,GAAG,EAAlB;AACA,MAAMC,aAAa,GAAG,GAAtB;AACA,MAAMC,aAAa,GAAG,GAAtB;AACA,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,cAAc,GAAG,GAAvB;AACA,IAAIC,KAAK,GAAG,CAAZ;AACA;AACA;AACA;AACA;;AACA,MAAMC,GAAG,GAAG,YAAa;EACrB,IAAID,KAAK,KAAK,CAAd,EAAiB;IAAA,kCADLE,IACK;MADLA,IACK;IAAA;;IACbA,IAAI,CAACjH,OAAL,CAAckH,CAAD,IAAOC,OAAO,CAACH,GAAR,CAAY,OAAOE,CAAP,KAAa,QAAb,GAC1BA,CAAC,YAAY7E,KAAb,GACI6E,CAAC,CAACrG,OADN,GAEIuG,IAAI,CAACC,SAAL,CAAeH,CAAf,CAHsB,GAI1BA,CAJc,CAApB;EAKH;AACJ,CARD;AASA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,MAAM,GAAG,UAACjH,QAAD,EAAuB;EAClC,IAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;IAAA,mCADX4G,IACW;MADXA,IACW;IAAA;;IAChC5G,QAAQ,CAAC,GAAG4G,IAAJ,CAAR;EACH;AACJ,CAJD;;AAKA,MAAMM,cAAN,SAA6BlR,YAA7B,CAA0C;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIkI,WAAW,GAA0F;IAAA,IAAzF;MAAEkH,OAAF;MAAW+B,IAAX;MAAiBC,IAAjB;MAAuBC,QAAvB;MAAiCC,MAAjC;MAAyCC,IAAzC;MAA+CC,GAA/C;MAAoDC,GAApD;MAAyDC,MAAzD;MAAiEC;IAAjE,CAAyF,uEAAJ,EAAI;;IACjG,IAAIlR,EAAJ;;IACA;IACA,KAAK2O,OAAL,GAAegB,eAAf;IACA,KAAKO,GAAL,GAAWA,GAAX;IACA,KAAKgB,cAAL,GAAsB,CAClB/B,YAAY,CAAC,UAAD,CADM,EAElBA,YAAY,CAACE,KAFK,EAGlBF,YAAY,CAACC,KAHK,EAIlBD,YAAY,CAACG,OAJK,CAAtB;IAMA,KAAK6B,MAAL,GAAc5B,SAAS,CAACC,YAAxB;IACA,KAAK4B,OAAL,GAAe,KAAf;IACA,KAAKC,QAAL,GAAgB,KAAhB;IACA,KAAKC,IAAL,GAAY,IAAZ;IACA,KAAKC,QAAL,GAAgB,IAAhB;IACA,KAAKC,OAAL,GAAe,IAAf;IACA,KAAKX,MAAL,GAAc3R,QAAQ,EAAtB;IACA,KAAKwR,IAAL,GAAY,WAAZ;IACA,KAAKK,GAAL,GAAW,KAAX;IACA,KAAKC,GAAL,GAAW,KAAX;IACA,KAAKS,uBAAL,GAA+B,IAAIC,OAAJ,EAA/B;;IACA,IAAIvJ,KAAK,CAACC,OAAN,CAAc8I,cAAd,CAAJ,EAAmC;MAC/B,KAAKA,cAAL,GAAsBA,cAAtB;IACH;;IACD,IAAI,OAAOvC,OAAP,KAAmB,QAAvB,EAAiC;MAC7B,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACD,IAAI,OAAOkC,MAAP,KAAkB,QAAtB,EAAgC;MAC5B,KAAKA,MAAL,GAAcA,MAAd;IACH;;IACD,IAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;MAC1B,KAAKA,IAAL,GAAYA,IAAZ;IACH;;IACD,IAAIK,GAAG,IAAI,IAAP,KACC,OAAOA,GAAP,KAAe,SAAf,IACI,OAAOA,GAAP,KAAe,QAAf,IAA2B5I,KAAK,CAACC,OAAN,CAAc2I,GAAd,MAAuB,KAFvD,CAAJ,EAEoE;MAChE,KAAKA,GAAL,GAAWA,GAAX;IACH;;IACD,IAAIC,GAAG,IAAI,IAAP,KACC,OAAOA,GAAP,KAAe,SAAf,IACI,OAAOA,GAAP,KAAe,QAAf,IAA2B7I,KAAK,CAACC,OAAN,CAAc4I,GAAd,MAAuB,KAFvD,CAAJ,EAEoE;MAChE,KAAKA,GAAL,GAAWA,GAAX;IACH;;IACD,KAAKF,IAAL,GAAYA,IAAI,KAAKC,GAAG,GAAGlB,aAAH,GAAmBmB,GAAG,GAAGlB,aAAH,GAAmBF,SAAjD,CAAhB;IACA,KAAKyB,QAAL,GAAgBV,IAAI,IAAIC,QAAR,GAAmB,KAAnB,GAA2B,IAA3C;;IACA,IAAI,CAACD,IAAD,IAAS,CAAC,CAAC3Q,EAAE,GAAG4Q,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACpQ,MAAnE,MAA+E,IAA/E,IAAuFR,EAAE,KAAK,KAAK,CAAnG,GAAuGA,EAAvG,GAA4G,CAA7G,IAAkH,CAA/H,EAAkI;MAC9H,MAAM,IAAIuL,KAAJ,CAAU,yCAAV,CAAN;IACH,CAhDgG,CAiDjG;;;IACA,KAAKoF,IAAL,GAAY,MAAMA,IAAlB;;IACA,KAAKC,QAAL,GAAgB,MAAMA,QAAtB;;IACA,IAAI,OAAOK,MAAP,KAAkB,UAAtB,EAAkC;MAC9B,KAAKf,GAAL,GAAWA,GAAX;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACIyB,KAAK,CAACC,KAAD,EAAQ;IACT3B,KAAK,GAAG2B,KAAR;EACH;EACD;AACJ;AACA;AACA;;;EACIpQ,KAAK,GAAG;IACJ,OAAO,KAAK2P,MAAZ;EACH;EACD;AACJ;AACA;AACA;;;EACIU,UAAU,GAAG;IACT,OAAO,KAAKR,QAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI5R,OAAO,CAAC8J,QAAD,EAA6D;IAAA,IAAlDuH,IAAkD,uEAA3C,KAAKA,IAAsC;IAAA,IAAhCJ,IAAgC,uEAAzB,KAAKA,IAAoB;IAAA,IAAdnI,OAAc,uEAAJ,EAAI;IAChE,KAAKuI,IAAL,GAAYA,IAAZ;IACA,KAAKJ,IAAL,GAAYA,IAAZ;IACA,KAAKK,GAAL,GAAWxI,OAAO,CAACwI,GAAR,IAAe,KAAKA,GAA/B;;IACA,IAAI,KAAKI,MAAL,KAAgB5B,SAAS,CAACC,YAA9B,EAA4C;MACxC,KAAKsC,IAAL,CAAU,MAAM,KAAKrS,OAAL,CAAa8J,QAAb,EAAuBuH,IAAvB,EAA6BJ,IAA7B,EAAmCnI,OAAnC,CAAhB;IACH;IACD;AACR;AACA;;;IACQ,MAAMwJ,SAAS,GAAG,MAAM;MACpB,KAAK7B,GAAL,CAAU,cAAa,KAAKQ,IAAK,IAAG,KAAKI,IAAK,EAA9C;;MACA,IAAI,KAAKC,GAAL,IAAY,CAAC,KAAKC,GAAtB,EAA2B;QACvB;QACA,IAAI,OAAO,KAAKD,GAAZ,KAAoB,SAApB,IACA,KAAKO,IAAL,YAAqB5R,SADrB,IAEA,CAAC,KAAK4R,IAAL,CAAUO,UAFf,EAE2B;UACvB,KAAK5S,KAAL,CAAW,IAAX;UACAuR,MAAM,CAACjH,QAAD,EAAW6E,SAAS,CAACG,MAAV,CAAiB,uCAAjB,EAA0Dd,eAAe,CAACU,cAA1E,CAAX,CAAN;QACH,CALD,MAMK;UACD,KAAKiD,OAAL,GAAe,IAAf;QACH;MACJ;IACJ,CAdD;IAeA;AACR;AACA;AACA;;;IACQ,MAAMY,gBAAgB,GAAItI,GAAD,IAAS;MAC9B,IAAI,CAACA,GAAL,EAAU;QACNqI,SAAS;MACZ,CAFD,MAGK;QACD,KAAK9S,KAAL,CAAW,IAAX;QACA,KAAKiR,GAAL,CAASxG,GAAT;QACA8G,MAAM,CAACjH,QAAD,EAAW6E,SAAS,CAACG,MAAV,CAAiB,mBAAjB,EAAsCd,eAAe,CAACC,eAAtD,EAAuEhE,GAAvE,CAAX,CAAN;MACH;IACJ,CATD;;IAUA,MAAMuI,QAAQ,GAAG,CAACvI,GAAD,EAAM+E,GAAN,KAAc;MAC3B,IAAI/E,GAAJ,EAAS;QACL,IAAI,KAAKyH,MAAL,KAAgB5B,SAAS,CAACC,YAA1B,IAA0C,CAAC,KAAK8B,IAApD,EAA0D;UACtD;QACH;;QACD,KAAKrS,KAAL,CAAW,IAAX;QACAuR,MAAM,CAACjH,QAAD,EAAWG,GAAX,CAAN;MACH,CAND,MAOK,IAAI+E,GAAG,CAACJ,IAAJ,IAAY,KAAhB,EAAuB;QACxB,KAAK6B,GAAL,CAASzB,GAAG,CAAC3K,IAAb,EADwB,CAExB;;QACA,KAAKqN,MAAL,GAAc5B,SAAS,CAACG,SAAxB;QACAc,MAAM,CAACjH,QAAD,EAAW,IAAX,EAAiBkF,GAAG,CAAC3K,IAArB,CAAN;MACH,CALI,MAMA;QACD,KAAKoM,GAAL,CAAU,oBAAmBzB,GAAG,CAAC3K,IAAK,EAAtC;QACA,KAAKgO,IAAL,CAAU,MAAM;UACZtB,MAAM,CAACjH,QAAD,EAAW6E,SAAS,CAACG,MAAV,CAAiB,4BAAjB,EAA+Cd,eAAe,CAACE,WAA/D,EAA4EjE,GAA5E,EAAiF+E,GAAG,CAAC3K,IAArF,CAAX,CAAN;QACH,CAFD;MAGH;IACJ,CApBD;;IAqBA,KAAKqN,MAAL,GAAc5B,SAAS,CAACE,UAAxB;IACA,KAAKS,GAAL,CAAU,eAAc,KAAKQ,IAAK,IAAG,KAAKI,IAAK,EAA/C;;IACA,IAAI,KAAKC,GAAT,EAAc;MACV,KAAKO,IAAL,GAAY7R,OAAO,CAAC,KAAKqR,IAAN,EAAY,KAAKJ,IAAL,CAAU1P,IAAV,EAAZ,EAA8B,OAAO,KAAK+P,GAAZ,KAAoB,QAApB,GAA+B,KAAKA,GAApC,GAA0C,EAAxE,EAA4EgB,SAA5E,CAAnB;IACH,CAFD,MAGK;MACD,KAAKT,IAAL,GAAY,IAAI9R,MAAJ,EAAZ;MACA,KAAK8R,IAAL,CAAU7R,OAAV,CAAkB,KAAKqR,IAAvB,EAA6B,KAAKJ,IAAL,CAAU1P,IAAV,EAA7B,EAA+CgR,gBAA/C;IACH;;IACD,KAAKR,OAAL,GAAe,IAAI9C,mBAAJ,CAAwB,KAAK4C,IAA7B,EAAmC,KAAK3C,OAAxC,EAAiD,MAAM,KAAK1P,KAAL,CAAW,IAAX,CAAvD,CAAf;IACA,KAAKqS,IAAL,CAAU3G,IAAV,CAAe,UAAf,EAA2BsH,QAA3B;IACA,KAAKX,IAAL,CAAU3G,IAAV,CAAe,OAAf,EAAwBsH,QAAxB,EAvEgE,CAuE7B;EACtC;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIC,IAAI,CAAC9N,GAAD,EAAMmF,QAAN,EAAgB;IAChB,IAAI,KAAK+H,IAAL,IAAa,IAAb,IAAqB,KAAKH,MAAL,KAAgB5B,SAAS,CAACG,SAAnD,EAA8D;MAC1D,KAAKQ,GAAL,CAAS9L,GAAT;MACA,KAAKkN,IAAL,CAAU3G,IAAV,CAAe,UAAf,EAA2B,CAACjB,GAAD,EAAM+E,GAAN,KAAc;QACrC,IAAI/E,GAAJ,EAAS;UACL8G,MAAM,CAACjH,QAAD,EAAWG,GAAX,CAAN;QACH,CAFD,MAGK;UACD,KAAKwG,GAAL,CAASzB,GAAG,CAAC3K,IAAb;UACA0M,MAAM,CAACjH,QAAD,EAAW,IAAX,EAAiBkF,GAAjB,CAAN;QACH;MACJ,CARD;;MASA,IAAI,KAAK6C,IAAL,CAAUa,QAAd,EAAwB;QACpB,KAAKb,IAAL,CAAUhH,KAAV,CAAgBlG,GAAhB;MACH;IACJ,CAdD,MAeK;MACD,KAAKnF,KAAL,CAAW,IAAX;MACAuR,MAAM,CAACjH,QAAD,EAAW6E,SAAS,CAACG,MAAV,CAAiB,oCAAjB,EAAuDd,eAAe,CAACM,YAAvE,CAAX,CAAN;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIqE,OAAO,CAACC,GAAD,EAAM9I,QAAN,EAA+B;IAAA,IAAf+I,KAAe,uEAAP,CAAC,GAAD,CAAO;IAClC,MAAMC,UAAU,GAAGpK,KAAK,CAACC,OAAN,CAAckK,KAAd,IACbA,KADa,GAEb,OAAOA,KAAP,KAAiB,QAAjB,GACI,CAACA,KAAD,CADJ,GAEI,CAAC,GAAD,CAJV;;IAKA,MAAML,QAAQ,GAAG,CAACvI,GAAD,EAAM+E,GAAN,KAAc;MAC3B,IAAI/E,GAAJ,EAAS;QACL8G,MAAM,CAACjH,QAAD,EAAWG,GAAX,CAAN;MACH,CAFD,MAGK;QACD,MAAM2E,IAAI,GAAGmE,MAAM,CAAC/D,GAAG,CAACJ,IAAL,CAAnB;;QACA,IAAIkE,UAAU,CAACE,OAAX,CAAmBpE,IAAnB,MAA6B,CAAC,CAAlC,EAAqC;UACjCmC,MAAM,CAACjH,QAAD,EAAWG,GAAX,EAAgB+E,GAAG,CAAC3K,IAApB,EAA0B2K,GAAG,CAAC1E,OAA9B,CAAN;QACH,CAFD,MAGK,IAAI,CAACsE,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAA1B,KACLI,GAAG,CAAC1E,OAAJ,CAAYxC,WAAZ,GAA0BmL,QAA1B,CAAmC,UAAnC,CADK,IAEL,KAAKjB,uBAAL,CAA6B7Q,GAA7B,CAAiCqR,QAAjC,MAA+C,KAF9C,EAEqD;UACtD,KAAKR,uBAAL,CAA6BkB,GAA7B,CAAiCV,QAAjC;UACA/C,UAAU,CAAC,MAAM;YACb,KAAKgD,IAAL,CAAUG,GAAG,GAAGtC,IAAhB,EAAsBkC,QAAtB;UACH,CAFS,EAEPjC,cAFO,CAAV;QAGH,CAPI,MAQA;UACD,MAAM4C,MAAM,GAAGnE,GAAG,CAAC1E,OAAJ,GAAe,KAAI0E,GAAG,CAAC1E,OAAQ,EAA/B,GAAmC,EAAlD;UACA,MAAM8I,YAAY,GAAI,4BAA2BR,GAAG,CAAC5P,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAkB,IAAGmQ,MAAO,EAA7E;UACApC,MAAM,CAACjH,QAAD,EAAW6E,SAAS,CAACG,MAAV,CAAiBsE,YAAjB,EAA+BpF,eAAe,CAACE,WAA/C,EAA4D,IAA5D,EAAkEc,GAAG,CAAC3K,IAAtE,CAAX,CAAN;QACH;MACJ;IACJ,CAvBD;;IAwBA,KAAK2N,uBAAL,CAA6BqB,MAA7B,CAAoCb,QAApC;IACA,KAAKC,IAAL,CAAUG,GAAG,GAAGtC,IAAhB,EAAsBkC,QAAtB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIc,IAAI,CAACxJ,QAAD,EAAWsH,MAAX,EAAmB;IACnB,KAAKuB,OAAL,CAAc,QAAOvB,MAAM,IAAI,KAAKA,MAAO,EAA3C,EAA8C,CAACnH,GAAD,EAAM5F,IAAN,KAAe;MACzD,IAAI4F,GAAJ,EAAS;QACL8G,MAAM,CAACjH,QAAD,EAAWG,GAAX,CAAN;MACH,CAFD,MAGK;QACD,KAAKsJ,mBAAL,CAAyBlP,IAAzB;QACA0M,MAAM,CAACjH,QAAD,EAAWG,GAAX,EAAgB5F,IAAhB,CAAN;MACH;IACJ,CARD;EASH;EACD;AACJ;AACA;AACA;AACA;;;EACImP,QAAQ,CAAC1J,QAAD,EAAW;IACf,MAAM0I,QAAQ,GAAG,CAACvI,GAAD,EAAM+E,GAAN,KAAc;MAC3B,IAAI,KAAK6C,IAAL,IAAa,IAAjB,EAAuB;QACnB,MAAM,IAAI/F,KAAJ,CAAU,aAAV,CAAN;MACH;;MACD,IAAI7B,GAAJ,EAAS;QACLA,GAAG,CAACK,OAAJ,IAAe,wCAAf;QACAyG,MAAM,CAACjH,QAAD,EAAWG,GAAX,CAAN;MACH,CAHD,MAIK;QACD,MAAMwJ,aAAa,GAAGvT,mBAAmB,CAAC,OAAO,KAAKqR,GAAZ,KAAoB,QAApB,GAA+B,KAAKA,GAApC,GAA0C,EAA3C,CAAzC;QACA,MAAMmC,YAAY,GAAG,IAAIzT,SAAJ,CAAc,KAAK4R,IAAnB,EAAyB;UAAE4B;QAAF,CAAzB,CAArB;QACAC,YAAY,CAAC1J,EAAb,CAAgB,OAAhB,EAA0BC,GAAD,IAAS;UAC9B,KAAKzK,KAAL,CAAW,IAAX;UACAuR,MAAM,CAACjH,QAAD,EAAWG,GAAX,CAAN;QACH,CAHD;QAIA,KAAK0H,OAAL,GAAe,IAAf;QACA,KAAKE,IAAL,GAAY6B,YAAZ;QACA,IAAIzE,mBAAJ,CAAwB,KAAK4C,IAA7B,EAAmC,KAAK3C,OAAxC,EAAiD,MAAM,KAAK1P,KAAL,CAAW,IAAX,CAAvD;QACAuR,MAAM,CAACjH,QAAD,EAAWkF,GAAG,CAAC3K,IAAf,CAAN;MACH;IACJ,CApBD;;IAqBA,KAAKsO,OAAL,CAAa,UAAb,EAAyBH,QAAzB,EAAmC,CAAC,GAAD,CAAnC;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIe,mBAAmB,CAAClP,IAAD,EAAO;IACtB;IACA;IACA;IACAA,IAAI,CAACrB,KAAL,CAAW,IAAX,EAAiByG,OAAjB,CAA0BkK,GAAD,IAAS;MAC9B,MAAMC,KAAK,GAAGD,GAAG,CAACpR,KAAJ,CAAU,4CAAV,CAAd,CAD8B,CAE9B;MACA;MACA;MACA;MACA;MACA;;MACA,IAAIqR,KAAK,IAAI,IAAT,IAAiB,KAAK9B,QAAL,IAAiB,IAAtC,EAA4C;QACxC;QACA;QACA;QACA;QACA,KAAKA,QAAL,CAAc8B,KAAK,CAAC,CAAD,CAAL,CAAS9L,WAAT,EAAd,IAAwC8L,KAAK,CAAC,CAAD,CAAL,IAAY,IAApD;MACH;IACJ,CAfD;EAgBH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIC,IAAI,CAAC/J,QAAD,EAAWsH,MAAX,EAAmB;IACnB,KAAKU,QAAL,GAAgB,EAAhB;IACA,KAAKa,OAAL,CAAc,QAAOvB,MAAM,IAAI,KAAKA,MAAO,EAA3C,EAA8C,CAACnH,GAAD,EAAM5F,IAAN,KAAe;MACzD,IAAI4F,GAAJ,EAAS;QACL8G,MAAM,CAACjH,QAAD,EAAWG,GAAX,CAAN;MACH,CAFD,MAGK;QACD,KAAKsJ,mBAAL,CAAyBlP,IAAzB;;QACA,IAAI,KAAKkN,GAAL,IAAY,CAAC,KAAKI,OAAtB,EAA+B;UAC3B,KAAK6B,QAAL,CAAc,MAAM,KAAKK,IAAL,CAAU/J,QAAV,EAAoBsH,MAApB,CAApB;QACH,CAFD,MAGK;UACDL,MAAM,CAACjH,QAAD,EAAWG,GAAX,EAAgB5F,IAAhB,CAAN;QACH;MACJ;IACJ,CAbD;EAcH;EACD;AACJ;AACA;AACA;AACA;;;EACIyP,QAAQ,CAACC,GAAD,EAAM;IACV,IAAIxT,EAAJ;;IACA,OAAO,CAAC,CAACA,EAAE,GAAG,KAAKuR,QAAX,MAAyB,IAAzB,IAAiCvR,EAAE,KAAK,KAAK,CAA7C,GAAiDA,EAAjD,GAAsD,EAAvD,EAA2DwT,GAAG,CAACjM,WAAJ,EAA3D,MAAkFnH,SAAzF;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIqT,IAAI,CAAClK,QAAD,EAAWsH,MAAX,EAAmB;IACnB,KAAKuB,OAAL,CAAavB,MAAM,GAAI,QAAOA,MAAO,EAAlB,GAAsB,MAAzC,EAAiDtH,QAAjD,EAA2D,CAAC,GAAD,EAAM,GAAN,CAA3D;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACImK,IAAI,CAACnK,QAAD,EAAW;IACX,KAAK6I,OAAL,CAAa,MAAb,EAAqB7I,QAArB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIoK,IAAI,CAACpK,QAAD,EAAW;IACX,KAAK2I,IAAL,CAAU,MAAV,EAAkB3I,QAAlB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIqK,IAAI,CAACrK,QAAD,EAAWZ,IAAX,EAAiB;IACjB,KAAKyJ,OAAL,CAAc,aAAYzJ,IAAK,EAA/B,EAAkCY,QAAlC;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIsK,IAAI,CAACtK,QAAD,EAAWT,EAAX,EAAe;IACf,KAAKsJ,OAAL,CAAc,WAAUtJ,EAAG,EAA3B,EAA8BS,QAA9B,EAAwC,CAAC,GAAD,EAAM,GAAN,CAAxC;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIzF,IAAI,CAACyF,QAAD,EAAW;IACX,KAAK6I,OAAL,CAAa,MAAb,EAAqB7I,QAArB,EAA+B,CAAC,GAAD,CAA/B;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIuK,QAAQ,CAACvK,QAAD,EAAW;IACf,KAAK6I,OAAL,CAAc,GAAErC,IAAK,GAArB,EAAyBxG,QAAzB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIQ,OAAO,CAACjG,IAAD,EAAO;IACV,IAAI9D,EAAJ,EAAQC,EAAR;;IACA,KAAKiQ,GAAL,CAASpM,IAAT;IACA,CAAC7D,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKsR,IAAX,MAAqB,IAArB,IAA6BtR,EAAE,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,EAAE,CAACsK,KAAH,CAASxG,IAAT,CAA5D,MAAgF,IAAhF,IAAwF7D,EAAE,KAAK,KAAK,CAApG,GAAwGA,EAAxG,GAA6G,KAAKiQ,GAAL,CAAS,uBAAT,CAA7G;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI6D,MAAM,CAAChU,OAAD,EAAUwJ,QAAV,EAAoB;IACtB,KAAK6I,OAAL,CAAc,QAAOrS,OAAQ,EAA7B,EAAgCwJ,QAAhC,EAA0C,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA1C;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIyK,IAAI,CAACjU,OAAD,EAAUwJ,QAAV,EAAoB;IACpB,KAAK6I,OAAL,CAAc,QAAOrS,OAAQ,EAA7B,EAAgCwJ,QAAhC;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI0K,sBAAsB,CAAC1K,QAAD,EAAWsH,MAAX,EAAmB;IACrC;IACA,IAAI,CAAC,KAAKU,QAAV,EAAoB;MAChB,MAAMU,QAAQ,GAAG,CAACvI,GAAD,EAAM5F,IAAN,KAAe0M,MAAM,CAACjH,QAAD,EAAWG,GAAX,EAAgB5F,IAAhB,CAAtC;;MACA,KAAKwP,IAAL,CAAU,CAAC5J,GAAD,EAAM5F,IAAN,KAAe;QACrB,IAAI4F,GAAJ,EAAS;UACL,KAAKqJ,IAAL,CAAUd,QAAV,EAAoBpB,MAApB;QACH,CAFD,MAGK;UACDL,MAAM,CAACjH,QAAD,EAAWG,GAAX,EAAgB5F,IAAhB,CAAN;QACH;MACJ,CAPD,EAOG+M,MAPH;IAQH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIqD,KAAK,CAAC3K,QAAD,EAAWoH,IAAX,EAAiBC,QAAjB,EAAyC;IAAA,IAAdrI,OAAc,uEAAJ,EAAI;;IAC1C,IAAIvI,EAAJ,EAAQC,EAAR;;IACA,MAAMiU,KAAK,GAAG;MACVvD,IAAI,EAAEA,IAAI,GAAG,MAAMA,IAAT,GAAgB,KAAKA,IADrB;MAEVC,QAAQ,EAAEA,QAAQ,GAAG,MAAMA,QAAT,GAAoB,KAAKA,QAFjC;MAGV/F,MAAM,EAAE,CAAC5K,EAAE,GAAG,CAACD,EAAE,GAAGuI,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACsC,MAAhE,MAA4E,IAA5E,IAAoF7K,EAAE,KAAK,KAAK,CAAhG,GAAoG,KAAK,CAAzG,GAA6GA,EAAE,CAACgG,WAAH,EAAnH,MAAyI,IAAzI,IAAiJ/F,EAAE,KAAK,KAAK,CAA7J,GAAiKA,EAAjK,GAAsK;IAHpK,CAAd;IAKA,MAAM4Q,MAAM,GAAG,CAACtI,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACsI,MAA3D,KAAsE,KAAKA,MAA1F;;IACA,MAAMsD,QAAQ,GAAG,CAACzK,GAAD,EAAM5F,IAAN,KAAe;MAC5B,IAAI9D,EAAJ;;MACA,IAAI0J,GAAJ,EAAS;QACL8G,MAAM,CAACjH,QAAD,EAAWG,GAAX,CAAN;QACA;MACH;;MACD,IAAImB,MAAM,GAAG,IAAb;MACA;AACZ;AACA;AACA;;MACY,MAAMuJ,aAAa,GAAIC,SAAD,IAAe;QACjC,MAAMC,IAAI,GAAGhV,UAAU,CAAC,KAAD,EAAQ4U,KAAK,CAACtD,QAAN,EAAR,CAAvB;QACA0D,IAAI,CAACC,MAAL,CAAYtK,MAAM,CAACtB,IAAP,CAAY0L,SAAZ,EAAuB,QAAvB,EAAiC9T,QAAjC,CAA0C,OAA1C,CAAZ;QACA,OAAO0J,MAAM,CAACtB,IAAP,CAAa,GAAEuL,KAAK,CAACvD,IAAN,EAAa,IAAG2D,IAAI,CAACE,MAAL,CAAY,KAAZ,CAAmB,EAAlD,EAAqDjU,QAArD,CAA8D,QAA9D,CAAP;MACH,CAJD;MAKA;AACZ;AACA;;;MACY,MAAMkU,WAAW,GAAG,MAAMxK,MAAM,CAACtB,IAAP,CAAa,SAAQuL,KAAK,CAACvD,IAAN,EAAa,SAAQuD,KAAK,CAACtD,QAAN,EAAiB,EAA3D,EAA8DrQ,QAA9D,CAAuE,QAAvE,CAA1B;MACA;AACZ;AACA;AACA;;;MACY,MAAMmU,aAAa,GAAG,MAAMzK,MAAM,CAACtB,IAAP,CAAa,QAAOuL,KAAK,CAACvD,IAAN,EAAa,qBAAoBuD,KAAK,CAACtD,QAAN,EAAiB,cAAtE,EAAqFrQ,QAArF,CAA8F,QAA9F,CAA5B,CAxB4B,CAyB5B;MACA;;;MACA,IAAI,CAACsK,MAAL,EAAa;QACT,MAAM8J,SAAS,GAAG,KAAKzD,cAAvB;QACA,IAAI0D,IAAI,GAAG,EAAX;;QACA,IAAI,QAAQ,CAAC5U,EAAE,GAAG,KAAKuR,QAAX,MAAyB,IAAzB,IAAiCvR,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAAC,MAAD,CAApE,MAAkF,QAAtF,EAAgG;UAC5F4U,IAAI,GAAG,KAAKrD,QAAL,CAAc,MAAd,CAAP;QACH;;QACD,KAAK,IAAIxP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4S,SAAS,CAACnU,MAA9B,EAAsCuB,CAAC,EAAvC,EAA2C;UACvC,IAAI6S,IAAI,CAAClC,QAAL,CAAciC,SAAS,CAAC5S,CAAD,CAAvB,CAAJ,EAAiC;YAC7B8I,MAAM,GAAG8J,SAAS,CAAC5S,CAAD,CAAlB;YACA;UACH;QACJ;MACJ;MACD;AACZ;AACA;AACA;AACA;AACA;;;MACY,MAAMkH,MAAM,GAAG,CAACS,GAAD,EAAM5F,IAAN,KAAe;QAC1B,KAAKuN,QAAL,GAAgB,KAAhB;QACA,KAAKpS,KAAL,GAF0B,CAEZ;;QACduR,MAAM,CAACjH,QAAD,EAAW6E,SAAS,CAACG,MAAV,CAAiB,sBAAjB,EAAyCd,eAAe,CAACG,UAAzD,EAAqElE,GAArE,EAA0E5F,IAA1E,CAAX,CAAN;MACH,CAJD;MAKA;AACZ;AACA;AACA;AACA;;;MACY,MAAMmO,QAAQ,GAAG,CAACvI,GAAD,EAAM5F,IAAN,KAAe;QAC5B,IAAI4F,GAAJ,EAAS;UACLT,MAAM,CAACS,GAAD,EAAM5F,IAAN,CAAN;QACH,CAFD,MAGK;UACD,KAAKuN,QAAL,GAAgB,IAAhB;UACAb,MAAM,CAACjH,QAAD,EAAWG,GAAX,EAAgB5F,IAAhB,CAAN;QACH;MACJ,CARD;MASA;AACZ;AACA;AACA;AACA;AACA;;;MACY,MAAM+Q,OAAO,GAAG,CAACnL,GAAD,EAAM5F,IAAN,EAAY2K,GAAZ,KAAoB;QAChC,IAAI/E,GAAJ,EAAS;UACLT,MAAM,CAACS,GAAD,EAAM5F,IAAN,CAAN;QACH,CAFD,MAGK;UACD,IAAI+G,MAAM,KAAKsE,YAAY,CAAC,UAAD,CAA3B,EAAyC;YACrC,KAAKiD,OAAL,CAAagC,aAAa,CAAC3F,GAAD,CAA1B,EAAiCwD,QAAjC,EAA2C,CAAC,GAAD,EAAM,GAAN,CAA3C;UACH,CAFD,MAGK,IAAIpH,MAAM,KAAKsE,YAAY,CAACE,KAA5B,EAAmC;YACpC,KAAK+C,OAAL,CAAanI,MAAM,CAACtB,IAAP,CAAYuL,KAAK,CAACtD,QAAN,EAAZ,EAA8BrQ,QAA9B,CAAuC,QAAvC,CAAb,EAA+D0R,QAA/D,EAAyE,CAAC,GAAD,EAAM,GAAN,CAAzE;UACH;QACJ;MACJ,CAZD;MAaA;AACZ;AACA;AACA;AACA;AACA;;;MACY,MAAM6C,WAAW,GAAG,CAACpL,GAAD,EAAM5F,IAAN,KAAe;QAC/B,IAAI4F,GAAJ,EAAS;UACLT,MAAM,CAACS,GAAD,EAAM5F,IAAN,CAAN;QACH,CAFD,MAGK;UACD,IAAI+G,MAAM,KAAKsE,YAAY,CAACE,KAA5B,EAAmC;YAC/B,KAAK+C,OAAL,CAAanI,MAAM,CAACtB,IAAP,CAAYuL,KAAK,CAACvD,IAAN,EAAZ,EAA0BpQ,QAA1B,CAAmC,QAAnC,CAAb,EAA2DsU,OAA3D,EAAoE,CAAC,GAAD,CAApE;UACH;QACJ;MACJ,CATD;;MAUA,QAAQhK,MAAR;QACI,KAAKsE,YAAY,CAAC,UAAD,CAAjB;UACI,KAAKiD,OAAL,CAAc,SAAQjD,YAAY,CAAC,UAAD,CAAa,EAA/C,EAAkD0F,OAAlD,EAA2D,CAAC,GAAD,CAA3D;UACA;;QACJ,KAAK1F,YAAY,CAACE,KAAlB;UACI,KAAK+C,OAAL,CAAc,QAAOjD,YAAY,CAACE,KAAM,EAAxC,EAA2CyF,WAA3C,EAAwD,CAAC,GAAD,CAAxD;UACA;;QACJ,KAAK3F,YAAY,CAACC,KAAlB;UACI,KAAKgD,OAAL,CAAc,QAAOjD,YAAY,CAACC,KAAM,IAAGqF,WAAW,EAAG,EAAzD,EAA4DxC,QAA5D,EAAsE,CAAC,GAAD,EAAM,GAAN,CAAtE;UACA;;QACJ,KAAK9C,YAAY,CAACG,OAAlB;UACI,KAAK8C,OAAL,CAAc,QAAOjD,YAAY,CAACG,OAAQ,IAAGoF,aAAa,EAAG,EAA7D,EAAgEzC,QAAhE,EAA0E,CAAC,GAAD,EAAM,GAAN,CAA1E;UACA;;QACJ;UACIzB,MAAM,CAACjH,QAAD,EAAW6E,SAAS,CAACG,MAAV,CAAiB,oCAAjB,EAAuDd,eAAe,CAACO,gBAAvE,EAAyF,IAAzF,EAA+FlK,IAA/F,CAAX,CAAN;UACA;MAfR;IAiBH,CArHD;;IAsHA,KAAKmQ,sBAAL,CAA4BE,QAA5B,EAAsCtD,MAAtC;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACI5R,KAAK,GAAgB;IAAA,IAAf8V,KAAe,uEAAP,KAAO;;IACjB,IAAI,KAAKzD,IAAT,EAAe;MACX,IAAIyD,KAAJ,EAAW;QACP,KAAK7E,GAAL,CAAS,4BAAT;QACA,KAAKoB,IAAL,CAAU/D,OAAV;MACH,CAHD,MAIK;QACD,KAAK2C,GAAL,CAAS,yBAAT;QACA,KAAKoB,IAAL,CAAU3N,GAAV;MACH;IACJ;;IACD,IAAI,KAAK6N,OAAT,EAAkB;MACd,KAAKA,OAAL,CAAavC,IAAb;MACA,KAAKuC,OAAL,GAAe,IAAf;IACH;;IACD,KAAKL,MAAL,GAAc5B,SAAS,CAACC,YAAxB;IACA,KAAK4B,OAAL,GAAe,KAAf;IACA,KAAKE,IAAL,GAAY,IAAZ;IACA,KAAKC,QAAL,GAAgB,IAAhB;IACA,KAAKF,QAAL,GAAgB,EAAE,KAAKV,IAAL,MAAe,KAAKC,QAAL,EAAjB,CAAhB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIkB,IAAI,CAACvI,QAAD,EAAW;IACX,KAAK6I,OAAL,CAAa,MAAb,EAAqB,CAAC1I,GAAD,EAAM5F,IAAN,KAAe;MAChC0M,MAAM,CAACjH,QAAD,EAAWG,GAAX,EAAgB5F,IAAhB,CAAN;MACA,KAAK7E,KAAL;IACH,CAHD,EAGG,CAAC,GAAD,EAAM,GAAN,CAHH;EAIH;;AAroBqC;;AAwoB1C,MAAM+V,UAAN,CAAiB;EACb;AACJ;AACA;AACA;AACA;AACA;AACA;EACIvN,WAAW,CAACwN,MAAD,EAAS;IAChB,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,OAAL,GAAe,KAAf;IACA,KAAKC,KAAL,GAAa,KAAb;IACA,KAAKC,KAAL,GAAa,IAAb;IACA,KAAK/G,IAAL,GAAY,IAAImC,cAAJ,CAAmBwE,MAAnB,CAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI/C,IAAI,CAACzD,GAAD,EAAMlF,QAAN,EAAgB;IAChB,MAAMQ,OAAO,GAAG0E,GAAG,YAAYjH,OAAf,GACViH,GADU,GAEV,KAAK6G,eAAL,CAAqB7G,GAArB,IACI,IAAIjH,OAAJ,CAAYiH,GAAZ,CADJ,GAEI,IAJV;;IAKA,IAAI1E,OAAO,IAAI,IAAf,EAAqB;MACjBR,QAAQ,CAAC,IAAIgC,KAAJ,CAAU,yCAAV,CAAD,EAAuDkD,GAAvD,CAAR;MACA;IACH;;IACD,MAAM;MAAE7F,OAAF;MAAWC;IAAX,IAA+BkB,OAAO,CAACrB,aAAR,EAArC;;IACA,IAAIE,OAAJ,EAAa;MACT,MAAM2M,KAAK,GAAG,KAAKC,kBAAL,CAAwBzL,OAAxB,EAAiCR,QAAjC,CAAd;;MACA,IAAIgM,KAAK,CAACzM,EAAN,CAAStI,MAAT,KAAoB,CAAxB,EAA2B;QACvB,OAAO+I,QAAQ,CAAC,IAAIgC,KAAJ,CAAU,gCAAV,CAAD,EAA8CkD,GAA9C,CAAf;MACH;;MACD,KAAKyG,KAAL,CAAWzU,IAAX,CAAgB8U,KAAhB;;MACA,KAAKE,KAAL;IACH,CAPD,MAQK;MACDlM,QAAQ,CAAC,IAAIgC,KAAJ,CAAU1C,eAAV,CAAD,EAA6B4F,GAA7B,CAAR;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIiH,SAAS,CAACjH,GAAD,EAAM;IACX,OAAO,IAAI7E,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACpC,KAAKoI,IAAL,CAAUzD,GAAV,EAAe,CAAC/E,GAAD,EAAMK,OAAN,KAAkB;QAC7B,IAAIL,GAAG,IAAI,IAAX,EAAiB;UACbI,MAAM,CAACJ,GAAD,CAAN;QACH,CAFD,MAGK;UACD;UACA;UACAG,OAAO,CAACE,OAAD,CAAP;QACH;MACJ,CATD;IAUH,CAXM,CAAP;EAYH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIyL,kBAAkB,CAACzL,OAAD,EAEf;IAAA,IAFyBR,QAEzB,uEAFoC,YAAY;MAC/C;IACH,CAAE;IACC,MAAM,CAAC;MAAExJ,OAAO,EAAE4I;IAAX,CAAD,IAAsB7G,aAAa,CAACiI,OAAO,CAACnC,MAAR,CAAee,IAAhB,CAAzC;IACA,MAAM4M,KAAK,GAAG;MACVxL,OADU;MAEVjB,EAAE,EAAE,EAFM;MAGVH,IAHU;MAIVY,QAAQ,EAAEA,QAAQ,CAACoM,IAAT,CAAc,IAAd;IAJA,CAAd;IAMA,MAAM;MAAE/N,MAAM,EAAE;QAAEkB,EAAF;QAAMC,EAAN;QAAUC,GAAV;QAAe,eAAe4M;MAA9B;IAAV,IAA0D7L,OAAhE;;IACA,IAAI,CAAC,OAAOjB,EAAP,KAAc,QAAd,IAA0BX,KAAK,CAACC,OAAN,CAAcU,EAAd,CAA3B,KAAiDA,EAAE,CAACtI,MAAH,GAAY,CAAjE,EAAoE;MAChE+U,KAAK,CAACzM,EAAN,GAAWhH,aAAa,CAACgH,EAAD,CAAxB;IACH;;IACD,IAAI,CAAC,OAAOC,EAAP,KAAc,QAAd,IAA0BZ,KAAK,CAACC,OAAN,CAAcW,EAAd,CAA3B,KAAiDA,EAAE,CAACvI,MAAH,GAAY,CAAjE,EAAoE;MAChE+U,KAAK,CAACzM,EAAN,GAAWyM,KAAK,CAACzM,EAAN,CAASgC,MAAT,CAAgBhJ,aAAa,CAACiH,EAAD,CAAb,CAAkB9H,MAAlB,CAA0BF,CAAD,IAAOwU,KAAK,CAACzM,EAAN,CAAS+M,IAAT,CAAeC,CAAD,IAAOA,CAAC,CAAC/V,OAAF,KAAcgB,CAAC,CAAChB,OAArC,MAAkD,KAAlF,CAAhB,CAAX;IACH;;IACD,IAAI,CAAC,OAAOiJ,GAAP,KAAe,QAAf,IAA2Bb,KAAK,CAACC,OAAN,CAAcY,GAAd,CAA5B,KAAmDA,GAAG,CAACxI,MAAJ,GAAa,CAApE,EAAuE;MACnE+U,KAAK,CAACzM,EAAN,GAAWyM,KAAK,CAACzM,EAAN,CAASgC,MAAT,CAAgBhJ,aAAa,CAACkH,GAAD,CAAb,CAAmB/H,MAAnB,CAA2BF,CAAD,IAAOwU,KAAK,CAACzM,EAAN,CAAS+M,IAAT,CAAeC,CAAD,IAAOA,CAAC,CAAC/V,OAAF,KAAcgB,CAAC,CAAChB,OAArC,MAAkD,KAAnF,CAAhB,CAAX;IACH;;IACD,IAAI,OAAO6V,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,CAACpV,MAAX,GAAoB,CAA1D,EAA6D;MACzD,MAAMuV,gBAAgB,GAAGjU,aAAa,CAAC8T,UAAD,CAAtC;;MACA,IAAIG,gBAAgB,CAACvV,MAAjB,GAA0B,CAA9B,EAAiC;QAC7B,MAAM,CAAC;UAAET,OAAO,EAAEiW;QAAX,CAAD,IAAmCD,gBAAzC;QACAR,KAAK,CAACK,UAAN,GAAmBI,iBAAnB;MACH;IACJ;;IACD,OAAOT,KAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIE,KAAK,GAAG;IACJ,IAAI,KAAKJ,KAAL,IAAc,IAAlB,EAAwB;MACpBY,YAAY,CAAC,KAAKZ,KAAN,CAAZ;IACH;;IACD,IAAI,KAAKH,KAAL,CAAW1U,MAAf,EAAuB;MACnB,IAAI,KAAK8N,IAAL,CAAU9M,KAAV,MAAqB+N,SAAS,CAACC,YAAnC,EAAiD;QAC7C,KAAK0G,QAAL,CAAc,KAAKhB,KAAL,CAAW,CAAX,CAAd;MACH,CAFD,MAGK,IAAI,KAAK5G,IAAL,CAAU9M,KAAV,MAAqB+N,SAAS,CAACG,SAA/B,IACL,CAAC,KAAKyF,OADD,IAEL,KAAKC,KAFJ,EAEW;QACZ,KAAKe,SAAL,CAAe,KAAKjB,KAAL,CAAWkB,KAAX,EAAf;MACH;IACJ,CATD,CAUA;IACA;IAXA,KAYK,IAAI,KAAK9H,IAAL,CAAU9M,KAAV,MAAqB+N,SAAS,CAACG,SAAnC,EAA8C;MAC/C,KAAK2F,KAAL,GAAanG,UAAU,CAAC,MAAM,KAAKZ,IAAL,CAAUwD,IAAV,EAAP,EAAyB,IAAzB,CAAvB;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACIoE,QAAQ,CAACX,KAAD,EAAQ;IACZ;AACR;AACA;AACA;IACQ,MAAM9V,OAAO,GAAIiK,GAAD,IAAS;MACrB,IAAI,CAACA,GAAL,EAAU;QACN,MAAM2M,KAAK,GAAI3M,GAAD,IAAS;UACnB,IAAI,CAACA,GAAL,EAAU;YACN,KAAK0L,KAAL,GAAa,IAAb;;YACA,KAAKK,KAAL;UACH,CAHD,MAIK;YACDF,KAAK,CAAChM,QAAN,CAAeG,GAAf,EAAoB6L,KAAK,CAACxL,OAA1B,EADC,CAED;;YACA,KAAKmL,KAAL,CAAWkB,KAAX;;YACA,KAAKX,KAAL;UACH;QACJ,CAXD;;QAYA,IAAI,CAAC,KAAKnH,IAAL,CAAUuD,UAAV,EAAL,EAA6B;UACzB,KAAKvD,IAAL,CAAU4F,KAAV,CAAgBmC,KAAhB;QACH,CAFD,MAGK;UACD,KAAK/H,IAAL,CAAU2F,sBAAV,CAAiCoC,KAAjC;QACH;MACJ,CAnBD,MAoBK;QACDd,KAAK,CAAChM,QAAN,CAAeG,GAAf,EAAoB6L,KAAK,CAACxL,OAA1B,EADC,CAED;;QACA,KAAKmL,KAAL,CAAWkB,KAAX;;QACA,KAAKX,KAAL;MACH;IACJ,CA3BD;;IA4BA,KAAKL,KAAL,GAAa,KAAb;IACA,KAAK9G,IAAL,CAAU7O,OAAV,CAAkBA,OAAlB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACI6V,eAAe,CAAC7G,GAAD,EAAM;IACjB,OAAQA,GAAG,CAAC9F,IAAJ,KACH8F,GAAG,CAAC3F,EAAJ,IAAU2F,GAAG,CAAC1F,EAAd,IAAoB0F,GAAG,CAACzF,GADrB,MAEHyF,GAAG,CAAC1H,IAAJ,KAAa3G,SAAb,IAA0B,KAAKkW,oBAAL,CAA0B7H,GAAG,CAACvG,UAA9B,CAFvB,CAAR;EAGH;EACD;AACJ;AACA;AACA;AACA;;;EACIoO,oBAAoB,CAACpO,UAAD,EAAa;IAC7B,IAAIC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAJ,EAA+B;MAC3B,OAAOA,UAAU,CAAC2N,IAAX,CAAiBU,GAAD,IAAS;QAC5B,OAAO,KAAKC,wBAAL,CAA8BD,GAA9B,CAAP;MACH,CAFM,CAAP;IAGH,CAJD,MAKK;MACD,OAAO,KAAKC,wBAAL,CAA8BtO,UAA9B,CAAP;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACIsO,wBAAwB,CAACtO,UAAD,EAAa;IACjC,OAAQA,UAAU,KACbA,UAAU,CAACpE,IAAX,IAAmBoE,UAAU,CAACiB,IADjB,CAAV,IAEJjB,UAAU,CAACD,WAAX,KAA2B,IAF/B;EAGH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIwO,SAAS,CAAClB,KAAD,EAAQtK,IAAR,EAAc;IACnB;AACR;AACA;AACA;IACQ,OAAQvB,GAAD,IAAS;MACZ,IAAI,CAACA,GAAD,IAAQuB,IAAZ,EAAkB;QACdA,IAAI,CAACyL,KAAL,CAAW,IAAX,EAAiB,CAACnB,KAAD,CAAjB;MACH,CAFD,MAGK;QACD;QACA;QACA,KAAKjH,IAAL,CAAUoF,IAAV,CAAe,MAAM,KAAKiD,SAAL,CAAejN,GAAf,EAAoB6L,KAApB,CAArB;MACH;IACJ,CATD;EAUH;EACD;AACJ;AACA;AACA;AACA;;;EACIY,SAAS,CAACZ,KAAD,EAAQ;IACb,MAAM5M,IAAI,GAAG4M,KAAK,CAACK,UAAN,IAAoBL,KAAK,CAAC5M,IAAvC;IACA,KAAKwM,OAAL,GAAe,IAAf;IACA,KAAK7G,IAAL,CAAUsF,IAAV,CAAe,KAAK6C,SAAL,CAAelB,KAAf,EAAsB,KAAKqB,SAA3B,CAAf,EAAsD,MAAMjO,IAAN,GAAa,GAAnE;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIiO,SAAS,CAACrB,KAAD,EAAQ;IACb,IAAIvV,EAAJ;;IACA,IAAIuV,KAAK,CAACzM,EAAN,IAAY,IAAZ,IAAoB,OAAOyM,KAAK,CAACzM,EAAb,KAAoB,QAA5C,EAAsD;MAClD,MAAM,IAAI+N,SAAJ,CAAc,wBAAd,CAAN;IACH;;IACD,MAAM/N,EAAE,GAAG,CAAC9I,EAAE,GAAGuV,KAAK,CAACzM,EAAN,CAASsN,KAAT,EAAN,MAA4B,IAA5B,IAAoCpW,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACD,OAA3E;IACA,KAAKuO,IAAL,CAAUuF,IAAV,CAAe,KAAK4C,SAAL,CAAelB,KAAf,EAAsBA,KAAK,CAACzM,EAAN,CAAStI,MAAT,GAAkB,KAAKoW,SAAvB,GAAmC,KAAKE,SAA9D,CAAf,EAA0F,IAAGhO,EAAG,GAAhG;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIgO,SAAS,CAACvB,KAAD,EAAQ;IACb,KAAKjH,IAAL,CAAUxK,IAAV,CAAe,KAAK2S,SAAL,CAAelB,KAAf,EAAsB,KAAKwB,YAA3B,CAAf;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIA,YAAY,CAACxB,KAAD,EAAQ;IAChB,MAAMnM,MAAM,GAAGmM,KAAK,CAACxL,OAAN,CAAcX,MAAd,EAAf;IACAA,MAAM,CAACK,EAAP,CAAU,MAAV,EAAmB3F,IAAD,IAAU,KAAKwK,IAAL,CAAUvE,OAAV,CAAkBjG,IAAlB,CAA5B;IACAsF,MAAM,CAACK,EAAP,CAAU,KAAV,EAAiB,MAAM;MACnB,KAAK6E,IAAL,CAAUwF,QAAV,CAAmB,KAAK2C,SAAL,CAAelB,KAAf,EAAsB,MAAM,KAAKoB,SAAL,CAAe,IAAf,EAAqBpB,KAArB,CAA5B,CAAnB;IACH,CAFD,EAHgB,CAMhB;IACA;;IACAnM,MAAM,CAACK,EAAP,CAAU,OAAV,EAAoBC,GAAD,IAAS;MACxB,KAAK4E,IAAL,CAAUrP,KAAV;;MACA,KAAK0X,SAAL,CAAejN,GAAf,EAAoB6L,KAApB;IACH,CAHD;EAIH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIoB,SAAS,CAACjN,GAAD,EAAM6L,KAAN,EAAa;IAClB,KAAKJ,OAAL,GAAe,KAAf;IACAI,KAAK,CAAChM,QAAN,CAAeG,GAAf,EAAoB6L,KAAK,CAACxL,OAA1B;;IACA,KAAK0L,KAAL;EACH;;AA1RY;;AA6RjB,SAAStG,YAAT,EAAuBvI,UAAvB,EAAmC+I,eAAnC,EAAoDhJ,WAApD,EAAiED,SAAjE,EAA4Ec,OAA5E,EAAqFwN,UAArF,EAAiGvE,cAAjG,EAAiHrC,SAAjH,EAA4HX,eAA5H,EAA6IiB,mBAA7I,EAAkKa,SAAlK,EAA6KzN,aAA7K,EAA4LK,cAA5L,EAA4MI,iBAA5M,EAA+NO,aAA/N,EAA8OwC,UAA9O,EAA0PW,cAA1P"},"metadata":{},"sourceType":"module"}