{"ast":null,"code":"// import { createContext, useReducer, useState } from \"react\";\n// import { postReducer } from \"../reducer/postReducer\";\n// import axios from \"axios\";\n// export const PostContext = createContext();\n// export const PostContextProvider = ({ children }) => {\n//   // State\n//   const [postState, dispatch] = useReducer(postReducer, {\n//     post: null,\n//     posts: [],\n//     postsLoading: true,\n//   });\n//   // const [showAddPostModal, setShowAddPostModal] = useState(false)\n//   // const [showUpdatePostModal, setShowUpdatePostModal] = useState(false)\n//   // const [showToast, setShowToast] = useState({\n//   // \tshow: false,\n//   // \tmessage: '',\n//   // \ttype: null\n//   // })\n//   // Get all posts\n//   // Add post\n//   // const addPost = async newPost => {\n//   // \ttry {\n//   // \t\tconst response = await axios.post(`${apiUrl}/posts`, newPost)\n//   // \t\tif (response.data.success) {\n//   // \t\t\tdispatch({ type: ADD_POST, payload: response.data.post })\n//   // \t\t\treturn response.data\n//   // \t\t}\n//   // \t} catch (error) {\n//   // \t\treturn error.response.data\n//   // \t\t\t? error.response.data\n//   // \t\t\t: { success: false, message: 'Server error' }\n//   // \t}\n//   // }\n//   // // Delete post\n//   // const deletePost = async postId => {\n//   // \ttry {\n//   // \t\tconst response = await axios.delete(`${apiUrl}/posts/${postId}`)\n//   // \t\tif (response.data.success)\n//   // \t\t\tdispatch({ type: DELETE_POST, payload: postId })\n//   // \t} catch (error) {\n//   // \t\tconsole.log(error)\n//   // \t}\n//   // }\n//   // // Find post when user is updating post\n//   // const findPost = postId => {\n//   // \tconst post = postState.posts.find(post => post._id === postId)\n//   // \tdispatch({ type: FIND_POST, payload: post })\n//   // }\n//   // // Update post\n//   // const updatePost = async updatedPost => {\n//   // \ttry {\n//   // \t\tconst response = await axios.put(\n//   // \t\t\t`${apiUrl}/posts/${updatedPost._id}`,\n//   // \t\t\tupdatedPost\n//   // \t\t)\n//   // \t\tif (response.data.success) {\n//   // \t\t\tdispatch({ type: UPDATE_POST, payload: response.data.post })\n//   // \t\t\treturn response.data\n//   // \t\t}\n//   // \t} catch (error) {\n//   // \t\treturn error.response.data\n//   // \t\t\t? error.response.data\n//   // \t\t\t: { success: false, message: 'Server error' }\n//   // \t}\n//   // }\n//   // Post context data\n//   const postContextData = {\n//     // postState,\n//     // getPosts,\n//     // showAddPostModal,\n//     // setShowAddPostModal,\n//     // showUpdatePostModal,\n//     // setShowUpdatePostModal,\n//     // addPost,\n//     // showToast,\n//     // setShowToast,\n//     // deletePost,\n//     // findPost,\n//     // updatePost\n//     postState,\n//   };\n//   return (\n//     <PostContext.Provider value={postContextData}>\n//       {children}\n//     </PostContext.Provider>\n//   );\n// };","map":{"version":3,"names":[],"sources":["D:/ReactJS/DoAn_CN/my-app/src/components/Protectedroute/PostContext.js"],"sourcesContent":["// import { createContext, useReducer, useState } from \"react\";\r\n// import { postReducer } from \"../reducer/postReducer\";\r\n\r\n// import axios from \"axios\";\r\n\r\n// export const PostContext = createContext();\r\n// export const PostContextProvider = ({ children }) => {\r\n//   // State\r\n//   const [postState, dispatch] = useReducer(postReducer, {\r\n//     post: null,\r\n//     posts: [],\r\n//     postsLoading: true,\r\n//   });\r\n\r\n//   // const [showAddPostModal, setShowAddPostModal] = useState(false)\r\n//   // const [showUpdatePostModal, setShowUpdatePostModal] = useState(false)\r\n//   // const [showToast, setShowToast] = useState({\r\n//   // \tshow: false,\r\n//   // \tmessage: '',\r\n//   // \ttype: null\r\n//   // })\r\n\r\n//   // Get all posts\r\n  \r\n\r\n//   // Add post\r\n//   // const addPost = async newPost => {\r\n//   // \ttry {\r\n//   // \t\tconst response = await axios.post(`${apiUrl}/posts`, newPost)\r\n//   // \t\tif (response.data.success) {\r\n//   // \t\t\tdispatch({ type: ADD_POST, payload: response.data.post })\r\n//   // \t\t\treturn response.data\r\n//   // \t\t}\r\n//   // \t} catch (error) {\r\n//   // \t\treturn error.response.data\r\n//   // \t\t\t? error.response.data\r\n//   // \t\t\t: { success: false, message: 'Server error' }\r\n//   // \t}\r\n//   // }\r\n\r\n//   // // Delete post\r\n//   // const deletePost = async postId => {\r\n//   // \ttry {\r\n//   // \t\tconst response = await axios.delete(`${apiUrl}/posts/${postId}`)\r\n//   // \t\tif (response.data.success)\r\n//   // \t\t\tdispatch({ type: DELETE_POST, payload: postId })\r\n//   // \t} catch (error) {\r\n//   // \t\tconsole.log(error)\r\n//   // \t}\r\n//   // }\r\n\r\n//   // // Find post when user is updating post\r\n//   // const findPost = postId => {\r\n//   // \tconst post = postState.posts.find(post => post._id === postId)\r\n//   // \tdispatch({ type: FIND_POST, payload: post })\r\n//   // }\r\n\r\n//   // // Update post\r\n//   // const updatePost = async updatedPost => {\r\n//   // \ttry {\r\n//   // \t\tconst response = await axios.put(\r\n//   // \t\t\t`${apiUrl}/posts/${updatedPost._id}`,\r\n//   // \t\t\tupdatedPost\r\n//   // \t\t)\r\n//   // \t\tif (response.data.success) {\r\n//   // \t\t\tdispatch({ type: UPDATE_POST, payload: response.data.post })\r\n//   // \t\t\treturn response.data\r\n//   // \t\t}\r\n//   // \t} catch (error) {\r\n//   // \t\treturn error.response.data\r\n//   // \t\t\t? error.response.data\r\n//   // \t\t\t: { success: false, message: 'Server error' }\r\n//   // \t}\r\n//   // }\r\n\r\n//   // Post context data\r\n//   const postContextData = {\r\n//     // postState,\r\n//     // getPosts,\r\n//     // showAddPostModal,\r\n//     // setShowAddPostModal,\r\n//     // showUpdatePostModal,\r\n//     // setShowUpdatePostModal,\r\n//     // addPost,\r\n//     // showToast,\r\n//     // setShowToast,\r\n//     // deletePost,\r\n//     // findPost,\r\n//     // updatePost\r\n\r\n   \r\n//     postState,\r\n//   };\r\n\r\n//   return (\r\n//     <PostContext.Provider value={postContextData}>\r\n//       {children}\r\n//     </PostContext.Provider>\r\n//   );\r\n// };\r\n"],"mappings":"AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}