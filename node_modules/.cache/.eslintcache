[{"D:\\DOANCN\\DoAn_CN\\my-app\\src\\index.js":"1","D:\\DOANCN\\DoAn_CN\\my-app\\src\\App.js":"2","D:\\DOANCN\\DoAn_CN\\my-app\\src\\reportWebVitals.js":"3","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Auth\\Auth.js":"4","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Dashboard\\Dashboard.js":"5","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\LayoutConnectDB\\Layout.js":"6","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Layout\\LayoutDND.js":"7","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\SendEmail\\Sendmail.js":"8","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Dashboard\\handleDash.js":"9","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Layout\\Caroucel.js":"10","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Layout\\Navbar.js":"11","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Dashboard\\postBehavior.js":"12","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\LayoutConnectDB\\LayoutDBhandle.js":"13","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\LayoutConnectDB\\Column.js":"14","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Layout\\Column.js":"15","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Layout\\Data.js":"16","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\SendEmail\\emailBehavior.js":"17","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Login\\UserBehavior.js":"18","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Login\\Register.js":"19","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Login\\Login.js":"20","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Notifications\\notifications.js":"21","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\LayoutConnectDB\\Task.js":"22","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Layout\\task.js":"23","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Login\\Errorbox.js":"24","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\HomePage\\Homepage.js":"25","D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\HomePage\\HomeBehavior.js":"26","D:\\Deploy\\frontendDACN\\src\\index.js":"27","D:\\Deploy\\frontendDACN\\src\\App.js":"28","D:\\Deploy\\frontendDACN\\src\\reportWebVitals.js":"29","D:\\Deploy\\frontendDACN\\src\\components\\Dashboard\\Dashboard.js":"30","D:\\Deploy\\frontendDACN\\src\\components\\LayoutConnectDB\\Layout.js":"31","D:\\Deploy\\frontendDACN\\src\\components\\Auth\\Auth.js":"32","D:\\Deploy\\frontendDACN\\src\\components\\Layout\\LayoutDND.js":"33","D:\\Deploy\\frontendDACN\\src\\components\\SendEmail\\Sendmail.js":"34","D:\\Deploy\\frontendDACN\\src\\components\\HomePage\\Homepage.js":"35","D:\\Deploy\\frontendDACN\\src\\components\\Layout\\Navbar.js":"36","D:\\Deploy\\frontendDACN\\src\\components\\Layout\\Caroucel.js":"37","D:\\Deploy\\frontendDACN\\src\\components\\Dashboard\\postBehavior.js":"38","D:\\Deploy\\frontendDACN\\src\\components\\Dashboard\\handleDash.js":"39","D:\\Deploy\\frontendDACN\\src\\components\\LayoutConnectDB\\LayoutDBhandle.js":"40","D:\\Deploy\\frontendDACN\\src\\components\\LayoutConnectDB\\Column.js":"41","D:\\Deploy\\frontendDACN\\src\\components\\Layout\\Column.js":"42","D:\\Deploy\\frontendDACN\\src\\components\\Layout\\Data.js":"43","D:\\Deploy\\frontendDACN\\src\\components\\HomePage\\HomeBehavior.js":"44","D:\\Deploy\\frontendDACN\\src\\components\\SendEmail\\emailBehavior.js":"45","D:\\Deploy\\frontendDACN\\src\\components\\Notifications\\notifications.js":"46","D:\\Deploy\\frontendDACN\\src\\components\\Login\\UserBehavior.js":"47","D:\\Deploy\\frontendDACN\\src\\components\\Login\\Login.js":"48","D:\\Deploy\\frontendDACN\\src\\components\\Login\\Register.js":"49","D:\\Deploy\\frontendDACN\\src\\components\\Layout\\task.js":"50","D:\\Deploy\\frontendDACN\\src\\components\\Login\\Errorbox.js":"51","D:\\Deploy\\frontendDACN\\src\\components\\LayoutConnectDB\\Task.js":"52"},{"size":486,"mtime":1662122685003,"results":"53","hashOfConfig":"54"},{"size":1243,"mtime":1667653355075,"results":"55","hashOfConfig":"54"},{"size":362,"mtime":1660879287161,"results":"56","hashOfConfig":"54"},{"size":518,"mtime":1667907968259,"results":"57","hashOfConfig":"54"},{"size":9331,"mtime":1668017448632,"results":"58","hashOfConfig":"54"},{"size":14419,"mtime":1668075728735,"results":"59","hashOfConfig":"54"},{"size":2622,"mtime":1666074888357,"results":"60","hashOfConfig":"54"},{"size":4517,"mtime":1667909933070,"results":"61","hashOfConfig":"54"},{"size":8233,"mtime":1666340030940,"results":"62","hashOfConfig":"54"},{"size":1679,"mtime":1667207357103,"results":"63","hashOfConfig":"54"},{"size":2599,"mtime":1668017475612,"results":"64","hashOfConfig":"54"},{"size":5456,"mtime":1668075635545,"results":"65","hashOfConfig":"54"},{"size":1977,"mtime":1666339632611,"results":"66","hashOfConfig":"54"},{"size":1129,"mtime":1667921165167,"results":"67","hashOfConfig":"54"},{"size":820,"mtime":1666622468068,"results":"68","hashOfConfig":"54"},{"size":751,"mtime":1665061575571,"results":"69","hashOfConfig":"54"},{"size":186,"mtime":1667647928269,"results":"70","hashOfConfig":"54"},{"size":1086,"mtime":1667467135763,"results":"71","hashOfConfig":"54"},{"size":2921,"mtime":1668068781183,"results":"72","hashOfConfig":"54"},{"size":2421,"mtime":1667716480721,"results":"73","hashOfConfig":"54"},{"size":535,"mtime":1661495745248,"results":"74","hashOfConfig":"54"},{"size":2603,"mtime":1668072113882,"results":"75","hashOfConfig":"54"},{"size":906,"mtime":1667915739358,"results":"76","hashOfConfig":"54"},{"size":1589,"mtime":1661253813075,"results":"77","hashOfConfig":"54"},{"size":12776,"mtime":1668018444907,"results":"78","hashOfConfig":"54"},{"size":1545,"mtime":1667913999089,"results":"79","hashOfConfig":"54"},{"size":486,"mtime":1662122685003,"results":"80","hashOfConfig":"81"},{"size":1243,"mtime":1667653355075,"results":"82","hashOfConfig":"81"},{"size":362,"mtime":1660879287161,"results":"83","hashOfConfig":"81"},{"size":9966,"mtime":1668085508683,"results":"84","hashOfConfig":"81"},{"size":14884,"mtime":1668085294528,"results":"85","hashOfConfig":"81"},{"size":518,"mtime":1667907968259,"results":"86","hashOfConfig":"81"},{"size":2622,"mtime":1666074888357,"results":"87","hashOfConfig":"81"},{"size":4517,"mtime":1667909933070,"results":"88","hashOfConfig":"81"},{"size":12805,"mtime":1668084113029,"results":"89","hashOfConfig":"81"},{"size":2606,"mtime":1668083764432,"results":"90","hashOfConfig":"81"},{"size":1679,"mtime":1667207357103,"results":"91","hashOfConfig":"81"},{"size":5830,"mtime":1668085709316,"results":"92","hashOfConfig":"81"},{"size":8233,"mtime":1666340030940,"results":"93","hashOfConfig":"81"},{"size":1977,"mtime":1666339632611,"results":"94","hashOfConfig":"81"},{"size":1129,"mtime":1667921165167,"results":"95","hashOfConfig":"81"},{"size":820,"mtime":1666622468068,"results":"96","hashOfConfig":"81"},{"size":751,"mtime":1665061575571,"results":"97","hashOfConfig":"81"},{"size":1698,"mtime":1668085736790,"results":"98","hashOfConfig":"81"},{"size":203,"mtime":1668085792256,"results":"99","hashOfConfig":"81"},{"size":535,"mtime":1661495745248,"results":"100","hashOfConfig":"81"},{"size":1154,"mtime":1668085777202,"results":"101","hashOfConfig":"81"},{"size":2640,"mtime":1668086007601,"results":"102","hashOfConfig":"81"},{"size":2921,"mtime":1668068781183,"results":"103","hashOfConfig":"81"},{"size":906,"mtime":1667915739358,"results":"104","hashOfConfig":"81"},{"size":1589,"mtime":1661253813075,"results":"105","hashOfConfig":"81"},{"size":2603,"mtime":1668072113882,"results":"106","hashOfConfig":"81"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"439iof",{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4cqex1",{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233"},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262"},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275"},"D:\\DOANCN\\DoAn_CN\\my-app\\src\\index.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\App.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\reportWebVitals.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Auth\\Auth.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Dashboard\\Dashboard.js",["276","277","278","279","280","281","282","283","284"],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\LayoutConnectDB\\Layout.js",["285","286","287","288","289","290","291"],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Layout\\LayoutDND.js",["292"],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\SendEmail\\Sendmail.js",["293","294","295"],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Dashboard\\handleDash.js",["296"],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Layout\\Caroucel.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Layout\\Navbar.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Dashboard\\postBehavior.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\LayoutConnectDB\\LayoutDBhandle.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\LayoutConnectDB\\Column.js",["297"],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Layout\\Column.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Layout\\Data.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\SendEmail\\emailBehavior.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Login\\UserBehavior.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Login\\Register.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Login\\Login.js",["298"],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Notifications\\notifications.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\LayoutConnectDB\\Task.js",["299"],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Layout\\task.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\Login\\Errorbox.js",[],[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\HomePage\\Homepage.js",["300","301"],[],"import { Navbar } from \"../Layout/Navbar\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  getAllMaps,\r\n  getAllByMapId,\r\n  createMaps,\r\n  deletedMap,\r\n} from \"./HomeBehavior\";\r\nimport \"./style.css\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport { FormSendMail } from \"../SendEmail/Sendmail\";\r\nimport { decodeToken } from \"react-jwt\";\r\nimport { CheckLoginUser, udlus } from \"../Login/UserBehavior\";\r\n\r\nimport * as Icon from \"react-bootstrap-icons\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nexport const HomePage = () => {\r\n  let myDecodedToken = decodeToken(localStorage.getItem(\"CodeShare\"));\r\n  const [ListUserAccess, setListUserAccess] = useState([]);\r\n  const [ListUserRequest, setListUserRequest] = useState([]);\r\n  const [istrue, setistrue] = useState(true);\r\n  const [clickOnetimes, setClickOnetimes] = useState(false);\r\n  window.onload = function () {\r\n    getListfromUser();\r\n  };\r\n  const getListfromUser = async () => {\r\n    let FormAccessUser = {\r\n      username: myDecodedToken.CODESHARE.split(\"#\")[1],\r\n      password: myDecodedToken.CODESHARE.split(\"#\")[0],\r\n    };\r\n    const getUser = await CheckLoginUser(FormAccessUser);\r\n    let templistjoin = [];\r\n    let templistrequest = [];\r\n    if (getUser.success) {\r\n      templistjoin = getUser.user.ListEmailJoin;\r\n      templistrequest = getUser.user.ListEmailRequestJoin;\r\n    }\r\n    setListUserAccess(templistjoin);\r\n    setListUserRequest(templistrequest);\r\n  };\r\n  let nav = useNavigate();\r\n  const [GetAllmap, setGetAllMap] = useState([]);\r\n  const [FormBoard, setFormBoard] = useState({});\r\n\r\n  const getAllMapBYid = async () => {\r\n    try {\r\n      const getMap = await getAllByMapId(localStorage.getItem(\"userid\"));\r\n      if (getMap.success) {\r\n        setGetAllMap(getMap.mapgetall);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const onHandleChange = (event) => {\r\n    setFormBoard({\r\n      ...FormBoard,\r\n\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  const CreateBoard = async () => {\r\n    await createMaps(FormBoard);\r\n    setistrue(true);\r\n  };\r\n  const GetIdMapAndRedirect = (event) => {\r\n    localStorage.setItem(\"mapid\", event.target.value);\r\n    nav(\"/Dashboard\");\r\n    window.location.reload();\r\n    return;\r\n  };\r\n  const RemoveUserAccess = async (event) => {\r\n    let layremove = [];\r\n    layremove = ListUserAccess;\r\n    const index = layremove.indexOf(event.target.value);\r\n    if (index > -1) {\r\n      layremove.splice(index, 1);\r\n    }\r\n    let FormUpdateListUser = {\r\n      _id: localStorage.getItem(\"userid\"),\r\n      ListEmailJoin: layremove,\r\n    };\r\n    await udlus(FormUpdateListUser);\r\n\r\n    getListfromUser();\r\n  };\r\n  const AcceptUserFromRequest = async (event) => {\r\n    let laypop = [];\r\n    laypop = ListUserRequest;\r\n    const index = laypop.indexOf(event.target.value);\r\n    if (index > -1) {\r\n      laypop.splice(index, 1);\r\n    }\r\n    let laypush = [];\r\n    laypush = ListUserAccess;\r\n    laypush.push(`${event.target.value}`);\r\n    let FormUpdateListUser = {\r\n      _id: localStorage.getItem(\"userid\"),\r\n      ListEmailJoin: laypush,\r\n      ListEmailRequestJoin: laypop,\r\n    };\r\n    await udlus(FormUpdateListUser);\r\n\r\n    getListfromUser();\r\n  };\r\n  const RemoveUserFromRequest = async (event) => {\r\n    let layremove = [];\r\n    layremove = ListUserRequest;\r\n    const index = layremove.indexOf(event.target.value);\r\n    if (index > -1) {\r\n      layremove.splice(index, 1);\r\n    }\r\n    let FormUpdateListUser = {\r\n      _id: localStorage.getItem(\"userid\"),\r\n      ListEmailRequestJoin: layremove,\r\n    };\r\n    await udlus(FormUpdateListUser);\r\n\r\n    getListfromUser();\r\n  };\r\n  useEffect(() => {\r\n    if (!localStorage.getItem(\"token\")) {\r\n      return nav(\"/login\");\r\n    }\r\n    if (istrue) {\r\n      getAllMapBYid();\r\n      setistrue(false);\r\n    }\r\n    if (clickOnetimes) {\r\n      setTimeout(function () {\r\n        setClickOnetimes(false);\r\n      }, 5000);\r\n    }\r\n  });\r\n  const DeleteMap = async (event) => {\r\n    const answer = window.confirm(\"Do you want remove this board??\");\r\n    if (answer) {\r\n      await deletedMap(event.target.value);\r\n    }\r\n    getAllMapBYid();\r\n    return;\r\n  };\r\n  return (\r\n    <>\r\n      <Navbar></Navbar>\r\n\r\n      <div\r\n        style={{ width: \"25%\", marginLeft: \"35px\", marginTop: \"63px\" }}\r\n        className=\"btn-group dropend\"\r\n      >\r\n        {localStorage.getItem(\"managerUser\") === \"true\" ? (\r\n          <Button\r\n            style={{ marginLeft: \"20px\" }}\r\n            className=\"btn btn-info\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"offcanvas\"\r\n            data-bs-target=\"#offcanvasScrolling\"\r\n            aria-controls=\"offcanvasScrolling\"\r\n          >\r\n            👥 Manager user\r\n          </Button>\r\n        ) : (\r\n          \".\"\r\n        )}\r\n        {localStorage.getItem(\"managerUser\") === \"true\" ? (\r\n          <Button\r\n            data-tip=\"Coppy code share\"\r\n            className=\"btn-light\"\r\n            style={{ borderRadius: \"0px 10px 10px 0px\" }}\r\n            onClick={() => {\r\n              const copyText = document.getElementById(\"myInput\");\r\n              navigator.clipboard.writeText(copyText.value);\r\n              setClickOnetimes(true);\r\n            }}\r\n          >\r\n            <ReactTooltip style={{ marginLeft: \"50px\" }} />\r\n            {clickOnetimes ? (\r\n              <Icon.Check size={25}></Icon.Check>\r\n            ) : (\r\n              <Icon.Clipboard2 size={15}></Icon.Clipboard2>\r\n            )}\r\n          </Button>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {localStorage.getItem(\"managerUser\") === \"true\" ? (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary dropdown-toggle\"\r\n            data-bs-toggle=\"dropdown\"\r\n            aria-expanded=\"false\"\r\n            style={{ marginLeft: \"20px\" }}\r\n          >\r\n            Create Board\r\n          </button>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n\r\n        <ul\r\n          style={{ padding: \"0px 17px\", top: \"-23px\" }}\r\n          className=\"dropdown-menu\"\r\n        >\r\n          <div>\r\n            <div className=\"mb-3\">\r\n              <label\r\n                style={{ marginLeft: \"42%\" }}\r\n                htmlFor=\"exampleInputEmail1\"\r\n                className=\"form-label\"\r\n              >\r\n                Title\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                onChange={onHandleChange}\r\n                className=\"form-control\"\r\n                id=\"exampleInputEmail1\"\r\n                aria-describedby=\"emailHelp\"\r\n              />\r\n            </div>\r\n            <button\r\n              style={{ marginLeft: \"32%\" }}\r\n              className=\"btn btn-primary\"\r\n              onClick={CreateBoard}\r\n            >\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </ul>\r\n        <input\r\n          type=\"hidden\"\r\n          value={localStorage.getItem(\"CodeShare\")}\r\n          id=\"myInput\"\r\n        ></input>\r\n        <div\r\n          className=\"offcanvas offcanvas-start\"\r\n          data-bs-scroll=\"true\"\r\n          data-bs-backdrop=\"false\"\r\n          tabIndex=\"-1\"\r\n          id=\"offcanvasScrolling\"\r\n          aria-labelledby=\"offcanvasScrollingLabel\"\r\n        >\r\n          <div className=\"offcanvas-header\">\r\n            <h5 className=\" offcanvas-title\" id=\"offcanvasScrollingLabel\">\r\n              User management\r\n            </h5>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn-close\"\r\n              data-bs-dismiss=\"offcanvas\"\r\n              aria-label=\"Close\"\r\n            ></button>\r\n          </div>\r\n\r\n          <div className=\"offcanvas-body\">\r\n            <div className=\"FormUserAccess\">\r\n              <div className=\"FormUserAccess-title\">\r\n                <h5> list of users with access rights</h5>\r\n              </div>\r\n              <ul className=\"FormUserAccess-list\">\r\n                {ListUserAccess &&\r\n                  ListUserAccess.map((ListUserAccess) => (\r\n                    <li className=\"FormUserAccess-list-iteam\">\r\n                      <div className=\"FormUserAccess-list-iteam_left\">\r\n                        {ListUserAccess}\r\n                      </div>\r\n                      <div className=\"FormUserAccess-list-iteam_Right\">\r\n                        <button\r\n                          value={ListUserAccess}\r\n                          onClick={RemoveUserAccess}\r\n                          type=\"button\"\r\n                          className=\"btn btn-danger mt-1\"\r\n                        >\r\n                          x\r\n                        </button>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n              </ul>\r\n            </div>\r\n            <hr></hr>\r\n            <div className=\"FormUserRequestAccess\">\r\n              <div className=\"FormUserRequestAccess-title\">\r\n                <h5>Email sent approval request</h5>\r\n              </div>\r\n              <ul className=\"FormUserRequestAccess-list\">\r\n                {ListUserRequest &&\r\n                  ListUserRequest.map((ListUserRequest) => (\r\n                    <li className=\"FormUserRequestAccess-list-iteam\">\r\n                      <div className=\"FormUserRequestAccess-list-iteam_left\">\r\n                        {ListUserRequest}\r\n                      </div>\r\n                      <div className=\"FormUserRequestAccess-list-iteam_Right\">\r\n                        <button\r\n                          value={ListUserRequest}\r\n                          onClick={AcceptUserFromRequest}\r\n                          type=\"button\"\r\n                          className=\"btn btn-success mt-1\"\r\n                        >\r\n                          ✔\r\n                        </button>\r\n                        &ensp;\r\n                        <button\r\n                          value={ListUserRequest}\r\n                          onClick={RemoveUserFromRequest}\r\n                          type=\"button\"\r\n                          className=\"btn btn-danger mt-1\"\r\n                        >\r\n                          x\r\n                        </button>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {localStorage.getItem(\"managerUser\") === \"true\" ? (\r\n          <FormSendMail\r\n            CodeShare={myDecodedToken.CODESHARE}\r\n            email={localStorage.getItem(\"email\")}\r\n            // setListUserAccess={}\r\n            // setListUserRequest={}\r\n            getListfromUser={getListfromUser()}\r\n          ></FormSendMail>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n      <div\r\n        style={{ position: \"fixed\", left: \"4%\", top: \"22%\" }}\r\n        className=\"card-body\"\r\n      >\r\n        <h2\r\n          style={{ fontWeight: \"600\", fontSize: \"25px\" }}\r\n          className=\" cssfortitle\"\r\n        >\r\n          <Icon.BoxSeam></Icon.BoxSeam> Board\r\n        </h2>\r\n        <h6 className=\"card-subtitle mb-1 text-muted\">\r\n          We will not share information with anyone\r\n        </h6>\r\n        <p className=\"card-text\">\r\n          Individual commitment to a <code>group effort</code> that is what\r\n          makes a team work,<code>a company work</code> , a society work\r\n        </p>\r\n      </div>\r\n\r\n      <div>\r\n        <div className=\"shadow cssforUl\">\r\n          {GetAllmap &&\r\n            GetAllmap.map((item, index) => (\r\n              <div className=\"shadow cssforUl-li card\">\r\n                <img\r\n                  className=\"card-img-top\"\r\n                  src=\"https://www.gettyimages.in/gi-resources/images/Homepage/Hero/UK/CMS_Creative_164657191_Kingfisher.jpg\"\r\n                  alt=\"\"\r\n                />\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\" style={{ color: \"black\" }}>\r\n                    {GetAllmap[index].name}\r\n                  </h5>\r\n                  <Button\r\n                    className=\"btn btn-primary\"\r\n                    value={GetAllmap[index]._id}\r\n                    onClick={GetIdMapAndRedirect}\r\n                  >\r\n                    Go To Board\r\n                  </Button>\r\n                  {localStorage.getItem(\"managerUser\") === \"true\" ? (\r\n                    <button\r\n                      className=\"btn btn-dark\"\r\n                      style={{ marginLeft: \"20px\" }}\r\n                      value={GetAllmap[index]._id}\r\n                      onClick={DeleteMap}\r\n                    >\r\n                      Delete Map\r\n                    </button>\r\n                  ) : (\r\n                    \".\"\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n",[],"D:\\DOANCN\\DoAn_CN\\my-app\\src\\components\\HomePage\\HomeBehavior.js",[],[],"D:\\Deploy\\frontendDACN\\src\\index.js",[],[],"D:\\Deploy\\frontendDACN\\src\\App.js",[],[],"D:\\Deploy\\frontendDACN\\src\\reportWebVitals.js",[],[],"D:\\Deploy\\frontendDACN\\src\\components\\Dashboard\\Dashboard.js",["302","303","304","305","306","307","308","309","310","311"],[],"import { useNavigate } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Navbar } from \"../Layout/Navbar\";\r\nimport { Map } from \"../Layout/Caroucel\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport React from \"react\";\r\nimport { NotificationContainer } from \"react-notifications\";\r\nimport { createNotification } from \"../Notifications/notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport {\r\n  getPosts,\r\n  getPostsByMapId,\r\n  createnewPost,\r\n  DeletedPost,\r\n  getOnePost,\r\n  EditPost,\r\n  getOneMapby_Id,\r\n  updateMap,\r\n} from \"./postBehavior\";\r\nimport { udlus } from \"../Login/UserBehavior\";\r\nimport { CheckLoginUser } from \"../Login/UserBehavior\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { ModalEdit, ModalAddpost } from \"./handleDash\";\r\nimport { FormSendMail } from \"../SendEmail/Sendmail\";\r\nimport { decodeToken } from \"react-jwt\";\r\nimport \"./style.css\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\nimport { linear } from \"eases\";\r\n\r\nexport const Dashboard = () => {\r\n  const [Post, setPost] = useState();\r\n  const [Map, setMap] = useState([]);\r\n  const [istrue, setistrue] = useState(true);\r\n  const [formupdatecolor, setformupdatecolor] = useState({\r\n    NameColor: \"\",\r\n  });\r\n  const onhandlechangecolor = (event) => {\r\n    setformupdatecolor({\r\n      ...formupdatecolor,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  const Submitcolor = async (e) => {\r\n    let color = Map;\r\n    color.push(formupdatecolor);\r\n    await updateMap(color);\r\n    setistrue(true);\r\n  };\r\n  let myDecodedToken = decodeToken(localStorage.getItem(\"CodeShare\"));\r\n  let nav = useNavigate();\r\n\r\n  const [createPost, setCreatePost] = useState({\r\n    title: \"\",\r\n    Des: \"\",\r\n    Url: \"\",\r\n    Behavior: \"Learning\",\r\n    color: \"#ffa500\",\r\n    user: localStorage.getItem(\"userid\"),\r\n    MapId: localStorage.getItem(\"mapid\"),\r\n  });\r\n\r\n  // Edit Post\r\n  let [getPostEdit, setGetPostEdit] = useState({});\r\n\r\n  const onchangeEdit = (event) => {\r\n    setGetPostEdit({\r\n      ...getPostEdit,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const onSubmitEdit = async (res) => {\r\n    try {\r\n      const GetEdit = await EditPost(getPostEdit);\r\n      if (GetEdit.data.success) {\r\n        createNotification(\"warning\", GetEdit.data.Message);\r\n      }\r\n    } catch (error) {\r\n      createNotification(\"error\", \"Title can't be empty\");\r\n    }\r\n  };\r\n\r\n  const onchangeCreate = (event) => {\r\n    setCreatePost({\r\n      ...createPost,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const getPostBymapid = async () => {\r\n    try {\r\n      const GetallPostzx = await getPostsByMapId(localStorage.getItem(\"mapid\"));\r\n\r\n      if (GetallPostzx.success) {\r\n        setPost(GetallPostzx.Post_of_User);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const onclickGetonePost = async (event) => {\r\n    const getOneP = await getOnePost(event.target.value);\r\n\r\n    if (getOneP.success) {\r\n      setGetPostEdit(getOneP.posts);\r\n      getPostEdit = getOneP.posts;\r\n    }\r\n  };\r\n\r\n  const onSubmitCreate = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const onCreate = await createnewPost(createPost);\r\n      if (onCreate.data.success) {\r\n        createNotification(\"success\", \"Create new post success\");\r\n      }\r\n    } catch (error) {\r\n      createNotification(\"error\", \"Title can't be empty\");\r\n    }\r\n  };\r\n  const RemovePost = async (event) => {\r\n    await DeletedPost(event.target.value);\r\n  };\r\n  const getOneMap = async () => {\r\n    const req = await getOneMapby_Id(localStorage.getItem(\"mapid\"));\r\n    setMap(req.mapget.color);\r\n  };\r\n  useEffect(() => {\r\n    if (!localStorage.getItem(\"token\")) {\r\n      return nav(\"/login\");\r\n    }\r\n    getPostBymapid();\r\n    if (istrue) {\r\n      getOneMap();\r\n      setistrue(false);\r\n    }\r\n  });\r\n\r\n  const gobackHomepage = () => {\r\n    nav(\"/homepage\");\r\n    window.location.reaload();\r\n  };\r\n  return (\r\n    <>\r\n      <Navbar></Navbar>\r\n      <div style={{ position: \"fixed\", zIndex: \"200\" }}>\r\n        <NotificationContainer></NotificationContainer>\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          padding: \"4px\",\r\n          zIndex: \"200\",\r\n          position: \"fixed\",\r\n          \r\n        }}\r\n        className=\"cssforDashboard\"\r\n      >\r\n        <div style={{ display: \"flex\", marginTop: \"30px\" }}>\r\n          <div className=\"managePost\">\r\n            <span style={{ marginLeft: \"12px\" }} className=\"managePost-title\">\r\n              <Button\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                data-bs-toggle=\"modal\"\r\n                data-bs-target=\"#staticBackdrop\"\r\n              >\r\n                Add post\r\n              </Button>\r\n              <Button\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                style={{ marginLeft: \"20px\" }}\r\n                onClick={gobackHomepage}\r\n              >\r\n                Back\r\n              </Button>\r\n\r\n              <a style={{ width: \"100%\", marginLeft: \"20px\" }} href=\"/layoutdb\">\r\n                <Button>Go to work-space</Button>\r\n              </a>\r\n\r\n              <div className=\"RowNoteColor\">\r\n                <div className=\"RowNote-left\">\r\n                  {Map &&\r\n                    Map.map((item, index) => (\r\n                      <div className=\"RowNoteColor-body\">\r\n                        {Map[index].NameColor} -{\" \"}\r\n                        <span\r\n                          style={{\r\n                            backgroundColor: `${Map[index].color}`,\r\n                            width: \"20px\",\r\n                            height: \"20px\",\r\n                            borderRadius: \"40px\",\r\n                            padding: \"5px\",\r\n                          }}\r\n                        >\r\n                          {`${Map[index].color}`}\r\n                        </span>\r\n                      </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"RowNote-right border shadow\">\r\n                  <div className=\"form\">\r\n                    <div className=\"form-item\">\r\n                      <input\r\n                        type=\"text input\"\r\n                        placeholder=\"Content color\"\r\n                        name=\"NameColor\"\r\n                        value={formupdatecolor.NameColor}\r\n                        onChange={onhandlechangecolor}\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"form-item\">\r\n                      <label>Choose your color</label>\r\n                      <input\r\n                        type=\"color\"\r\n                        name=\"color\"\r\n                        onChange={onhandlechangecolor}\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"form-item\">\r\n                      <Button\r\n                        value={localStorage.getItem(\"mapid\")}\r\n                        onClick={Submitcolor}\r\n                      >\r\n                        Submit\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </span>\r\n            <ModalAddpost\r\n              onchangeCreate={onchangeCreate}\r\n              createPost={createPost}\r\n              onSubmitCreate={onSubmitCreate}\r\n            ></ModalAddpost>\r\n            <form>\r\n              <div className=\"managePost-body\">\r\n                <ul className=\"body-Listitem\">\r\n                  {Post &&\r\n                    Post.map(({ title, _id, Url, Des, user, color }) => (\r\n                      <li\r\n                        key={_id}\r\n                        id={_id}\r\n                        name=\"id\"\r\n                        style={{ backgroundColor: `${color}` }}\r\n                        className=\"body-item\"\r\n                      >\r\n                        <Button onClick={RemovePost} value={_id}>\r\n                          X\r\n                        </Button>\r\n                        <Button\r\n                          type=\"button\"\r\n                          className=\"btn btn-primary\"\r\n                          data-bs-toggle=\"modal\"\r\n                          data-bs-target=\"#staticBackdrop2\"\r\n                          onClick={onclickGetonePost}\r\n                          value={_id}\r\n                        >\r\n                          Edit\r\n                        </Button>\r\n                        <Button\r\n                          onClick={() => {\r\n                            window.open(Url);\r\n                          }}\r\n                        >\r\n                          🔗\r\n                        </Button>\r\n                        <ModalEdit\r\n                          id={_id}\r\n                          color={color}\r\n                          onchangeEdit={onchangeEdit}\r\n                          onSubmitEdit={onSubmitEdit}\r\n                          getPostEdit={getPostEdit}\r\n                        ></ModalEdit>\r\n\r\n                        <p className=\"cssforItem-content\">\r\n                          <b>Title: {title}</b>\r\n                        </p>\r\n                        <p className=\"cssforItem-content\">\r\n                          URL:\r\n                          {Url && Url.length > 20\r\n                            ? `${Url.substr(0, 20)}...`\r\n                            : `${Url}`}\r\n                        </p>\r\n                        <p className=\"cssforItem-content\">\r\n                          DES:\r\n                          {Des && Des.length > 20\r\n                            ? `${Des.substr(0, 19)}...`\r\n                            : `${Des}`}\r\n                        </p>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","D:\\Deploy\\frontendDACN\\src\\components\\LayoutConnectDB\\Layout.js",["312","313","314","315","316","317","318"],[],"import { useState, useEffect } from \"react\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { getOneColums } from \"../Dashboard/postBehavior\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { ModalAddColumn } from \"./LayoutDBhandle\";\r\nimport {\r\n  getPosts, //change to get all post by MAPID\r\n  getPostsByMapId,\r\n  initColumns,\r\n  updateColumns,\r\n  getAllColumns, //change to get post by MAPID\r\n  getColumnsByMapId,\r\n  DeletedPost,\r\n  getOneColumsByidBody,\r\n  DeletedColumns_ByID,\r\n  updateTaskidColumns,\r\n} from \"../Dashboard/postBehavior\";\r\nimport NotificationContainer from \"react-notifications/lib/NotificationContainer\";\r\nimport { createNotification } from \"../Notifications/notifications\";\r\nimport \"./style.css\";\r\nimport Column from \"./Column\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\nconst LayoutDNDConnectDB = () => {\r\n  const [Posthave, setPosthave] = useState([]);\r\n  const [state, setstate] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [runone, setrunone] = useState(true);\r\n  const [removeTask, setRemovetask] = useState(\"\");\r\n  const [removeTaskfromCol, setRemovetaskfromCol] = useState(\"\");\r\n  const nav = useNavigate();\r\n\r\n  const getallPostBYmapid = async () => {\r\n    try {\r\n      const GetallPostzx = await getPostsByMapId(localStorage.getItem(\"mapid\"));\r\n      if (GetallPostzx.success) {\r\n        setstate(GetallPostzx.Post_of_User);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  let title = {\r\n    //Add MapID\r\n    id: `idInit${localStorage.getItem(\"mapid\")}`,\r\n    title: \"Process\",\r\n    MapId: localStorage.getItem(\"mapid\"),\r\n  };\r\n\r\n  const updateColumnsWhenHandle = async (e) => {\r\n    console.log(\"handle update \", e);\r\n    await updateColumns(e);\r\n    autorun();\r\n  };\r\n  const updatecolumnsinit = async () => {\r\n    let UpdateInit = {\r\n      _id: localStorage.getItem(\"IDinitColumns\"),\r\n      taskIds: [],\r\n    };\r\n    let laytemp = [];\r\n    let getposthave = [...Posthave];\r\n    if (columns.length === 0) {\r\n      for (let index = 0; index < state.length; index++) {\r\n        UpdateInit.taskIds.push(state[index]._id);\r\n      }\r\n    } else {\r\n      for (let index = 0; index < columns.length; index++) {\r\n        if (columns[index].taskIds[0] !== undefined) {\r\n          for (let i = 0; i < columns[index].taskIds[0].length; i++) {\r\n            laytemp.push(columns[index].taskIds[0][i]);\r\n          }\r\n        }\r\n      }\r\n      if (state.length >= laytemp.length) {\r\n        for (let index = 0; index < state.length; index++) {\r\n          if (laytemp.indexOf(`${state[index]._id}`) === -1) {\r\n            getposthave.push(state[index]._id);\r\n          }\r\n        }\r\n      }\r\n      autorun();\r\n      UpdateInit.taskIds = [...getposthave];\r\n    }\r\n    await updateColumns(UpdateInit);\r\n    checkValidColumninit(title);\r\n  };\r\n\r\n  const GetallColByMapId = async () => {\r\n    const gAllCol = await getColumnsByMapId(localStorage.getItem(\"mapid\"));\r\n    setColumns(gAllCol.getALlCol);\r\n  };\r\n\r\n  const getInitColumns = async () => {\r\n    if (localStorage.getItem(\"IDinitColumns\") !== null) {\r\n      DeltedById(localStorage.getItem(\"IDinitColumns\"));\r\n    }\r\n    const getInit = await initColumns(title);\r\n    localStorage.setItem(\"IDinitColumns\", getInit.data.newcolumns._id);\r\n    updatecolumnsinit();\r\n  };\r\n  const DeltedById = async (id) => {\r\n    await DeletedColumns_ByID(id);\r\n    autorun();\r\n  };\r\n  const autorun = () => {\r\n    for (let index = 0; index < 5; index++) {\r\n      getallPostBYmapid();\r\n      GetallColByMapId();\r\n    }\r\n  };\r\n\r\n  const getPostTodeleteTask = async (e, idTask) => {\r\n    const req = await getOneColums(e);\r\n    let col = req.OneColumns;\r\n\r\n    const index = col.taskIds[0].indexOf(`${idTask}`);\r\n    if (index > -1) {\r\n      col.taskIds[0].splice(index, 1); // 2nd parameter means remove one item only\r\n    }\r\n    await updateTaskidColumns(col);\r\n    autorun();\r\n  };\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"token\") === null) {\r\n      return nav(\"/login\");\r\n    }\r\n    // GetallCol();\r\n\r\n    GetallColByMapId();\r\n    if (removeTask) {\r\n      getPostTodeleteTask(removeTaskfromCol, removeTask);\r\n      setRemovetaskfromCol(\"\");\r\n      setRemovetask(\"\");\r\n    }\r\n  });\r\n  const checkValidColumninit = async (e) => {\r\n    const res = await getOneColumsByidBody(e);\r\n    localStorage.setItem(\"IDinitColumns\", res.OneColumns._id);\r\n    setPosthave(res.OneColumns.taskIds[0]);\r\n    for (let index = 0; index < 4; index++) {\r\n      setPosthave(res.OneColumns.taskIds[0]);\r\n    }\r\n    return res.OneColumns;\r\n  };\r\n  window.onload = function () {\r\n    checkValidColumninit(title);\r\n    autorun();\r\n    console.clear();\r\n  };\r\n  const getOneColumsByid = async (id) => {\r\n    const getColumns = await getOneColums(id);\r\n    return getColumns.OneColumns;\r\n  };\r\n\r\n  const onDragEnd = async (results) => {\r\n    autorun();\r\n    const { destination, draggableId, source } = results;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let startPromise = getOneColumsByid(source.droppableId);\r\n    let finishPromise = getOneColumsByid(destination.droppableId);\r\n    let starts = {};\r\n    let finishs = {};\r\n    startPromise.then(function (result) {\r\n      starts = {\r\n        ...result,\r\n      };\r\n      finishPromise.then(function (result) {\r\n        finishs = {\r\n          ...result,\r\n        };\r\n        if (starts._id === finishs._id) {\r\n          const newTaskID = Array.from(starts.taskIds);\r\n          newTaskID[0].splice(source.index, 1);\r\n          newTaskID[0].splice(destination.index, 0, draggableId);\r\n\r\n          const newcolumn = {\r\n            ...starts,\r\n            taskIds: newTaskID[0],\r\n          };\r\n          updateColumnsWhenHandle(newcolumn);\r\n          checkValidColumninit(title);\r\n          return;\r\n        } else {\r\n          const finishtaskID = Array.from(finishs.taskIds);\r\n\r\n          if (finishtaskID[0] === undefined) {\r\n            finishtaskID[0] = [];\r\n          }\r\n          finishtaskID[0].splice(destination.index, 0, draggableId);\r\n          const newfinish = {\r\n            ...finishs,\r\n            taskIds: finishtaskID[0],\r\n          };\r\n\r\n          const starttaskID = Array.from(starts.taskIds);\r\n          starttaskID[0].splice(source.index, 1);\r\n          const newstart = {\r\n            ...starts,\r\n            taskIds: starttaskID[0],\r\n          };\r\n\r\n          updateColumnsWhenHandle(newstart);\r\n          updateColumnsWhenHandle(newfinish);\r\n          checkValidColumninit(title);\r\n          return;\r\n        }\r\n      });\r\n    });\r\n  };\r\n  const [addColumnsForm, setaddColumnsForm] = useState({\r\n    MapId: localStorage.getItem(\"mapid\"),\r\n    title: \"\",\r\n  });\r\n  const handleChangeFormAddColumns = (event) => {\r\n    setaddColumnsForm({\r\n      ...addColumnsForm,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const CreateNewColumn = async () => {\r\n    const req = await initColumns(addColumnsForm);\r\n    autorun();\r\n    return req;\r\n  };\r\n  const submitchange = async (event) => {\r\n    let updateCol = {\r\n      _id: event.target.value,\r\n      title: document.getElementById(`${event.target.value}`).innerText,\r\n    };\r\n\r\n    if (updateCol.title.length > 25) {\r\n      createNotification(\"info\", \"Title no more than 25 characters \");\r\n    } else {\r\n      await updateColumns(updateCol);\r\n      createNotification(\"warning\", \"Update title success\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"cssforlayout\" style={{ width: \"100%\", height: \"100%\", position: \"fixed\" }}>\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <nav\r\n              style={{ opacity: \"0.8\", height: \"136%\" }}\r\n              className=\"navbar navbar-expand-lg navbar-dark bg-dark\"\r\n            >\r\n              <a className=\"navbar-brand\" href=\"#\">\r\n                <img\r\n                  src=\"https://cdn-icons-png.flaticon.com/512/3209/3209265.png\"\r\n                  width=\"30\"\r\n                  height=\"30\"\r\n                  className=\"d-inline-block align-top\"\r\n                  alt=\"\"\r\n                />\r\n                Smart-note\r\n              </a>\r\n              <button\r\n                className=\"navbar-toggler\"\r\n                type=\"button\"\r\n                data-toggle=\"collapse\"\r\n                data-target=\"#my-nav-bar\"\r\n                aria-controls=\"my-nav-bar\"\r\n                aria-expanded=\"false\"\r\n                aria-label=\"Toggle navigation\"\r\n              >\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n              </button>\r\n              <div className=\"collapse navbar-collapse\" id=\"my-nav-bar\">\r\n                <ul className=\"navbar-nav\">\r\n                  <li className=\"nav-item active\">\r\n                    {localStorage.getItem(\"managerUser\") === \"true\" ? (\r\n                      <Button onClick={getInitColumns}>Init map</Button>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </li>\r\n\r\n                  <li className=\"nav-item\">\r\n                    <a\r\n                      style={{ width: \"100%\", marginLeft: \"20px\" }}\r\n                      href=\"/Dashboard\"\r\n                    >\r\n                      <Button>Back</Button>\r\n                    </a>\r\n                  </li>\r\n\r\n                  <li className=\"nav-item\">\r\n                    <Button\r\n                      type=\"button\"\r\n                      style={{ marginLeft: \"20px\" }}\r\n                      className=\"btn btn-primary\"\r\n                      data-bs-toggle=\"modal\"\r\n                      data-bs-target=\"#exampleModal\"\r\n                      data-bs-whatever=\"@mdo\"\r\n                    >\r\n                      Create new Column\r\n                    </Button>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <Button\r\n                      type=\"button\"\r\n                      style={{ marginLeft: \"20px\" }}\r\n                      className=\"btn btn-primary\"\r\n                      data-bs-toggle=\"modal\"\r\n                      data-bs-target=\"#exampleModal\"\r\n                      data-bs-whatever=\"@mdo\"\r\n                    >\r\n                      Reset all\r\n                    </Button>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n        <NotificationContainer></NotificationContainer>\r\n        <ModalAddColumn\r\n          addColumnsForm={addColumnsForm}\r\n          handleChangeFormAddColumns={handleChangeFormAddColumns}\r\n          CreateNewColumn={CreateNewColumn}\r\n        ></ModalAddColumn>\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <div style={{ display: \"flex\" }}>\r\n            {columns &&\r\n              columns.map((columID, index) => {\r\n                const colum = columns[index];\r\n                const task = colum.taskIds.map(\r\n                  (taskIds, index) => colum.taskIds[index]\r\n                );\r\n                if (task[0] === undefined) {\r\n                  const lay = [];\r\n                  return (\r\n                    <>\r\n                      <div className=\"Column\">\r\n                        <div className=\"Column-navbar\">\r\n                          <Button\r\n                            onClick={submitchange}\r\n                            value={colum._id}\r\n                            className=\"btn btn-warning \"\r\n                          >\r\n                            Save\r\n                          </Button>\r\n\r\n                          <div\r\n                            id={colum._id}\r\n                            name={colum._id}\r\n                            className=\"card-title\"\r\n                            contentEditable={true}\r\n                            suppressContentEditableWarning={true}\r\n                          >\r\n                            {colum.title}\r\n                          </div>\r\n\r\n                          <Button\r\n                            onClick={() => {\r\n                              DeltedById(colum._id);\r\n                            }}\r\n                            className=\"btn btn-danger mt-1\"\r\n                          >\r\n                            <Icon.Trash fontWeight={600} size={20}></Icon.Trash>\r\n                          </Button>\r\n                        </div>\r\n                        <div className=\"Column-Body\">\r\n                          <Column\r\n                            setRemovetaskfromCol={setRemovetaskfromCol}\r\n                            setRemovetask={setRemovetask}\r\n                            key={colum._id}\r\n                            column={colum}\r\n                            tasks={lay}\r\n                          ></Column>\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <>\r\n                      <div className=\"Column\">\r\n                        <div className=\"Column-navbar\">\r\n                          <Button\r\n                            onClick={submitchange}\r\n                            value={colum._id}\r\n                            className=\"btn btn-warning \"\r\n                          >\r\n                            Save\r\n                          </Button>\r\n\r\n                          <div\r\n                            id={colum._id}\r\n                            name={colum._id}\r\n                            className=\"card-title\"\r\n                            contentEditable={true}\r\n                            suppressContentEditableWarning={true}\r\n                          >\r\n                            {colum.title}\r\n                          </div>\r\n\r\n                          <Button\r\n                            onClick={() => {\r\n                              DeltedById(colum._id);\r\n                            }}\r\n                            className=\"btn btn-danger mt-1\"\r\n                          >\r\n                            <Icon.Trash fontWeight={600} size={20}></Icon.Trash>\r\n                          </Button>\r\n                        </div>\r\n                        <div className=\"Column-Body\">\r\n                          <Column\r\n                            setRemovetaskfromCol={setRemovetaskfromCol}\r\n                            setRemovetask={setRemovetask}\r\n                            key={colum._id}\r\n                            column={colum}\r\n                            tasks={task[0]}\r\n                          ></Column>\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  );\r\n                }\r\n              })}\r\n          </div>\r\n        </DragDropContext>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default LayoutDNDConnectDB;\r\n","D:\\Deploy\\frontendDACN\\src\\components\\Auth\\Auth.js",[],[],"D:\\Deploy\\frontendDACN\\src\\components\\Layout\\LayoutDND.js",["319"],[],"import initData from \"./Data\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport Column from \"./Column\";\r\nimport { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nconst LayoutDND = () => {\r\n  const [state, setstate] = useState(initData);\r\n\r\n  const onDragEnd = (results) => {\r\n    const { destination, draggableId, source } = results;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const start = state.colums[source.droppableId];\r\n    const finish = state.colums[destination.droppableId];\r\n\r\n    if (start === finish) {\r\n      const newTaskID = Array.from(start.taskIds);\r\n\r\n      newTaskID.splice(source.index, 1);\r\n      newTaskID.splice(destination.index, 0, draggableId);\r\n\r\n      const newcolumn = {\r\n        ...start,\r\n        taskIds: newTaskID,\r\n      };\r\n\r\n      console.log(\"newcolumn\", newcolumn);\r\n      const newstate = {\r\n        ...state,\r\n        colums: {\r\n          ...state.colums,\r\n          [newcolumn.id]: newcolumn,\r\n        },\r\n      };\r\n      // console.log(\"Result start == finish\", results);\r\n      setstate(newstate);\r\n      // console.log(\"rs\", results);\r\n      return;\r\n    }\r\n\r\n    const starttaskID = Array.from(start.taskIds);\r\n    starttaskID.splice(source.index, 1);\r\n    const newstart = {\r\n      ...start,\r\n      taskIds: starttaskID,\r\n    };\r\n\r\n    const finishtaskID = Array.from(finish.taskIds);\r\n    finishtaskID.splice(destination.index, 0, draggableId);\r\n    const newfinish = {\r\n      ...finish,\r\n      taskIds: finishtaskID,\r\n    };\r\n\r\n    const newstate = {\r\n      ...state,\r\n      colums: {\r\n        ...state.colums,\r\n        [newstart.id]: newstart,\r\n        [newfinish.id]: newfinish,\r\n      },\r\n    };\r\n    // console.log(\"Result\", results);\r\n    setstate(newstate);\r\n  };\r\n  return (\r\n    <>\r\n      {/* {console.log(\"state\", state)} */}\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <div style={{ display: \"flex\" }}>\r\n          {/* {console.log(\"task, state\", state)} */}\r\n          {state.columOrder.map((columID, index) => {\r\n            const colum = state.colums[columID];\r\n            // console.log(\"colum,index\", colum, index);\r\n            const tasks = colum.taskIds.map((taskIds) => state.tasks[taskIds]);\r\n\r\n            // console.log(\"task\", tasks);\r\n            return (\r\n              <Column key={colum.id} column={colum} tasks={tasks}></Column>\r\n            );\r\n          })}\r\n        </div>\r\n      </DragDropContext>\r\n    </>\r\n  );\r\n};\r\nexport default LayoutDND;\r\n","D:\\Deploy\\frontendDACN\\src\\components\\SendEmail\\Sendmail.js",["320","321","322"],[],"import \"./style.css\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\nimport { sendemail } from \"./emailBehavior\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { CheckLoginUser, LoginUser, udlus } from \"../Login/UserBehavior\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { isExpired, decodeToken } from \"react-jwt\";\r\n\r\nexport const FormSendMail = ({\r\n  CodeShare,\r\n  email,\r\n  setListUserAccess,\r\n  setListUserRequest,\r\n  getListfromUser,\r\n}) => {\r\n  let decodetoken;\r\n  const nav = useNavigate();\r\n\r\n  const [form, setform] = useState({\r\n    emailNeedAccess: email,\r\n    code: \"\",\r\n  });\r\n\r\n  const handlechange = (event) => {\r\n    setform({ ...form, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const startSendMail = async (event) => {\r\n    //check List user\r\n    let username = localStorage.getItem(\"username\");\r\n    let email = localStorage.getItem(\"email\");\r\n    decodetoken = decodeToken(form.code);\r\n    let formsendmail = {\r\n      email: decodetoken.CODESHARE.split(\"#\")[3],\r\n      subject: `Request Access from mail : ${form.emailNeedAccess}`,\r\n      text: \"Hello I want to join with you ^^\",\r\n    };\r\n    let FormUpdateListUser = {\r\n      _id: decodetoken.CODESHARE.split(\"#\")[2],\r\n      ListEmailJoin: [],\r\n      ListEmailRequestJoin: [],\r\n    };\r\n    let FormAccessUser = {\r\n      username: decodetoken.CODESHARE.split(\"#\")[1],\r\n      password: decodetoken.CODESHARE.split(\"#\")[0],\r\n    };\r\n    const LoginData = await CheckLoginUser(FormAccessUser);\r\n    FormUpdateListUser.ListEmailJoin = Array.from(LoginData.user.ListEmailJoin);\r\n    FormUpdateListUser.ListEmailRequestJoin = Array.from(\r\n      LoginData.user.ListEmailRequestJoin\r\n    );\r\n    if (FormUpdateListUser.ListEmailJoin.indexOf(`${email}`) > -1) {\r\n      const answer = window.confirm(\r\n        \"This email has been approved, do you want to move??\"\r\n      );\r\n      if (answer) {\r\n        localStorage.clear();\r\n        await LoginUser(FormAccessUser);\r\n        localStorage.setItem(\r\n          \"username\",\r\n          username + \" (You are in another space)\"\r\n        );\r\n        localStorage.setItem(\"email\", email);\r\n\r\n        localStorage.setItem(\"managerUser\", false);\r\n        nav(\"/homepage\");\r\n        window.location.reload();\r\n      }\r\n      return;\r\n    }\r\n    if (FormUpdateListUser.ListEmailRequestJoin.indexOf(`${email}`) < 0) {\r\n      console.log(\"formsendmail\", formsendmail);\r\n      alert(\"Email has been sent request !!\");\r\n\r\n      FormUpdateListUser.ListEmailRequestJoin.push(`${email}`);\r\n      const update = await udlus(FormUpdateListUser);\r\n      // setListUserAccess(update.data.updateUser.ListEmailJoin);\r\n      // setListUserRequest(update.data.updateUser.ListEmailRequestJoin);\r\n      await sendemail(formsendmail);\r\n\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"sendmail\">\r\n        <div className=\"  CollapseForm collapse\" id=\"collapseExample\">\r\n          <div className=\"shadow border border-primary cssforform-Body\">\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">\r\n                Email address\r\n              </label>\r\n              <input\r\n                disabled\r\n                type=\"email\"\r\n                name=\"emailNeedAccess\"\r\n                onChange={handlechange}\r\n                value={form.emailNeedAccess}\r\n                className=\"form-control\"\r\n                id=\"exampleInputEmail1\"\r\n                aria-describedby=\"emailHelp\"\r\n              />\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\r\n                CODE\r\n              </label>\r\n              <input\r\n                onChange={handlechange}\r\n                value={form.code}\r\n                name=\"code\"\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"exampleInputPassword1\"\r\n              />\r\n            </div>\r\n            <button onClick={startSendMail} className=\"btn btn-primary\">\r\n              Send\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#collapseExample\"\r\n          aria-expanded=\"false\"\r\n          aria-controls=\"collapseExample\"\r\n          className=\"btn btn-info btn-circle btn-xl btnCollapse\"\r\n        >\r\n          <Icon.ListCheck></Icon.ListCheck>\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","D:\\Deploy\\frontendDACN\\src\\components\\HomePage\\Homepage.js",["323","324"],[],"import { Navbar } from \"../Layout/Navbar\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  getAllMaps,\r\n  getAllByMapId,\r\n  createMaps,\r\n  deletedMap,\r\n} from \"./HomeBehavior\";\r\nimport \"./style.css\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport { FormSendMail } from \"../SendEmail/Sendmail\";\r\nimport { decodeToken } from \"react-jwt\";\r\nimport { CheckLoginUser, udlus } from \"../Login/UserBehavior\";\r\n\r\nimport * as Icon from \"react-bootstrap-icons\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nexport const HomePage = () => {\r\n  let myDecodedToken = decodeToken(localStorage.getItem(\"CodeShare\"));\r\n  const [ListUserAccess, setListUserAccess] = useState([]);\r\n  const [ListUserRequest, setListUserRequest] = useState([]);\r\n  const [istrue, setistrue] = useState(true);\r\n  const [clickOnetimes, setClickOnetimes] = useState(false);\r\n  window.onload = function () {\r\n    getListfromUser();\r\n  };\r\n  const getListfromUser = async () => {\r\n    let FormAccessUser = {\r\n      username: myDecodedToken.CODESHARE.split(\"#\")[1],\r\n      password: myDecodedToken.CODESHARE.split(\"#\")[0],\r\n    };\r\n    const getUser = await CheckLoginUser(FormAccessUser);\r\n    let templistjoin = [];\r\n    let templistrequest = [];\r\n    if (getUser.success) {\r\n      templistjoin = getUser.user.ListEmailJoin;\r\n      templistrequest = getUser.user.ListEmailRequestJoin;\r\n    }\r\n    setListUserAccess(templistjoin);\r\n    setListUserRequest(templistrequest);\r\n  };\r\n  let nav = useNavigate();\r\n  const [GetAllmap, setGetAllMap] = useState([]);\r\n  const [FormBoard, setFormBoard] = useState({});\r\n\r\n  const getAllMapBYid = async () => {\r\n    try {\r\n      const getMap = await getAllByMapId(localStorage.getItem(\"userid\"));\r\n      if (getMap.success) {\r\n        setGetAllMap(getMap.mapgetall);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const onHandleChange = (event) => {\r\n    setFormBoard({\r\n      ...FormBoard,\r\n\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  const CreateBoard = async () => {\r\n    await createMaps(FormBoard);\r\n    setistrue(true);\r\n  };\r\n  const GetIdMapAndRedirect = (event) => {\r\n    localStorage.setItem(\"mapid\", event.target.value);\r\n    nav(\"/Dashboard\");\r\n    window.location.reload();\r\n    return;\r\n  };\r\n  const RemoveUserAccess = async (event) => {\r\n    let layremove = [];\r\n    layremove = ListUserAccess;\r\n    const index = layremove.indexOf(event.target.value);\r\n    if (index > -1) {\r\n      layremove.splice(index, 1);\r\n    }\r\n    let FormUpdateListUser = {\r\n      _id: localStorage.getItem(\"userid\"),\r\n      ListEmailJoin: layremove,\r\n    };\r\n    await udlus(FormUpdateListUser);\r\n\r\n    getListfromUser();\r\n  };\r\n  const AcceptUserFromRequest = async (event) => {\r\n    let laypop = [];\r\n    laypop = ListUserRequest;\r\n    const index = laypop.indexOf(event.target.value);\r\n    if (index > -1) {\r\n      laypop.splice(index, 1);\r\n    }\r\n    let laypush = [];\r\n    laypush = ListUserAccess;\r\n    laypush.push(`${event.target.value}`);\r\n    let FormUpdateListUser = {\r\n      _id: localStorage.getItem(\"userid\"),\r\n      ListEmailJoin: laypush,\r\n      ListEmailRequestJoin: laypop,\r\n    };\r\n    await udlus(FormUpdateListUser);\r\n\r\n    getListfromUser();\r\n  };\r\n  const RemoveUserFromRequest = async (event) => {\r\n    let layremove = [];\r\n    layremove = ListUserRequest;\r\n    const index = layremove.indexOf(event.target.value);\r\n    if (index > -1) {\r\n      layremove.splice(index, 1);\r\n    }\r\n    let FormUpdateListUser = {\r\n      _id: localStorage.getItem(\"userid\"),\r\n      ListEmailRequestJoin: layremove,\r\n    };\r\n    await udlus(FormUpdateListUser);\r\n\r\n    getListfromUser();\r\n  };\r\n  useEffect(() => {\r\n    if (!localStorage.getItem(\"token\")) {\r\n      return nav(\"/login\");\r\n    }\r\n    if (istrue) {\r\n      getAllMapBYid();\r\n      setistrue(false);\r\n    }\r\n    if (clickOnetimes) {\r\n      setTimeout(function () {\r\n        setClickOnetimes(false);\r\n      }, 5000);\r\n    }\r\n  });\r\n  const DeleteMap = async (event) => {\r\n    const answer = window.confirm(\"Do you want remove this board??\");\r\n    if (answer) {\r\n      await deletedMap(event.target.value);\r\n    }\r\n    getAllMapBYid();\r\n    return;\r\n  };\r\n  return (\r\n    <>\r\n      <Navbar></Navbar>\r\n\r\n      <div\r\n        style={{ width: \"25%\", marginLeft: \"35px\", marginTop: \"63px\" }}\r\n        className=\"btn-group dropend\"\r\n      >\r\n        {localStorage.getItem(\"managerUser\") === \"true\" ? (\r\n          <Button\r\n            style={{ marginLeft: \"20px\" }}\r\n            className=\"btn btn-info\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"offcanvas\"\r\n            data-bs-target=\"#offcanvasScrolling\"\r\n            aria-controls=\"offcanvasScrolling\"\r\n          >\r\n            👥 Manager user\r\n          </Button>\r\n        ) : (\r\n          \".\"\r\n        )}\r\n        {localStorage.getItem(\"managerUser\") === \"true\" ? (\r\n          <Button\r\n            data-tip=\"Coppy code share\"\r\n            className=\"btn-success\"\r\n            style={{ borderRadius: \"0px 10px 10px 0px\" }}\r\n            onClick={() => {\r\n              const copyText = document.getElementById(\"myInput\");\r\n              navigator.clipboard.writeText(copyText.value);\r\n              setClickOnetimes(true);\r\n            }}\r\n          >\r\n            <ReactTooltip style={{ marginLeft: \"50px\" }} />\r\n            {clickOnetimes ? (\r\n              <Icon.Check size={25}></Icon.Check>\r\n            ) : (\r\n              <Icon.Clipboard2 size={15}></Icon.Clipboard2>\r\n            )}\r\n          </Button>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {localStorage.getItem(\"managerUser\") === \"true\" ? (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary dropdown-toggle\"\r\n            data-bs-toggle=\"dropdown\"\r\n            aria-expanded=\"false\"\r\n            style={{ marginLeft: \"20px\" }}\r\n          >\r\n            Create Board\r\n          </button>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n\r\n        <ul\r\n          style={{ padding: \"0px 17px\", top: \"-23px\" }}\r\n          className=\"dropdown-menu\"\r\n        >\r\n          <div>\r\n            <div className=\"mb-3\">\r\n              <label\r\n                style={{ marginLeft: \"42%\" }}\r\n                htmlFor=\"exampleInputEmail1\"\r\n                className=\"form-label\"\r\n              >\r\n                Title\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                onChange={onHandleChange}\r\n                className=\"form-control\"\r\n                id=\"exampleInputEmail1\"\r\n                aria-describedby=\"emailHelp\"\r\n              />\r\n            </div>\r\n            <button\r\n              style={{ marginLeft: \"32%\" }}\r\n              className=\"btn btn-primary\"\r\n              onClick={CreateBoard}\r\n            >\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </ul>\r\n        <input\r\n          type=\"hidden\"\r\n          value={localStorage.getItem(\"CodeShare\")}\r\n          id=\"myInput\"\r\n        ></input>\r\n        <div\r\n          className=\"offcanvas offcanvas-start\"\r\n          data-bs-scroll=\"true\"\r\n          data-bs-backdrop=\"false\"\r\n          tabIndex=\"-1\"\r\n          id=\"offcanvasScrolling\"\r\n          aria-labelledby=\"offcanvasScrollingLabel\"\r\n        >\r\n          <div className=\"offcanvas-header\">\r\n            <h5 className=\" offcanvas-title\" id=\"offcanvasScrollingLabel\">\r\n              User management\r\n            </h5>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn-close\"\r\n              data-bs-dismiss=\"offcanvas\"\r\n              aria-label=\"Close\"\r\n            ></button>\r\n          </div>\r\n\r\n          <div className=\"offcanvas-body\">\r\n            <div className=\"FormUserAccess\">\r\n              <div className=\"FormUserAccess-title\">\r\n                <h5> list of users with access rights</h5>\r\n              </div>\r\n              <ul className=\"FormUserAccess-list\">\r\n                {ListUserAccess &&\r\n                  ListUserAccess.map((ListUserAccess) => (\r\n                    <li className=\"FormUserAccess-list-iteam\">\r\n                      <div className=\"FormUserAccess-list-iteam_left\">\r\n                        {ListUserAccess}\r\n                      </div>\r\n                      <div className=\"FormUserAccess-list-iteam_Right\">\r\n                        <button\r\n                          value={ListUserAccess}\r\n                          onClick={RemoveUserAccess}\r\n                          type=\"button\"\r\n                          className=\"btn btn-danger mt-1\"\r\n                        >\r\n                          x\r\n                        </button>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n              </ul>\r\n            </div>\r\n            <hr></hr>\r\n            <div className=\"FormUserRequestAccess\">\r\n              <div className=\"FormUserRequestAccess-title\">\r\n                <h5>Email sent approval request</h5>\r\n              </div>\r\n              <ul className=\"FormUserRequestAccess-list\">\r\n                {ListUserRequest &&\r\n                  ListUserRequest.map((ListUserRequest) => (\r\n                    <li className=\"FormUserRequestAccess-list-iteam\">\r\n                      <div className=\"FormUserRequestAccess-list-iteam_left\">\r\n                        {ListUserRequest}\r\n                      </div>\r\n                      <div className=\"FormUserRequestAccess-list-iteam_Right\">\r\n                        <button\r\n                          value={ListUserRequest}\r\n                          onClick={AcceptUserFromRequest}\r\n                          type=\"button\"\r\n                          className=\"btn btn-success mt-1\"\r\n                        >\r\n                          ✔\r\n                        </button>\r\n                        &ensp;\r\n                        <button\r\n                          value={ListUserRequest}\r\n                          onClick={RemoveUserFromRequest}\r\n                          type=\"button\"\r\n                          className=\"btn btn-danger mt-1\"\r\n                        >\r\n                          x\r\n                        </button>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {localStorage.getItem(\"managerUser\") === \"true\" ? (\r\n          <FormSendMail\r\n            CodeShare={myDecodedToken.CODESHARE}\r\n            email={localStorage.getItem(\"email\")}\r\n            // setListUserAccess={}\r\n            // setListUserRequest={}\r\n            getListfromUser={getListfromUser()}\r\n          ></FormSendMail>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n      <div\r\n        style={{ position: \"fixed\", left: \"4%\", top: \"22%\" }}\r\n        className=\"card-body shadow-none\"\r\n      >\r\n        <h2\r\n          style={{ fontWeight: \"600\", fontSize: \"25px\" }}\r\n          className=\" cssfortitle\"\r\n        >\r\n          <Icon.BoxSeam></Icon.BoxSeam> Board\r\n        </h2>\r\n        <h6 className=\"card-subtitle mb-1 text-muted\">\r\n          We will not share information with anyone\r\n        </h6>\r\n        <p className=\"card-text\">\r\n          Individual commitment to a <code>group effort</code> that is what\r\n          makes a team work,<code>a company work</code> , a society work\r\n        </p>\r\n      </div>\r\n      <hr></hr>\r\n      <div>\r\n        <div className=\"shadow cssforUl\">\r\n          {GetAllmap &&\r\n            GetAllmap.map((item, index) => (\r\n              <div className=\"shadow cssforUl-li card\">\r\n                <img\r\n                  className=\"card-img-top\"\r\n                  src=\"https://www.gettyimages.in/gi-resources/images/Homepage/Hero/UK/CMS_Creative_164657191_Kingfisher.jpg\"\r\n                  alt=\"\"\r\n                />\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\" style={{ color: \"black\" }}>\r\n                    {GetAllmap[index].name}\r\n                  </h5>\r\n                  <Button\r\n                    className=\"btn btn-primary\"\r\n                    value={GetAllmap[index]._id}\r\n                    onClick={GetIdMapAndRedirect}\r\n                  >\r\n                    Go To Board\r\n                  </Button>\r\n                  {localStorage.getItem(\"managerUser\") === \"true\" ? (\r\n                    <button\r\n                      className=\"btn btn-dark\"\r\n                      style={{ marginLeft: \"20px\" }}\r\n                      value={GetAllmap[index]._id}\r\n                      onClick={DeleteMap}\r\n                    >\r\n                      Delete Map\r\n                    </button>\r\n                  ) : (\r\n                    \".\"\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","D:\\Deploy\\frontendDACN\\src\\components\\Layout\\Navbar.js",[],[],[],"D:\\Deploy\\frontendDACN\\src\\components\\Layout\\Caroucel.js",[],[],"D:\\Deploy\\frontendDACN\\src\\components\\Dashboard\\postBehavior.js",[],[],[],"D:\\Deploy\\frontendDACN\\src\\components\\Dashboard\\handleDash.js",["325"],[],"import Button from \"react-bootstrap/esm/Button\";\r\nexport const ModalEdit = ({\r\n  id,\r\n  color,\r\n  onchangeEdit,\r\n  getPostEdit,\r\n  onSubmitEdit,\r\n}) => {\r\n  let gcolor = getPostEdit.color;\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"modal fade\"\r\n        id=\"staticBackdrop2\"\r\n        data-bs-backdrop=\"static\"\r\n        data-bs-keyboard=\"false\"\r\n        aria-labelledby=\"staticBackdropLabel\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <div className=\"modal-dialog modal-dialog-centered\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title\" id=\"staticBackdropLabel\">\r\n                Edit post\r\n              </h5>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-close\"\r\n                data-bs-dismiss=\"modal\"\r\n                aria-label=\"Close\"\r\n              ></button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <form>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">\r\n                    Title\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    onChange={onchangeEdit}\r\n                    value={getPostEdit.title}\r\n                    className=\"form-control\"\r\n                    id=\"exampleInputEmail1\"\r\n                    aria-describedby=\"emailHelp\"\r\n                  />\r\n                  <div id=\"emailHelp\" className=\"form-text\"></div>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\r\n                    Describtion\r\n                  </label>\r\n                  <input\r\n                    name=\"Des\"\r\n                    type=\"text\"\r\n                    onChange={onchangeEdit}\r\n                    value={getPostEdit.Des}\r\n                    className=\"form-control\"\r\n                    id=\"exampleInputPassword1\"\r\n                  />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\r\n                    Url\r\n                  </label>\r\n                  <input\r\n                    name=\"Url\"\r\n                    type=\"text\"\r\n                    onChange={onchangeEdit}\r\n                    value={getPostEdit.Url}\r\n                    placeholder=\"https://\"\r\n                    className=\"form-control\"\r\n                    id=\"exampleInputPassword1\"\r\n                  />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\r\n                    Behavior\r\n                  </label>\r\n\r\n                  <select\r\n                    value={getPostEdit.Behavior}\r\n                    defaultValue={\"DEFAULT\"}\r\n                    name=\"Behavior\"\r\n                    className=\"form-select\"\r\n                    onChange={onchangeEdit}\r\n                    aria-label=\"Default select example\"\r\n                  >\r\n                    <option selected value={getPostEdit.Behavior}>\r\n                      You are choose here - {getPostEdit.Behavior}\r\n                    </option>\r\n                    <option value=\"To-Learning\">To-Learning</option>\r\n                    <option value=\"Learning\">Learning</option>\r\n                  </select>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\r\n                    Here to change color\r\n                  </label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type={\"color\"}\r\n                    name=\"color\"\r\n                    onChange={onchangeEdit}\r\n                    value={color}\r\n                  ></input>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-secondary\"\r\n                    data-bs-dismiss=\"modal\"\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                  <Button onClick={onSubmitEdit} className=\"btn btn-primary\">\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport const ModalAddpost = ({\r\n  onchangeCreate,\r\n  createPost,\r\n  onSubmitCreate,\r\n}) => {\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"modal fade\"\r\n        id=\"staticBackdrop\"\r\n        data-bs-backdrop=\"static\"\r\n        data-bs-keyboard=\"false\"\r\n        aria-labelledby=\"staticBackdropLabel\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <div className=\"modal-dialog modal-dialog-centered\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title\" id=\"staticBackdropLabel\">\r\n                Add new post\r\n              </h5>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-close\"\r\n                data-bs-dismiss=\"modal\"\r\n                aria-label=\"Close\"\r\n              ></button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <form>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">\r\n                    Title\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    onChange={onchangeCreate}\r\n                    value={createPost.title}\r\n                    className=\"form-control\"\r\n                    id=\"exampleInputEmail1\"\r\n                    aria-describedby=\"emailHelp\"\r\n                  />\r\n                  <div id=\"emailHelp\" className=\"form-text\"></div>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\r\n                    Describtion\r\n                  </label>\r\n                  <input\r\n                    name=\"Des\"\r\n                    type=\"text\"\r\n                    onChange={onchangeCreate}\r\n                    value={createPost.Des}\r\n                    className=\"form-control\"\r\n                    id=\"exampleInputPassword1\"\r\n                  />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\r\n                    Url\r\n                  </label>\r\n                  <input\r\n                    name=\"Url\"\r\n                    type=\"text\"\r\n                    onChange={onchangeCreate}\r\n                    value={createPost.Url}\r\n                    placeholder=\"https://\"\r\n                    className=\"form-control\"\r\n                    id=\"exampleInputPassword1\"\r\n                  />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\r\n                    Behavior\r\n                  </label>\r\n                  <select\r\n                    name=\"Behavior\"\r\n                    className=\"form-select\"\r\n                    onChange={onchangeCreate}\r\n                    aria-label=\"Default select example\"\r\n                  >\r\n                    <option value=\"To-Learning\">To-Learning</option>\r\n                    <option value=\"Learning\">Learning</option>\r\n                  </select>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-secondary\"\r\n                    data-bs-dismiss=\"modal\"\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                  <Button onClick={onSubmitCreate} className=\"btn btn-primary\">\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","D:\\Deploy\\frontendDACN\\src\\components\\LayoutConnectDB\\LayoutDBhandle.js",[],[],"D:\\Deploy\\frontendDACN\\src\\components\\LayoutConnectDB\\Column.js",["326"],[],"import { Droppable } from \"react-beautiful-dnd\";\r\nimport { DeletedColumns_ByID } from \"../Dashboard/postBehavior\";\r\nimport Task from \"./Task\";\r\nimport \"./style.css\";\r\n\r\nconst Column = ({ column, tasks , setRemovetask,setRemovetaskfromCol}) => {\r\n  return (\r\n    <>\r\n      <Droppable droppableId={column._id}>\r\n        {(provided) => (\r\n          <div\r\n            style={{\r\n              marginRight: \"11px\",\r\n              backgroundColor: \"#dfe0e4\",\r\n              width: \"100%\",\r\n              maxHeight: \"455px\",\r\n              overflowY: \"auto\",\r\n              borderRadius: \"0px 0px 8px 8px\",\r\n              marginTop: \"20px\",\r\n            }}\r\n            className=\"cssforColumn\"\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            {tasks.map((task, index) => (\r\n              <Task key={task} task={task} index={index} idcol={column._id} setRemovetaskfromCol={setRemovetaskfromCol}  setRemovetask={setRemovetask}></Task>\r\n            ))}\r\n            {provided.placeholder}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </>\r\n  );\r\n};\r\nexport default Column;\r\n","D:\\Deploy\\frontendDACN\\src\\components\\Layout\\Column.js",[],[],"D:\\Deploy\\frontendDACN\\src\\components\\Layout\\Data.js",[],[],"D:\\Deploy\\frontendDACN\\src\\components\\HomePage\\HomeBehavior.js",[],[],"D:\\Deploy\\frontendDACN\\src\\components\\SendEmail\\emailBehavior.js",[],[],"D:\\Deploy\\frontendDACN\\src\\components\\Notifications\\notifications.js",[],[],"D:\\Deploy\\frontendDACN\\src\\components\\Login\\UserBehavior.js",[],[],"D:\\Deploy\\frontendDACN\\src\\components\\Login\\Login.js",["327"],[],"import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { LoginUser } from \"./UserBehavior\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport ErrorBox from \"./Errorbox\";\r\nimport \"./StyleScss.scss\";\r\nimport Register from \"./Register\";\r\n\r\nexport default function Login() {\r\n  const [showErrorBox, setShowErrorBox] = useState(false);\r\n  const nav = useNavigate();\r\n  useEffect(() => {\r\n    document.title = \"Login\";\r\n  });\r\n\r\n  const [loginForm, setLoginForm] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const onChangeLogin = (event) => {\r\n    setLoginForm({ ...loginForm, [event.target.name]: event.target.value });\r\n    setShowErrorBox(false);\r\n  };\r\n\r\n  const Login = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const LoginData = await LoginUser(loginForm);\r\n      if (LoginData.success) {\r\n        nav(\"/homepage\");\r\n        window.location.reload();\r\n      }\r\n    } catch (error) {\r\n      setShowErrorBox(true);\r\n      console.log(error.response);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"cssforlayout\"\r\n        style={{ width: \"100%\", height: \"100%\", position: \"fixed\" }}\r\n      >\r\n        <div className=\"materialContainer\">\r\n          <div className=\"box\">\r\n            <div className=\"title\">LOGIN</div>\r\n            <ErrorBox\r\n              messageError={\"Tài khoản không hợp lệ!\"}\r\n              showErrorBox={showErrorBox}\r\n            />\r\n            <div className=\"input\">\r\n              <label htmlFor=\"name\">Username</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"name\"\r\n                name=\"username\"\r\n                onChange={onChangeLogin}\r\n                value={loginForm.username}\r\n              />\r\n              <span className=\"spin\"></span>\r\n            </div>\r\n\r\n            <div className=\"input\">\r\n              <label htmlFor=\"pass\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"pass\"\r\n                name=\"password\"\r\n                onChange={onChangeLogin}\r\n                value={loginForm.password}\r\n              />\r\n              <span className=\"spin\"></span>\r\n            </div>\r\n\r\n            <div className=\"button login\">\r\n              <Button className=\"m-6 w-100\" onClick={Login}>\r\n                Sign in\r\n              </Button>\r\n            </div>\r\n\r\n            <a href=\"\" className=\"pass-forgot\">\r\n              Forgot your password?\r\n            </a>\r\n          </div>\r\n          <Register></Register>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","D:\\Deploy\\frontendDACN\\src\\components\\Login\\Register.js",[],[],"D:\\Deploy\\frontendDACN\\src\\components\\Layout\\task.js",[],[],"D:\\Deploy\\frontendDACN\\src\\components\\Login\\Errorbox.js",[],[],"D:\\Deploy\\frontendDACN\\src\\components\\LayoutConnectDB\\Task.js",["328"],[],"import { Draggable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\nimport { getOnePost } from \"../Dashboard/postBehavior\";\r\nimport { useState } from \"react\";\r\nconst Container = styled.div`\r\n  padding: 30px;\r\n  border: solid 2px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: ${(props) => (props.isDragging ? \"blue\" : \"white\")};\r\n`;\r\nconst Handle = styled.div`\r\n  background-image: url(\"https://toppng.com/uploads/preview/drag-ico-11569048140clkfdt3vrw.png\");\r\n  background-position: center;\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  width: 43px;\r\n  height: 36px;\r\n  border-radius: 13px;\r\n  margin-right: 20px;\r\n`;\r\nconst onclickGetonePost = async (task) => {\r\n  const getOneP = await getOnePost(task);\r\n  return getOneP.posts.title;\r\n};\r\nconst onclickGetonePostcolor = async (task) => {\r\n  const getOneP = await getOnePost(task);\r\n  return getOneP.posts.color;\r\n};\r\n\r\nconst Task = ({ task, index, setRemovetask, setRemovetaskfromCol, idcol }) => {\r\n  let taskname = onclickGetonePost(task);\r\n  const [taskname2, setTaskname] = useState(\"\");\r\n\r\n  taskname.then(function (result) {\r\n    setTaskname(result);\r\n  });\r\n  const removetask = (event) => {\r\n    setRemovetask(event.target.value);\r\n    setRemovetaskfromCol(idcol);\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        {task ? (\r\n          <Draggable draggableId={task.toString()} index={index}>\r\n            {(provider, snapshot) => (\r\n              <Container\r\n                {...provider.draggableProps}\r\n                isDragging={snapshot.isDragging}\r\n                ref={provider.innerRef}\r\n              >\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    width: \"100%\",\r\n                    justifyContent: \"space-between\",\r\n                  }}\r\n                >\r\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    {\" \"}\r\n                    <Handle {...provider.dragHandleProps}></Handle> {taskname2}\r\n                  </div>\r\n                  <div>\r\n                    {\" \"}\r\n                    <button\r\n                      className=\"btn btn-info\"\r\n                      value={task}\r\n                      onClick={removetask}\r\n                    >\r\n                      x\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n            )}\r\n          </Draggable>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Task;\r\n",{"ruleId":"329","severity":1,"message":"330","line":4,"column":10,"nodeType":"331","messageId":"332","endLine":4,"endColumn":13},{"ruleId":"329","severity":1,"message":"333","line":11,"column":3,"nodeType":"331","messageId":"332","endLine":11,"endColumn":11},{"ruleId":"329","severity":1,"message":"334","line":20,"column":10,"nodeType":"331","messageId":"332","endLine":20,"endColumn":15},{"ruleId":"329","severity":1,"message":"335","line":21,"column":10,"nodeType":"331","messageId":"332","endLine":21,"endColumn":24},{"ruleId":"329","severity":1,"message":"336","line":22,"column":8,"nodeType":"331","messageId":"332","endLine":22,"endColumn":20},{"ruleId":"329","severity":1,"message":"337","line":24,"column":10,"nodeType":"331","messageId":"332","endLine":24,"endColumn":22},{"ruleId":"329","severity":1,"message":"338","line":27,"column":13,"nodeType":"331","messageId":"332","endLine":27,"endColumn":17},{"ruleId":"329","severity":1,"message":"339","line":48,"column":7,"nodeType":"331","messageId":"332","endLine":48,"endColumn":21},{"ruleId":"340","severity":1,"message":"341","line":128,"column":3,"nodeType":"331","endLine":128,"endColumn":12,"suggestions":"342"},{"ruleId":"329","severity":1,"message":"333","line":8,"column":3,"nodeType":"331","messageId":"332","endLine":8,"endColumn":11},{"ruleId":"329","severity":1,"message":"343","line":12,"column":3,"nodeType":"331","messageId":"332","endLine":12,"endColumn":16},{"ruleId":"329","severity":1,"message":"344","line":14,"column":3,"nodeType":"331","messageId":"332","endLine":14,"endColumn":14},{"ruleId":"329","severity":1,"message":"345","line":28,"column":10,"nodeType":"331","messageId":"332","endLine":28,"endColumn":16},{"ruleId":"329","severity":1,"message":"346","line":28,"column":18,"nodeType":"331","messageId":"332","endLine":28,"endColumn":27},{"ruleId":"340","severity":1,"message":"347","line":124,"column":3,"nodeType":"331","endLine":124,"endColumn":12,"suggestions":"348"},{"ruleId":"349","severity":1,"message":"350","line":257,"column":13,"nodeType":"351","endLine":257,"endColumn":50},{"ruleId":"329","severity":1,"message":"352","line":5,"column":8,"nodeType":"331","messageId":"332","endLine":5,"endColumn":14},{"ruleId":"329","severity":1,"message":"353","line":4,"column":20,"nodeType":"331","messageId":"332","endLine":4,"endColumn":29},{"ruleId":"329","severity":1,"message":"354","line":7,"column":10,"nodeType":"331","messageId":"332","endLine":7,"endColumn":19},{"ruleId":"329","severity":1,"message":"355","line":76,"column":13,"nodeType":"331","messageId":"332","endLine":76,"endColumn":19},{"ruleId":"329","severity":1,"message":"356","line":9,"column":7,"nodeType":"331","messageId":"332","endLine":9,"endColumn":13},{"ruleId":"329","severity":1,"message":"357","line":2,"column":10,"nodeType":"331","messageId":"332","endLine":2,"endColumn":29},{"ruleId":"349","severity":1,"message":"350","line":82,"column":11,"nodeType":"351","endLine":82,"endColumn":46},{"ruleId":"329","severity":1,"message":"358","line":26,"column":7,"nodeType":"331","messageId":"332","endLine":26,"endColumn":29},{"ruleId":"329","severity":1,"message":"359","line":5,"column":3,"nodeType":"331","messageId":"332","endLine":5,"endColumn":13},{"ruleId":"340","severity":1,"message":"360","line":123,"column":3,"nodeType":"331","endLine":123,"endColumn":12,"suggestions":"361"},{"ruleId":"329","severity":1,"message":"330","line":4,"column":10,"nodeType":"331","messageId":"332","endLine":4,"endColumn":13},{"ruleId":"329","severity":1,"message":"333","line":11,"column":3,"nodeType":"331","messageId":"332","endLine":11,"endColumn":11},{"ruleId":"329","severity":1,"message":"334","line":20,"column":10,"nodeType":"331","messageId":"332","endLine":20,"endColumn":15},{"ruleId":"329","severity":1,"message":"335","line":21,"column":10,"nodeType":"331","messageId":"332","endLine":21,"endColumn":24},{"ruleId":"329","severity":1,"message":"336","line":22,"column":8,"nodeType":"331","messageId":"332","endLine":22,"endColumn":20},{"ruleId":"329","severity":1,"message":"337","line":24,"column":10,"nodeType":"331","messageId":"332","endLine":24,"endColumn":22},{"ruleId":"329","severity":1,"message":"338","line":27,"column":13,"nodeType":"331","messageId":"332","endLine":27,"endColumn":17},{"ruleId":"329","severity":1,"message":"362","line":28,"column":10,"nodeType":"331","messageId":"332","endLine":28,"endColumn":16},{"ruleId":"329","severity":1,"message":"339","line":49,"column":7,"nodeType":"331","messageId":"332","endLine":49,"endColumn":21},{"ruleId":"340","severity":1,"message":"341","line":129,"column":3,"nodeType":"331","endLine":129,"endColumn":12,"suggestions":"363"},{"ruleId":"329","severity":1,"message":"333","line":8,"column":3,"nodeType":"331","messageId":"332","endLine":8,"endColumn":11},{"ruleId":"329","severity":1,"message":"343","line":12,"column":3,"nodeType":"331","messageId":"332","endLine":12,"endColumn":16},{"ruleId":"329","severity":1,"message":"344","line":14,"column":3,"nodeType":"331","messageId":"332","endLine":14,"endColumn":14},{"ruleId":"329","severity":1,"message":"345","line":28,"column":10,"nodeType":"331","messageId":"332","endLine":28,"endColumn":16},{"ruleId":"329","severity":1,"message":"346","line":28,"column":18,"nodeType":"331","messageId":"332","endLine":28,"endColumn":27},{"ruleId":"340","severity":1,"message":"347","line":124,"column":3,"nodeType":"331","endLine":124,"endColumn":12,"suggestions":"364"},{"ruleId":"349","severity":1,"message":"350","line":258,"column":15,"nodeType":"351","endLine":258,"endColumn":52},{"ruleId":"329","severity":1,"message":"352","line":5,"column":8,"nodeType":"331","messageId":"332","endLine":5,"endColumn":14},{"ruleId":"329","severity":1,"message":"353","line":4,"column":20,"nodeType":"331","messageId":"332","endLine":4,"endColumn":29},{"ruleId":"329","severity":1,"message":"354","line":7,"column":10,"nodeType":"331","messageId":"332","endLine":7,"endColumn":19},{"ruleId":"329","severity":1,"message":"355","line":76,"column":13,"nodeType":"331","messageId":"332","endLine":76,"endColumn":19},{"ruleId":"329","severity":1,"message":"359","line":5,"column":3,"nodeType":"331","messageId":"332","endLine":5,"endColumn":13},{"ruleId":"340","severity":1,"message":"360","line":123,"column":3,"nodeType":"331","endLine":123,"endColumn":12,"suggestions":"365"},{"ruleId":"329","severity":1,"message":"356","line":9,"column":7,"nodeType":"331","messageId":"332","endLine":9,"endColumn":13},{"ruleId":"329","severity":1,"message":"357","line":2,"column":10,"nodeType":"331","messageId":"332","endLine":2,"endColumn":29},{"ruleId":"349","severity":1,"message":"350","line":86,"column":13,"nodeType":"351","endLine":86,"endColumn":48},{"ruleId":"329","severity":1,"message":"358","line":26,"column":7,"nodeType":"331","messageId":"332","endLine":26,"endColumn":29},"no-unused-vars","'Map' is defined but never used.","Identifier","unusedVar","'getPosts' is defined but never used.","'udlus' is defined but never used.","'CheckLoginUser' is defined but never used.","'ReactTooltip' is defined but never used.","'FormSendMail' is defined but never used.","'Icon' is defined but never used.","'myDecodedToken' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setistrue'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [istrue, nav] as a second argument to the useEffect Hook.",["366"],"'getAllColumns' is defined but never used.","'DeletedPost' is defined but never used.","'runone' is assigned a value but never used.","'setrunone' is assigned a value but never used.","React Hook useEffect contains a call to 'setRemovetaskfromCol'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [removeTask, nav, getPostTodeleteTask, removeTaskfromCol] as a second argument to the useEffect Hook.",["367"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'styled' is defined but never used.","'useEffect' is defined but never used.","'isExpired' is defined but never used.","'update' is assigned a value but never used.","'gcolor' is assigned a value but never used.","'DeletedColumns_ByID' is defined but never used.","'onclickGetonePostcolor' is assigned a value but never used.","'getAllMaps' is defined but never used.","React Hook useEffect contains a call to 'setistrue'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [istrue, clickOnetimes, nav] as a second argument to the useEffect Hook.",["368"],"'linear' is defined but never used.",["369"],["370"],["371"],{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"372","fix":"378"},{"desc":"374","fix":"379"},{"desc":"376","fix":"380"},"Add dependencies array: [istrue, nav]",{"range":"381","text":"382"},"Add dependencies array: [removeTask, nav, getPostTodeleteTask, removeTaskfromCol]",{"range":"383","text":"384"},"Add dependencies array: [istrue, clickOnetimes, nav]",{"range":"385","text":"386"},{"range":"387","text":"382"},{"range":"388","text":"384"},{"range":"389","text":"386"},[3850,3850],", [istrue, nav]",[4281,4281],", [removeTask, nav, getPostTodeleteTask, removeTaskfromCol]",[4004,4004],", [istrue, clickOnetimes, nav]",[3883,3883],[4281,4281],[4004,4004]]